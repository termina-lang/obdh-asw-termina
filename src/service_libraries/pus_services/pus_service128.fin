/*
PUS SERVICE 128 : PRIVATE SERVICE, REEBOT
*/

import service_libraries.pus_tc_handler;
import service_libraries.pus_services.pus_service1;

import service_libraries.pus_services.pus_service128.types;

interface PUSS128Iface {
    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>, reebot_flag : &mut bool);
};

resource class PUSService128 provides PUSS128Iface {

    exec_tc_req_status_update : PS128ExecTCReqStatusUpdate;

    pus_service_1 : access PUSService1Iface;

    method exec128_1TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        self->pus_service_1.notify_tm_1_3(
                self->exec_tc_req_status_update.packet_id,
                self->exec_tc_req_status_update.packet_seq_ctrl,
                self->exec_tc_req_status_update.flags_ack, 
                &mut status);

        if (status is Success) {
            self->exec_tc_req_status_update.reebot_flag = true;
            self->pus_service_1.notify_tm_1_7(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.flags_ack, 
                    &mut status);
        }
    
        return status;
        
    }

    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>, reebot_flag : &mut bool) {

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
        self->exec_tc_req_status_update.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
        self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;

        if (subtype == 1) {

            status = self->exec128_1TC();

        } else {

            status = Failure(ACCEPTANCE_ERROR);

        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {


                if (error_code == ACCEPTANCE_ERROR) {

                    self->pus_service_1.send_tm_1_4_error_in_acceptance(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            action_status);

                } else if (error_code == BUILD_TM_ERROR) {

                    self->pus_service_1.send_tm_1_8_tm_exceed_limit_appdata(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            action_status);

                } else {
                    
                    *action_status = Failure(error_code);
                    
                }   
                
            }  
        }

        *reebot_flag = self->exec_tc_req_status_update.reebot_flag;
        
        return;
    
    }

};
