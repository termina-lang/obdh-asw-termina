/*
PUS SERVICE 4 : PARAMETER STATISTICS REPORTING
*/

import service_libraries.pus_services.pus_service4.internal;
import resources.system_data_pool;

interface PUSS4Iface {

    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>);
    procedure update_all_stats(&mut self);
    procedure startup(&mut self);
    
};

resource class PUSService4 provides PUSS4Iface {

    exec_tc_req_status_update : PS4ExecTCReqStatusUpdate;

    param_stats : [StatsDef; max_num_of_stats];
    stats_config_table : StatsConfig;

    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;

    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandler>;
    tm_counter : access TMCounterIface;

    obt_manager : access OBTManagerIface;

    pus_service_1 : access PUSService1Iface;

    method get_PID_defined_stats_index (&priv self) -> Status<i32> {

        var status : Status<i32> = Failure(INVALID_PID_ERROR);

        for i : usize in 0 .. max_num_of_stats while (status is Failure) {

            if(self->exec_tc_req_status_update.PID == self->stats_config_table.PID[i]) {

                if (self->stats_config_table.defined[i] == true) {

                    if(sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID)) {

                        self->exec_tc_req_status_update.valid_index = i;
                        status = Success;
                        
                    } else {
                        self->stats_config_table.defined[i] = false;
                    
                    }
                }

            }
        }
        return status;
    }

    method get_free_index (&self) -> IndexStatus {

        var id_status: IndexStatus = {index = 0, status = Failure(NO_FREE_STATS_INDEX_ERROR)};

        for i : usize in 0 .. max_num_of_stats while (id_status.status is Failure) {

            if ((self->stats_config_table.defined[i] == false) || (sys_data_pool_is_valid_PID(self->stats_config_table.PID[i])) == false) {

                id_status.index = i; 
                id_status.status = Success;
            }
        }
        return id_status;
    }

    method is_stats_index_defined(&self, index: usize) -> bool {

        var is_defined: bool = false;

        if(index < max_num_of_stats){

            if (self->stats_config_table.defined[index] == true) {

                if(sys_data_pool_is_valid_PID(self->stats_config_table.PID[index])) {

                    is_defined = true;

                } else {

                }
            }
        }

        return is_defined;
    }

    method add_PID_stats (&priv self) -> Status<i32> {
        
        var status : Status<i32> = Success;
        var index_status : IndexStatus = {index = 0, status = Success};
        status = self->get_PID_defined_stats_index();

        if(status is Failure) {

            index_status = self->get_free_index();
            self->exec_tc_req_status_update.valid_index = index_status.index;
        }

        if(index_status.status is Success) {

            var PID_index: usize = self->exec_tc_req_status_update.valid_index;

            self->stats_config_table.defined[PID_index] = true;
            self->stats_config_table.PID[PID_index] = self->exec_tc_req_status_update.PID;

            self->param_stats[PID_index].samples = 0;
            var current_obt : MissionOBT = {seconds = 0, finetime = 0};
            self->obt_manager.get_current_obt(&mut current_obt);
            self->stats_config_table.start_time[PID_index] = current_obt;
            status = Success;
            
        } else {

            status = Failure(NO_FREE_STATS_INDEX_ERROR);
        }

        return status;
    }

    method delete_PID_stats (&priv self) -> Status<i32> {

        var status : Status<i32> = Success;
        status = self->get_PID_defined_stats_index();

        if (status is Success) {
            self->stats_config_table.defined[self->exec_tc_req_status_update.valid_index] = false;
        }

        return status;
        
    }

    method delete_all_stats (&priv self){

        for i : usize in 0 .. max_num_of_stats {
            self->stats_config_table.defined[i] = false;
        }

        return;
        
    }

// TC[4,1] : Report the parameter statistics
    method exec4_1TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        self->pus_service_1.notify_tm_1_3(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.flags_ack,
                    &mut status);

        for i : usize in 0 .. max_num_of_stats while (status is Success) {

            if (self->stats_config_table.defined[i] == true) {

                var tm_handler : Option<box TMHandler> = None;
                self->a_tm_handler_pool.alloc(&mut tm_handler);

                match tm_handler {

                    case Some(b_tm_handler) => {

                        var current_obt : MissionOBT = {seconds = 0, finetime = 0};
                        var tm_count : u16 = 0 : u16;
                        
                        self->tm_counter.get_next_tm_count(&mut tm_count);
                        self->obt_manager.get_current_obt(&mut current_obt);

                        status = build_tm_4_2(&mut b_tm_handler, tm_count, i, self->exec_tc_req_status_update.N, &(self->stats_config_table), &(self->param_stats), current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        
                        }
                        
                        //reset_stats_index
                        self->param_stats[i].samples = 0;
                        var current_obt_update : MissionOBT = {seconds = 0, finetime = 0};
                        self->obt_manager.get_current_obt(&mut current_obt_update);
                        self->stats_config_table.start_time[i] = current_obt_update;
                    }
                    case None => {
                        status = Failure(TM_POOL_ALLOC_FAILURE);
                    }
                }
            }
        }

        if (status is Success) {

            self->pus_service_1.notify_tm_1_7(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack, 
                        &mut status);

        }
        else {
            //TODO TM/TC Memory Fail -> EEPROM, Recov Action -> Reset -> Reported in Reboot
            //Generar TM[5,2]
        }


        return status;
    }

// TC[4,6] : Add or update parameter statistics definitions
    method exec4_6TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.N,
                        &mut status);

        } else if (sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID) == false) {

            self->pus_service_1.send_tm_1_4_PID_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.PID,
                        &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack,
                        &mut status);
            
            if (status is Success) {
                status = self->add_PID_stats();
            }

            if (status is Success) {

                self->pus_service_1.notify_tm_1_7(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack, 
                        &mut status);

            } else {

                self->pus_service_1.send_tm_1_8_not_free_stats_config(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.PID,
                        &mut status);
             
            }

        }

        return status;
    }

// TC[4,7] : Delete parameter statistics definitions
    method exec4_7TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.N,
                    &mut status);

        } else if (sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID) == false) {

                self->pus_service_1.send_tm_1_4_PID_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.PID,
                        &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.flags_ack, 
                    &mut status);

            if (status is Success) {
                status = self->delete_PID_stats();
            }

            if (status is Success) {

                self->pus_service_1.notify_tm_1_7(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack, 
                        &mut status);

            } else {

                self->pus_service_1.send_tm_1_4_PID_stats_undefined(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.PID,
                            &mut status);

            }
        }

        return status;
    }
    
    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>){

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
        self->exec_tc_req_status_update.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
        self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
        self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;

        if (subtype == 6 || subtype == 7) {

            status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));
            if (status is Success){
                status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.PID));
            }

        }

        if (status is Success) {

            if (subtype == 1) {

                status = self->exec4_1TC();

            } else if (subtype == 6) {

                status = self->exec4_6TC();

            } else if (subtype == 7) {

                status = self->exec4_7TC();

            } else {

                status = Failure(ACCEPTANCE_ERROR);
            }

        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    self->pus_service_1.send_tm_1_4_error_in_acceptance(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            &mut status);

                } else if (error_code == BUILD_TM_ERROR) {

                    self->pus_service_1.send_tm_1_8_tm_exceed_limit_appdata(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            &mut status);

                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->pus_service_1.send_tm_1_4_short_pack_length(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.tc_num_bytes,
                            &mut status);

                } else {
                  
                    *action_status = Failure(error_code);
                }
                
            }  
        }

        return;
    
    }

    method SDP_param_higher_than_limit(&self, pid_index : usize) -> bool {

        var is_higher : bool = false;
        var PID : u16 = self->stats_config_table.PID[pid_index];
        var u8_SDP_value : u8 = 0;
        var u32_SDP_value : u32 = 0;

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

        match item_type {
            case u8_t => {
                self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                if ((u8_SDP_value as u32) > self->param_stats[pid_index].max) {
                    is_higher = true;
                }
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                if (u32_SDP_value > self->param_stats[pid_index].max) {
                    is_higher = true;
                }
            }
            case NoValidPID => {
                //Error
            }
        }

        return is_higher;
    }


    method SDP_param_lower_than_limit(&self, pid_index : usize) -> bool {

        var is_lower : bool = false;
        var PID : u16 = self->stats_config_table.PID[pid_index];
        var u8_SDP_value : u8 = 0;
        var u32_SDP_value : u32 = 0;

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

        match item_type {
            case u8_t => {
                self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                if ((u8_SDP_value as u32) < self->param_stats[pid_index].min) {
                    is_lower = true;
                }
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                if (u32_SDP_value < self->param_stats[pid_index].min) {
                    is_lower = true;
                }
            }
            case NoValidPID => {
                //Error
            }
        }

        return is_lower;
    }

    method get_data_pool_item(&self, PID: u16 ) -> u32 {

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);
        var SDP_value : u32 = 0;

        match item_type {
            case u8_t => {
                var aux_value: u8 = 0;
                self->system_data_pool_u8.load_index(PID as usize, &mut aux_value);
                SDP_value = aux_value as u32;
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut SDP_value);
            }
            case NoValidPID => {
                //Error
            }
        }
        return SDP_value;

    }


    method SDP_get_mean(&self, pid_index : usize) -> u32 {

        var PID : u16 = self->stats_config_table.PID[pid_index];
        var u8_SDP_value : u8 = 0;
        var u32_SDP_value : u32 = 0;
        var mean_value : u32 = 0;

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

        match item_type {
            case u8_t => {
                self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                mean_value = ((self->param_stats[pid_index].mean_value * self->param_stats[pid_index].samples) + (u8_SDP_value as u32)) / (self->param_stats[pid_index].samples + 1);   
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                mean_value = ((self->param_stats[pid_index].mean_value * self->param_stats[pid_index].samples) + u32_SDP_value) / (self->param_stats[pid_index].samples + 1);
            }
            case NoValidPID => {
                //Error
            }
        }

        return mean_value;
    }

    procedure update_all_stats(&mut self) {

        for i : usize in 0 .. max_num_of_stats {

            if(self->is_stats_index_defined(i) == true) {

                var PID : u16 = self->stats_config_table.PID[i];

                if(self->param_stats[i].samples > 0){

                    if(self->SDP_param_higher_than_limit(i) == true) {

                        var system_data_pool_item : u32 = self->get_data_pool_item(PID);
                        self->param_stats[i].max = system_data_pool_item;
                        var current_time : MissionOBT = {
                            seconds = 0,
                            finetime = 0
                        };
                        self->obt_manager.get_current_obt(&mut current_time);
                        self->param_stats[i].max_obt = current_time;


                    } else if (self->SDP_param_lower_than_limit(i) == true) {

                        var system_data_pool_item : u32 = self->get_data_pool_item(PID);
                        self->param_stats[i].min = system_data_pool_item;
                        var current_time : MissionOBT = {
                            seconds = 0,
                            finetime = 0
                        };
                        self->obt_manager.get_current_obt(&mut current_time);
                        self->param_stats[i].min_obt = current_time;

                    } else {

                    }

                    self->param_stats[i].mean_value = self->SDP_get_mean(i);

                }
                else {

                    var system_data_pool_item : u32 = self->get_data_pool_item(PID);
                    self->param_stats[i].max = system_data_pool_item;
                    self->param_stats[i].min = system_data_pool_item;
                    self->param_stats[i].mean_value = system_data_pool_item;
                    var current_time : MissionOBT = {
                        seconds = 0,
                        finetime = 0
                    };
                    self->obt_manager.get_current_obt(&mut current_time);
                    self->param_stats[i].max_obt = current_time;
                    self->param_stats[i].min_obt = current_time;
                    
                    
                }

                self->param_stats[i].samples = self->param_stats[i].samples + 1;

                
            } else {
                
                self->stats_config_table.defined[i] = false;
                
            }


        }

        return;
    }


    procedure startup(&mut self){

        for i : usize in 0 .. max_num_of_stats {

            if(self->is_stats_index_defined(i) == true) {

                self->param_stats[i].samples = 0;
                var current_obt : MissionOBT = {seconds = 0, finetime = 0};
                self->obt_manager.get_current_obt(&mut current_obt);
                self->stats_config_table.start_time[i] = current_obt;

            }
            else {
                self->stats_config_table.defined[i] = false;
            }
            
        }

        return;
    }

};