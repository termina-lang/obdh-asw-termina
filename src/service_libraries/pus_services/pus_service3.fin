/*
PUS SERVICE 3 : HOUSEKEEPING
*/

import service_libraries.pus_services.pus_service1;
import service_libraries.pus_services.pus_service3.internal;


interface PUSS3Iface {

    procedure do_hk (&mut self, action_status : &mut Status<i32>);    
    procedure exec_tc(&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>);
    procedure update_params(&mut self);

};

resource class PUSService3 provides PUSS3Iface {

    hk_config_table : [HKConfiguration; max_num_of_SIDs];

    exec_tc_req_status_update : PS3ExecTCReqStatusUpdate;
    
    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;

    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandler>;
    tm_counter : access TMCounterIface;

    obt_manager : access OBTManagerIface;
    
    pus_service_1 : access PUSService1Iface;
    pus_service_5 : access PUSS5Iface;

    random_seed : u32;

    viewer get_SIDindex (&self) -> IndexFound {

        var index_found: IndexFound = {found = false, index = 0};

        for i : usize in 0 .. max_num_of_SIDs while (index_found.found == false) {

            if (self->exec_tc_req_status_update.tc_data.SID == self->hk_config_table[i].SID){

                index_found.found = true;
                index_found.index = i;
            }
        }
        return index_found;
    }

    method exec3_5TC(&priv self)-> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.tc_data.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.tc_data.packet_id,
                        self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                        self->exec_tc_req_status_update.tc_data.N, 
                        &mut status);
        
        } else {

            self->exec_tc_req_status_update.index = self->get_SIDindex();

            if (self->exec_tc_req_status_update.index.found) {

                self->pus_service_1.notify_tm_1_3(
                            self->exec_tc_req_status_update.tc_data.packet_id,
                            self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                            self->exec_tc_req_status_update.tc_data.flags_ack,
                            &mut status);
                
                if (status is Success) {

                    self->hk_config_table[self->exec_tc_req_status_update.index.index].enabled = true;
                    self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;

                    self->pus_service_1.notify_tm_1_7(
                                self->exec_tc_req_status_update.tc_data.packet_id,
                                self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                                self->exec_tc_req_status_update.tc_data.flags_ack,
                                &mut status);

                }
            
            } else {

                self->pus_service_1.send_tm_1_4_SID_not_valid(
                            self->exec_tc_req_status_update.tc_data.packet_id,
                            self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                            self->exec_tc_req_status_update.tc_data.SID,
                            &mut status);

            }

        }
 
        return status;
    }

    method exec3_6TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.tc_data.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.tc_data.packet_id,
                        self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                        self->exec_tc_req_status_update.tc_data.N,
                        &mut status);
        
        } else {

            self->exec_tc_req_status_update.index = self->get_SIDindex();

            if (self->exec_tc_req_status_update.index.found) {

                self->pus_service_1.notify_tm_1_3(
                            self->exec_tc_req_status_update.tc_data.packet_id,
                            self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                            self->exec_tc_req_status_update.tc_data.flags_ack,
                            &mut status);
                
                if (status is Success) {

                    self->hk_config_table[self->exec_tc_req_status_update.index.index].enabled = false;
                    self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;

                    self->pus_service_1.notify_tm_1_7(
                                self->exec_tc_req_status_update.tc_data.packet_id,
                                self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                                self->exec_tc_req_status_update.tc_data.flags_ack,
                                &mut status);

                }
            
            } else {

                self->pus_service_1.send_tm_1_4_SID_not_valid(
                            self->exec_tc_req_status_update.tc_data.packet_id,
                            self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                            self->exec_tc_req_status_update.tc_data.SID,
                            &mut status);


            }

        }

        return status;
    
    }

    method exec3_31TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.tc_data.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.tc_data.packet_id,
                        self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                        self->exec_tc_req_status_update.tc_data.N,
                        &mut status);

        } else {

            self->exec_tc_req_status_update.index = self->get_SIDindex();

            if (self->exec_tc_req_status_update.index.found) {

                self->pus_service_1.notify_tm_1_3(
                            self->exec_tc_req_status_update.tc_data.packet_id,
                            self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                            self->exec_tc_req_status_update.tc_data.flags_ack,
                            &mut status);

                if (status is Success) {
                              
                    self->hk_config_table[self->exec_tc_req_status_update.index.index].interval = self->exec_tc_req_status_update.tc_data.collection_interval;
                    self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;

                    self->pus_service_1.notify_tm_1_7(
                                self->exec_tc_req_status_update.tc_data.packet_id,
                                self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                                self->exec_tc_req_status_update.tc_data.flags_ack,
                                &mut status);

                } else {

                    self->pus_service_1.send_tm_1_4_SID_not_valid(
                                self->exec_tc_req_status_update.tc_data.packet_id,
                                self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                                self->exec_tc_req_status_update.tc_data.SID,
                                &mut status);

                }
            }
        
        }

        return status;
    }



    procedure exec_tc(&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>){

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        self->exec_tc_req_status_update.tc_data.packet_id = tc_handler->packet_header.packet_id;
        self->exec_tc_req_status_update.tc_data.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
        self->exec_tc_req_status_update.tc_data.flags_ack = tc_handler->df_header.flag_ver_ack;
        self->exec_tc_req_status_update.tc_data.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;

        status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_data.N));

        if (status is Success) {
            status = tc_handler_get_u16_appdata_field(tc_handler, &mut self->exec_tc_req_status_update.tc_data.SID);
        }

        if ((status is Success) && subtype == 31) {
            status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_data.collection_interval));
        }

        if (status is Success) {

            if (subtype == 5) {

                status = self->exec3_5TC();

            } else if (subtype == 6) {

                status = self->exec3_6TC();

            } else if (subtype == 31) {

                status = self->exec3_31TC();

            } else {

                status = Failure(ACCEPTANCE_ERROR);
            
            }

        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {


                if (error_code == ACCEPTANCE_ERROR) {

                    self->pus_service_1.send_tm_1_4_error_in_acceptance(
                                self->exec_tc_req_status_update.tc_data.packet_id,
                                self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                                action_status);

                } else if (error_code == BUILD_TM_ERROR) {

                    self->pus_service_1.send_tm_1_8_tm_exceed_limit_appdata(
                                self->exec_tc_req_status_update.tc_data.packet_id,
                                self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                                action_status);
                        
                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->pus_service_1.send_tm_1_4_short_pack_length(
                                self->exec_tc_req_status_update.tc_data.packet_id,
                                self->exec_tc_req_status_update.tc_data.packet_seq_ctrl,
                                self->exec_tc_req_status_update.tc_data.tc_num_bytes,
                                action_status);

                } else {
                              
                    *action_status = Failure(error_code);
                     
                }
                
            }  
        }

        return;

    } 
    
    procedure do_hk (&mut self, action_status : &mut Status<i32>) {

        var do_hk_status : Status<i32> = Success;

        for i : usize in 0 .. max_num_of_SIDs while (*action_status is Success) {

            if (self->hk_config_table[i].enabled == true){

                self->hk_config_table[i].interval_control = self->hk_config_table[i].interval_control + 1;

                if (self->hk_config_table[i].interval_control >= self->hk_config_table[i].interval){

                    self->hk_config_table[i].interval_control = 0;

                    var tm_handler : Option<box TMHandler> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                        var tm_count : u16 = 0 : u16;
                        self->tm_counter.get_next_tm_count(&mut tm_count);

                        startup_tm(&mut b_tm_handler);
                        do_hk_status = append_u16_appdata_field(&mut b_tm_handler, self->hk_config_table[i].SID);

                        var PID : u16 = 0;
                        var u32_SDP_value : u32 = 0;
                        var u8_SDP_value : u8 = 0;

                        for j : usize in 0 .. max_params_per_SID while (j < (self->hk_config_table[i].num_params as usize) && (do_hk_status is Success)) {

                            PID = self->hk_config_table[i].params_def[j];
                            var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

                            match item_type {
                                case u8_t => {
                                    self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                                    do_hk_status = append_u8_appdata_field(&mut b_tm_handler, u8_SDP_value);
                                }
                                case u32_t => {
                                    self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                                    do_hk_status = append_u32_appdata_field(&mut b_tm_handler, u32_SDP_value);
                                }
                                case NoValidPID => {
                                    do_hk_status = Failure(SDP_ITEM_TYPE_ERROR);
                                }
                            }
                    
                        }

                        var current_obt: MissionOBT = {seconds = 0, finetime = 0};
                        self->obt_manager.get_current_obt(&mut current_obt);

                        if (do_hk_status is Success){
                            close_tm(&mut b_tm_handler, 3, 25, tm_count, current_obt);
                            self->tm_channel.send_tm(b_tm_handler, &mut do_hk_status);
                        }
                         else {
                            //Generar TM[5,2]
                            self->pus_service_5.send_tm_5_2(&mut do_hk_status);
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }
                        
                   
                        }
                        case None => {
                            *action_status = Failure(TM_POOL_ALLOC_FAILURE);

                        }
                    }       
                }
            }
        }

        return;
    }

    procedure update_params(&mut self) {

        for i : usize in 0 .. 5 {

            var random_noise : u32 = (rand_r(&mut (self->random_seed)) % 11) - 5;
            var data : u32 = 0;

            self->system_data_pool_u32.load_index(i, &mut data);
            data = data + random_noise;

           self->system_data_pool_u32.store_index(i, data);
        }

        return;
    }



};










