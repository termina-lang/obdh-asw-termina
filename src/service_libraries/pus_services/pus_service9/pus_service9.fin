/**
 * @file pus_service9_time_management.fin
 * @brief Implementation of PUS Service 9: Time Management.
 */

import service_libraries.pus_services.pus_service9.pus_service9_help;


/**
 * @interface PUSS9Iface
 * @brief Interface for PUS Service 9 Time Management.
 *
 * Defines the methods required to get the current onboard time (OBT) and
 * to execute telecommands related to time management.
 */
interface PUSS9Iface {

    procedure get_current_obt(&mut self, current_obt: &mut MissionObt);
    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);

};


/**
 * @resourceclass PUSService9
 * @brief Resource class implementing PUS Service 9: Time Management.
 *
 * Provides onboard time tracking, telecommand execution, and telemetry generation
 * for time management telecommands according to PUS specifications.
 */
resource class PUSService9 provides PUSS9Iface {

    ref_obt : MissionObt; /**< Reference onboard time at last update */
    ref_time_val_from_power_on : TimeVal; /**< System uptime reference from power on */
    exec_tc_req_status : PSExecTCReqStatus; /**< Current execution status of the telecommand request */
    exec_tc_req_status_update : PS9ExecTCReqStatusUpdate; /**< Data extracted from the telecommand */

    tm_channel: access TMChannelIface; /**< Telemetry channel interface */
    a_tm_handler_pool : access Allocator<TMHandlerT>; /**< Allocator for telemetry handlers */
    tm_counter : access TMCounterIface; /**< Telemetry counter interface */

    system_port : access SystemAPI; /**< System API port for clock and other system functions */

    /**
     * @brief Set the onboard time (OBT) reference from the telecommand request status.
     *
     * Updates the internal reference OBT and captures the current system uptime.
     */
    method set_obt (&priv self) {
        self->ref_obt = self->exec_tc_req_status_update.next_OBT;
        var aux_time_val : TimeVal = {
            tv_sec = 0,
            tv_usec = 0
        };
        self->system_port.clock_get_uptime(&mut aux_time_val);
        self->ref_time_val_from_power_on = aux_time_val;

        return;
    }


    /**
     * @brief Compute and retrieve the current onboard time (OBT).
     *
     * Calculates the current OBT by adding the elapsed system uptime since
     * the last reference to the stored reference OBT.
     *
     * @param[out] current_obt Pointer to MissionObt structure to store the computed current OBT.
     */
    procedure get_current_obt(&mut self, current_obt: &mut MissionObt) {

        var fine_time_increment : u32 = 0;
        var time_val_from_power_on : TimeVal = {
            tv_sec = 0,
            tv_usec = 0
        };
        self->system_port.clock_get_uptime(&mut time_val_from_power_on);
        var interval : TimeVal = {
            tv_sec = 0,
            tv_usec = 0
        };

        interval = substract_TimeVal(time_val_from_power_on, self->ref_time_val_from_power_on);

        fine_time_increment = self->ref_obt.finetime as u32;
        fine_time_increment = fine_time_increment + (interval.tv_usec*1000)/15259;

        current_obt->seconds = self->ref_obt.seconds + interval.tv_sec + fine_time_increment >>16 : u32;
        current_obt->finetime = (fine_time_increment &0xFFFF) as u16;

        return;
    }


    /**
     * @brief Viewer to get the current onboard time (OBT).
     *
     * Similar to get_current_obt but for inner use.
     *
     * @return MissionObt Current onboard time.
     */
    viewer inner_get_current_obt(&self) -> MissionObt {

        var fine_time_increment : u32 = 0;
        var time_val_from_power_on : TimeVal = {
            tv_sec = 0,
            tv_usec = 0
        };
        self->system_port.clock_get_uptime(&mut time_val_from_power_on);
        var interval : TimeVal = {
            tv_sec = 0,
            tv_usec = 0
        };

        interval = substract_TimeVal(time_val_from_power_on, self->ref_time_val_from_power_on);

        fine_time_increment = self->ref_obt.finetime as u32;
        fine_time_increment = fine_time_increment + (interval.tv_usec*1000)/15259;

        var current_obt : MissionObt = {
            seconds = self->ref_obt.seconds + interval.tv_sec + fine_time_increment >>16 : u32,
            finetime = (fine_time_increment &0xFFFF) as u16
        };

        return current_obt;

    }



    /**
     * @brief Execute TC subtype 129 (specific time management TC - set current OBT).
     *
     * Handles execution of the TC with subtype 129 by generating telemetry
     * reports TM[1,3] and TM[1,7] as acknowledgments, updating internal status,
     * and managing telemetry handler resources.
     *
     * @return PSExecTCReqStatus Status of TC execution (Exit, Failure, or Error).
     */
    method exec9_129TC (&priv self) -> PSExecTCReqStatus {

        var ack_enabled : bool = false;
        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);
                current_obt = self->inner_get_current_obt();
                build_tm_1_3(&mut b_tm_handler, tm_count, self->exec_tc_req_status_update.flags_ack, current_obt, &mut (next_status.status), &mut ack_enabled);

                if (ack_enabled) {

                    if (next_status.status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut (next_status.status));

                    }
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                    }

                } else {
                    
                    self->a_tm_handler_pool.free(b_tm_handler);
                }
                
                self->set_obt();

                var tm_handler2 : Option<box TMHandlerT> = None;
                self->a_tm_handler_pool.alloc(&mut tm_handler2);

                match tm_handler2 {

                    case Some(b_tm_handler2) => {

                        var tm_count2 : u16 = 0 : u16;
                        self->tm_counter.get_next_tm_count(&mut tm_count2);
                        current_obt = self->inner_get_current_obt();
                        build_tm_1_7(&mut b_tm_handler2, tm_count2, self->exec_tc_req_status_update.flags_ack, current_obt, &mut (next_status.status), &mut ack_enabled);

                        if (ack_enabled) {

                            if (next_status.status is Success){

                                self->tm_channel.send_tm(b_tm_handler2, &mut (next_status.status));

                            }
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler2);
                
                            }

                        } else {
                            
                            self->a_tm_handler_pool.free(b_tm_handler2);
                        }
                    }
                    case None => {
                        next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                    }
                }


            }
            case None => {

                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);

            }
        }
        
        return next_status;

    }


    /**
     * @brief Manage short packet length error by generating TM[1,4].
     *
     * Sends telemetry indicating a short packet length error.
     *
     * @return PSExecTCReqStatus Status after sending TM.
     */
    viewer manage_short_pack_length_error(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                current_obt = self->inner_get_current_obt();
                build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                             (self->exec_tc_req_status_update.tc_num_bytes), current_obt, &mut next_status.status);

                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut (next_status.status));

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                   
                }
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }


    /**
     * @brief Manage error in acceptance by generating TM[1,4] error message.
     *
     * Sends telemetry indicating an error in acceptance of the telecommand.
     *
     * @return PSExecTCReqStatus Status after sending TM.
     */
    viewer manage_error_in_acceptance(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                current_obt = self->inner_get_current_obt();
                build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut (next_status.status));

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                }
                
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }


    /**
     * @brief Manage telemetry limit application data reached by generating TM[1,8].
     *
     * Sends telemetry indicating that telemetry application data limit has been reached.
     *
     * @return PSExecTCReqStatus Status after sending TM.
     */
    viewer manage_tm_limit_app_data_reached(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                current_obt = self->inner_get_current_obt();
                build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut (next_status.status));
                } 
                else {

                    self->a_tm_handler_pool.free(b_tm_handler);
                        
                }
                
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

    
    /**
     * @brief Execute a time management telecommand.
     *
     * Main telecommand execution procedure that manages the TC lifecycle,
     * including parameter extraction, execution based on subtype, and error handling.
     *
     * @param[in,out] tc_handler Reference to the telecommand handler.
     * @param[in,out] action_status Status variable updated with execution outcome.
    */
    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>){

        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status.exec_tc_status is PSReqStatus::Exit) == false {

            match self->exec_tc_req_status.exec_tc_status {

                case Init => {

                    self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.packet_error_ctrl = tc_handler->packet_error_ctrl;
                    self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
                    self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
                    self->exec_tc_req_status.status = tc_handler_get_u32_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.next_OBT.seconds));
                    self->exec_tc_req_status.status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.next_OBT.finetime));
       
                    if (self->exec_tc_req_status.status is Success) {

                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::ExecTC;
                        
                    } else {

                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::Exit;
                        
                    }

                }
                case ExecTC => {

                    if (subtype == 129) {

                        self->exec_tc_req_status = self->exec9_129TC();

                    } else {

                        self->exec_tc_req_status.status = Failure(ACCEPTANCE_ERROR);
                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::Exit;
                    }
                }
                case Exit => {

                }  
            }
        }

        match self->exec_tc_req_status.status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    self->exec_tc_req_status = self->manage_error_in_acceptance();
                    
                } else if (error_code == BUILD_TM_ERROR) {

                    self->exec_tc_req_status = self->manage_tm_limit_app_data_reached();
                
                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->exec_tc_req_status = self->manage_short_pack_length_error();
                
                } else {
                    
                    *action_status = Failure(error_code);
                
                }
                
            }  
        }

        self->exec_tc_req_status = {
                    exec_tc_status = PSReqStatus::Init,
                    status = Success
                };

        
        return;
    
    }


};

