import service_libraries.pus_services.pus_service1.internal;
import service_libraries.pus_services.pus_service1.tc_acceptance;
import service_libraries.pus_tc_handler;

import resources.tm_channel;
import resources.tm_counter;

/// @defgroup TM_1_4_ErrorCodes Error Codes for TM[1,4] Packets
/// @{
/// Error codes used to indicate failure reasons in TM[1,4] packets.

const TM_1_4_TC_X_Y_TC_SHORT_PACK_LENGTH       : u8 = 1;  ///< TC packet is too short.
const TM_1_4_TC_X_Y_TC_NOT_VALID_NUM_OF_INSTR  : u8 = 2;  ///< Invalid number of instructions.
const TM_1_4_TC_2_X_DEVICE_NOT_VALID           : u8 = 3;  ///< Device not valid.
const TM_1_4_TC_2_X_DEVICE_ADDRESS_NOT_VALID   : u8 = 4;  ///< Invalid device address.
const TM_1_4_TC_3_X_INVALID_SID                : u8 = 5;  ///< Invalid SID (Structure Identifier).
const TM_1_4_TC_4_7_PID_STATS_UNDEFINED        : u8 = 6;  ///< PID statistics undefined.
const TM_1_4_TC_5_X_INVALID_EV_ID              : u8 = 7;  ///< Invalid event ID.
const TM_1_4_TC_6_X_INVALID_MEMORY_ADDRESS     : u8 = 8;  ///< Invalid memory address.
const TM_1_4_TC_6_X_MEMORY_ID_READ_ONLY        : u8 = 9;  ///< Memory ID is read-only.
const TM_1_4_TC_6_X_OUT_OF_MEMORY_ID_LIMITS    : u8 = 10; ///< Memory ID out of valid range.
const TM_1_4_TC_11_X_SCHED_TC_REJECTED         : u8 = 11; ///< Scheduled TC rejected.
const TM_1_4_TC_11_X_INVALID_SCHED_TIME        : u8 = 12; ///< Invalid scheduling time.
const TM_1_4_TC_12_X_PMON_UNDEFINED            : u8 = 13; ///< Param monitor undefined.
const TM_1_4_TC_12_X_PMON_DEFINED              : u8 = 14; ///< Param monitor already defined.
const TM_1_4_TC_12_X_PMON_ENABLED              : u8 = 15; ///< Param monitor already enabled.
const TM_1_4_TC_12_X_INVALID_PMONID            : u8 = 16; ///< Invalid param monitor ID.
const TM_1_4_TC_12_X_INVALID_PMON_DEFINITION   : u8 = 17; ///< Invalid param monitor definition.
const TM_1_4_TC_15_X_INVALID_PACKET_STORE      : u8 = 18; ///< Invalid packet store reference.
const TM_1_4_TC_19_X_EV_ACTION_IS_ENABLED      : u8 = 19; ///< Event action is already enabled.
const TM_1_4_TC_19_1_EV_ACTION_REJECTED        : u8 = 20; ///< Event action rejected.
const TM_1_4_TC_19_X_EV_ACTION_NOT_DEFINED     : u8 = 21; ///< Event action not defined.
const TM_1_4_TC_20_X_INVALID_PID               : u8 = 22; ///< Invalid PID.
const TM_1_4_TC_20_X_PID_READ_ONLY_VIA_TC      : u8 = 23; ///< PID is read-only via TC.
const TM_1_4_ERROR_IN_ACCEPTANCE               : u8 = 24; ///< Error occurred during acceptance.
/// @}


/// @defgroup TM_1_8_ErrorCodes Error Codes for TM[1,8] Packets
/// @{
/// Error codes used to indicate failure reasons in TM[1,8] packets.

const TM_1_8_TM_X_Y_TM_EXCEED_LIMIT_APPDATA    : u8 = 1; ///< Application data exceeded limits.
const TM_1_8_TM_2_1_DEV_COMMAND_EXEC_ERROR     : u8 = 2; ///< Device command execution error.
const TM_1_8_TC_4_1_NOT_FREE_PID_STATS_CONFIG  : u8 = 3; ///< No free PID stats config slots.
const TM_1_8_TC_6_X_MEM_ACCESS_FAIL            : u8 = 4; ///< Memory access failure.
const TM_1_8_TC_11_X_SCHED_TC_POOL_EMPTY       : u8 = 5; ///< Schedule TC pool is empty.
const TM_1_8_TC_19_1_MAX_EV_ACTIONS_REACHED    : u8 = 6; ///< Maximum event actions reached.
/// @}

interface PUSService1Iface {

    /**
    * @brief Sends TM[1,1] packet (TC acceptance report).
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param flags_ack Acknowledgment flags.
    * @param status Output status code.
    */
    procedure notify_tm_1_1(&mut self, tc_packet_id: u16, 
                            tc_packet_seq_ctrl: u16, flags_ack : u8, 
                            status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,2] packet (TC rejection report) with specific error information.
    *
    * @param tc_status Reference to the TC status containing the rejection reason.
    * @param tc_handler Reference to the TC handler containing command information.
    * @param status Output status code.
    */
    procedure send_tm_1_2(&mut self, tc_status : &TCStatus, 
                          tc_handler: &TCHandler, 
                          status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,3] packet (Start of execution report).
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param flags_ack Acknowledgment flags from the TC.
    * @param status Output status code.
    */
    procedure notify_tm_1_3(&mut self, tc_packet_id: u16, 
                            tc_packet_seq_ctrl: u16, flags_ack : u8,
                            status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the TC packet has a too short length.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param tc_bytes Number of bytes in the TC packet.
    * @param status Output status code.
    */
    procedure send_tm_1_4_short_pack_length(&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, tc_bytes: usize, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the number of instructions in the TC is not valid.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param N Number of instructions.
    * @param status Output status code.
    */
    procedure send_tm_1_4_num_of_instr_not_valid(&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, N : u8, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the device address in the TC is not valid.
    *
    * @param p_tm_handler Reference to the TM handler used to build the packet.
    * @param tm_seq_counter TM sequence counter.
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param device_address Invalid device address.
    * @param status Output status code.
    */
    procedure send_tm_1_4_device_address_not_valid(&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, device_address : u32, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the SID in the TC is not valid.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param SID Invalid SID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_SID_not_valid(&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, SID : u16,
                    status : &mut Status<i32>);
    
    
    /**
    * @brief Sends a TM[1,4] packet indicating an invalid memory address.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param mem_id Memory identifier.
    * @param mem_address Invalid memory address.
    * @param status Output status code.
    */
    procedure send_tm_1_4_mem_address_not_valid (&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, mem_id : u8, mem_address : u32, 
                    status : &mut Status<i32>);


    /**
    * @brief Sends a TM[1,4] packet indicating that the specified memory ID is read-only.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param mem_id Read-only memory identifier.
    * @param status Output status code.
    */
    procedure send_tm_1_4_mem_id_read_only (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, mem_id : u8, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the Event ID (EvID) is not valid.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param EvID Invalid Event ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_EvID_not_valid (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, EvID : u16, 
                    status : &mut Status<i32>);
                    
    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PID is not valid.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PID Invalid PID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_PID_not_valid (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, PID : u16, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PMON ID is undefined.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PMONID Undefined PMON ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_PMON_undefined (&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, PMONID : u16, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PMON ID is already defined.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PMONID Already defined PMON ID.
    * @param current_obt Current onboard time.
    * @param status Output status code.
    */
    procedure send_tm_1_4_PMON_defined (&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, PMONID : u16, status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PMON ID is already enabled.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PMONID Enabled PMON ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_PMON_enabled(&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, PMONID : u16, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PMON ID is not valid.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PMONID Enabled PMON ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_PMONID_invalid (&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, PMONID : u16, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PMON ID definition is not valid.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PMONID Enabled PMON ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_PMON_definition_invalid(&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, PMONID : u16,
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified Event-Action ID is enabled.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param event_ID Event-action ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_ev_action_enabled (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, event_ID : u16, 
                    status : &mut Status<i32>);

    /**
    * @brief Builds a TM[1,4] packet indicating that the specified Event-Action ID is rejected.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param event_ID Event-action ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_ev_action_rejected (&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, event_ID : u16,
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified Event-Action ID is undefined.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param event_ID Event-action ID.
    * @param status Output status code.
    */
    procedure send_tm_1_4_ev_action_undefined (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, event_ID : u16,
                    status : &mut Status<i32>); 

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PID statistics is not defined.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PID Param ID
    * @param status Output status code.
    */
    procedure send_tm_1_4_PID_stats_undefined (&mut self, 
                    tc_packet_id : u16, tc_packet_seq_ctrl: u16, 
                    PID : u16, status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,4] packet indicating that the specified PID is read only via TC.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PID Param ID
    * @param status Output status code.
    */
    procedure send_tm_1_4_PID_read_only_via_TC (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, PID : u16, 
                    status : &mut Status<i32>);

    /**
    * @brief Builds a TM[1,4] packet indicating that an error occurred during the acceptance of a TC packet.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param status Output status code.
    */
    procedure send_tm_1_4_error_in_acceptance (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16,
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,7] packet (TC completion report).
    *
    * @param flags_ack Acknowledgment flags from the TC.
    * @param status Output status code.
    * @param enabled Output flag indicating whether the packet was generated.
    */
    procedure notify_tm_1_7(&mut self, tc_packet_id: u16, tc_packet_seq_ctrl: u16, 
                    flags_ack : u8, status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,8] packet indicating that the maximum number of event actions has been reached.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param evID Event ID that caused the error.
    * @param status Output status code.
    */
    procedure send_tm_1_8_max_ev_actions_defined (&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, evID: u16, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,8] packet indicating that the application data exceeds the limit.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param status Output status code.
    */
    procedure send_tm_1_8_tm_exceed_limit_appdata (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16,
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,8] packet indicating that a device command execution error occurred.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param on_off_command On/Off command that caused the error.
    * @param status Output status code.
    */
    procedure send_tm_1_8_device_command_exec_error (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, on_off_command : u32, 
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,8] packet indicating that there are no free PID statistics configuration slots.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param PID PID that caused the error.
    * @param status Output status code.
    */
    procedure send_tm_1_8_not_free_stats_config (&mut self, tc_packet_id : u16, 
                    tc_packet_seq_ctrl: u16, PID : u16,
                    status : &mut Status<i32>);

    /**
    * @brief Sends a TM[1,8] packet indicating a memory access error.
    *
    * @param tc_packet_id TC packet ID.
    * @param tc_packet_seq_ctrl TC packet error control.
    * @param mem_ID Memory identifier that caused the error.
    * @param status Output status code.
    */
    procedure send_tm_1_8_mem_access_error (&mut self, tc_packet_id : u16,
                    tc_packet_seq_ctrl: u16, mem_ID: u8,
                    status : &mut Status<i32>);

};

resource class PUSService1 provides PUSService1Iface {

    tm_channel : access TMChannelIface;   
    tm_handler_pool : access Allocator<TMHandler>;
    tm_counter : access TMCounterIface;
    obt_manager : access OBTManagerIface;

    procedure notify_tm_1_1(&mut self, tc_packet_id: u16, 
                tc_packet_seq_ctrl: u16, flags_ack : u8, 
                status : &mut Status<i32>) {

        *status = Success;

        if (is_tc_ack_accept_enabled(flags_ack)) {

            var tm_handler : Option<box TMHandler> = None;

            self->tm_handler_pool.alloc(&mut tm_handler);

            match tm_handler {

                case Some(b_tm_handler) => {

                    var current_obt : MissionOBT = {
                        seconds = 0,
                        finetime = 0
                    };
                    var tm_count : u16 = 0;

                    self->tm_counter.get_next_tm_count(&mut tm_count);
                    self->obt_manager.get_current_obt(&mut current_obt);

                    startup_tm(&mut b_tm_handler);

                    *status = append_u16_appdata_field(&mut b_tm_handler, tc_packet_id);

                    if (*status is Success){
                        *status = append_u16_appdata_field(&mut b_tm_handler, tc_packet_seq_ctrl);
                    }

                    if (*status is Success){
                        close_tm(&mut b_tm_handler, 1, 1, tm_count, current_obt);
                        self->tm_channel.send_tm(b_tm_handler, status);
                    } else {
                        self->tm_handler_pool.free(b_tm_handler);
                    }

                }

                case None => {
                    *status = Failure(TM_POOL_ALLOC_FAILURE);
                }
            }

        }

        return;
    }


    procedure send_tm_1_2(&mut self, tc_status : &TCStatus, 
                tc_handler: &TCHandler, status : &mut Status<i32>) {

        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var error_code : u8 = 0;

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                startup_tm(&mut b_tm_handler);
                *status = append_u16_appdata_field(&mut b_tm_handler, tc_handler->packet_header.packet_id);

                if (*status is Success) {
                    *status = append_u16_appdata_field(&mut b_tm_handler, tc_handler->packet_error_ctrl);
                }
                
                if (*status is Success) {

                    match (tc_status->error_code) {

                        case CRCError => {

                            error_code = 2;

                            *status = append_u8_appdata_field(&mut b_tm_handler, error_code);
                             
                            var calculated_crc : u16 = cal_crc_16(
                                &(tc_handler->tc_descriptor.tc_bytes),
                                tc_handler->tc_descriptor.tc_num_bytes - 2);

                            if (*status is Success){
                                *status = append_u16_appdata_field(&mut b_tm_handler, tc_handler->packet_error_ctrl);
                            }

                            if (*status is Success){
                                *status = append_u16_appdata_field(&mut b_tm_handler, calculated_crc);
                            }
                            
                        }
                        case APIDError => {

                            error_code = 3;
                            *status = append_u8_appdata_field(&mut b_tm_handler, error_code);
                                
                        }
                        case SourceIDError => {

                            error_code = 4;
                            *status = append_u8_appdata_field(&mut b_tm_handler, error_code);

                            if (*status is Success){
                                *status = append_u16_appdata_field(&mut b_tm_handler, 
                                            tc_handler->df_header.sourceID as u16);
                            }
                            
                        }
                        case TypeError => {

                            error_code = 5;
                            *status = append_u8_appdata_field(&mut b_tm_handler, error_code);

                            if (*status is Success){
                                *status = append_u8_appdata_field(&mut b_tm_handler, tc_handler->df_header.type);
                            }
                            
                        }
                        case SubTypeError => {

                            error_code = 6;
                            *status = append_u8_appdata_field(&mut b_tm_handler, error_code);
                            if (*status is Success){
                                *status = append_u8_appdata_field(&mut b_tm_handler, tc_handler->df_header.subtype);
                            }
                        }
                        case Undefined => {

                            //error
                        }
                    }
                }

                if (*status is Success){
                    close_tm(&mut b_tm_handler, 1, 2, tm_count, current_obt);
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }
            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;
    }


    procedure notify_tm_1_3(&mut self, tc_packet_id: u16, 
                            tc_packet_seq_ctrl: u16, flags_ack : u8,
                            status : &mut Status<i32>) {
        
        *status = Success;

        if (is_tc_ack_start_exec_enabled(flags_ack)) {

            var tm_handler : Option<box TMHandler> = None;

            self->tm_handler_pool.alloc(&mut tm_handler);

            match tm_handler {

                case Some(b_tm_handler) => {

                    var current_obt : MissionOBT = {
                        seconds = 0,
                        finetime = 0
                    };
                    var tm_count : u16 = 0;

                    self->tm_counter.get_next_tm_count(&mut tm_count);
                    self->obt_manager.get_current_obt(&mut current_obt);

                    startup_tm(&mut b_tm_handler);
                    *status = append_u16_appdata_field(&mut b_tm_handler, tc_packet_id);

                    if (*status is Success){
                        *status = append_u16_appdata_field(&mut b_tm_handler, tc_packet_seq_ctrl);
                    }

                    if (*status is Success){
                        close_tm(&mut b_tm_handler, 1, 3, tm_count, current_obt);
                        self->tm_channel.send_tm(b_tm_handler, status);
                    } else {
                        self->tm_handler_pool.free(b_tm_handler);
                    }

                }

                case None => {
                    *status = Failure(TM_POOL_ALLOC_FAILURE);
                }
            }

        }

        return;
    }


    procedure send_tm_1_4_short_pack_length(&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, tc_bytes: usize, 
                status : &mut Status<i32>) {

        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                var failure_data : u16 = tc_bytes as u16;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, 
                                tm_count, tc_packet_id, 
                                tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_X_Y_TC_SHORT_PACK_LENGTH, failure_data, current_obt);    

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_num_of_instr_not_valid(&mut self, tc_packet_id : u16,
            tc_packet_seq_ctrl: u16, N : u8, status : &mut Status<i32>) {

        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u8_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_X_Y_TC_NOT_VALID_NUM_OF_INSTR, N, current_obt);    

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }
            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_device_address_not_valid(&mut self, tc_packet_id : u16,
                tc_packet_seq_ctrl: u16, device_address : u32, status : &mut Status<i32>) {

        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);
        
                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u32_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_2_X_DEVICE_ADDRESS_NOT_VALID, device_address, 
                                current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_SID_not_valid(&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, SID : u16, status : &mut Status<i32>) {
     
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
            
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_3_X_INVALID_SID, SID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }
            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_mem_address_not_valid (&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, mem_id : u8, mem_address : u32, 
                status : &mut Status<i32>) {

        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
            
                *status = build_tm_1_X_u8_u32_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_6_X_INVALID_MEMORY_ADDRESS, mem_id, mem_address, 
                                current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_mem_id_read_only (&mut self, tc_packet_id : u16,
                tc_packet_seq_ctrl: u16, mem_id : u8,
                status : &mut Status<i32>) {
     
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
            
                *status = build_tm_1_X_u8_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_6_X_MEMORY_ID_READ_ONLY, mem_id, 
                                current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_EvID_not_valid (&mut self, tc_packet_id : u16,
                tc_packet_seq_ctrl: u16, EvID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_5_X_INVALID_EV_ID, EvID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;


    }


    procedure send_tm_1_4_PID_not_valid (&mut self, tc_packet_id : u16,
                tc_packet_seq_ctrl: u16, PID : u16, status : &mut Status<i32>) {

        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);
        
                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_20_X_INVALID_PID, PID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_PMON_undefined (&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, PMONID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_12_X_PMON_UNDEFINED, PMONID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_PMON_defined (&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, PMONID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;

                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_12_X_PMON_DEFINED, PMONID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_PMON_enabled (&mut self, tc_packet_id : u16, 
            tc_packet_seq_ctrl: u16, PMONID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_12_X_PMON_ENABLED, PMONID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_PMONID_invalid (&mut self, tc_packet_id : u16, 
            tc_packet_seq_ctrl: u16, PMONID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_12_X_INVALID_PMONID, PMONID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }

    procedure send_tm_1_4_PMON_definition_invalid(&mut self, tc_packet_id : u16,
            tc_packet_seq_ctrl: u16, PMONID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_12_X_INVALID_PMON_DEFINITION, PMONID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_ev_action_enabled (&mut self, tc_packet_id : u16,
            tc_packet_seq_ctrl: u16, event_ID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;

                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count,
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_19_X_EV_ACTION_IS_ENABLED, event_ID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_ev_action_rejected (&mut self, tc_packet_id : u16, 
            tc_packet_seq_ctrl: u16, event_ID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_19_1_EV_ACTION_REJECTED, event_ID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }



    procedure send_tm_1_4_ev_action_undefined (&mut self, tc_packet_id : u16,
            tc_packet_seq_ctrl: u16, event_ID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_19_X_EV_ACTION_NOT_DEFINED, event_ID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_PID_stats_undefined (&mut self, tc_packet_id : u16, 
            tc_packet_seq_ctrl: u16, PID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;

                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count,
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_4_7_PID_STATS_UNDEFINED, PID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_PID_read_only_via_TC (&mut self, tc_packet_id : u16,
            tc_packet_seq_ctrl: u16, PID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count,
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_TC_20_X_PID_READ_ONLY_VIA_TC, PID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure send_tm_1_4_error_in_acceptance (&mut self, tc_packet_id : u16,
                tc_packet_seq_ctrl: u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
                
                *status = build_tm_1_X_no_failure_data(&mut b_tm_handler, tm_count,
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_4_ERROR_IN_ACCEPTANCE, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }


    procedure notify_tm_1_7(&mut self, tc_packet_id: u16, 
                tc_packet_seq_ctrl: u16, flags_ack : u8, 
                status : &mut Status<i32>) {

        *status = Success;

        if (is_tc_ack_completion_exec_enabled(flags_ack)) {

            var tm_handler : Option<box TMHandler> = None;

            self->tm_handler_pool.alloc(&mut tm_handler);

            match tm_handler {

                case Some(b_tm_handler) => {

                    var current_obt : MissionOBT = {
                        seconds = 0,
                        finetime = 0
                    };
                    var tm_count : u16 = 0;

                    self->tm_counter.get_next_tm_count(&mut tm_count);
                    self->obt_manager.get_current_obt(&mut current_obt);

                    startup_tm(&mut b_tm_handler);
                    *status = append_u16_appdata_field(&mut b_tm_handler, tc_packet_id);

                    if (*status is Success) {
                        *status = append_u16_appdata_field(&mut b_tm_handler, tc_packet_seq_ctrl);
                    }

                    if (*status is Success) {
                        close_tm(&mut b_tm_handler, 1, 7, tm_count, current_obt);    
                        self->tm_channel.send_tm(b_tm_handler, status);
                    } else {
                        self->tm_handler_pool.free(b_tm_handler);
                    }

                }

                case None => {
                    *status = Failure(TM_POOL_ALLOC_FAILURE);
                }
            }

        }

        return;
    }


    procedure send_tm_1_8_max_ev_actions_defined (&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, evID: u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_8_TC_19_1_MAX_EV_ACTIONS_REACHED, evID, 
                                current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }
        
        return;

    }



    procedure send_tm_1_8_tm_exceed_limit_appdata (&mut self, tc_packet_id : u16,
            tc_packet_seq_ctrl: u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
                
                *status = build_tm_1_X_no_failure_data(&mut b_tm_handler, tm_count, 
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_8_TM_X_Y_TM_EXCEED_LIMIT_APPDATA, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }

        return;

    }


    procedure send_tm_1_8_device_command_exec_error (&mut self, tc_packet_id : u16,
                tc_packet_seq_ctrl: u16, on_off_command : u32, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
                
                *status = build_tm_1_X_u32_failure_data(&mut b_tm_handler, tm_count,
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_8_TM_2_1_DEV_COMMAND_EXEC_ERROR, 
                                on_off_command, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }

        return;

    }


    procedure send_tm_1_8_not_free_stats_config (&mut self, tc_packet_id : u16, 
                tc_packet_seq_ctrl: u16, PID : u16, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
                
                *status = build_tm_1_X_u16_failure_data(&mut b_tm_handler, tm_count,
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_8_TC_4_1_NOT_FREE_PID_STATS_CONFIG, PID,
                                current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }

        return;

    }


    procedure send_tm_1_8_mem_access_error (&mut self, tc_packet_id : u16,
            tc_packet_seq_ctrl: u16, mem_ID: u8, status : &mut Status<i32>) {
        
        *status = Success;
         
        var tm_handler : Option<box TMHandler> = None;

        self->tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {
                    seconds = 0,
                    finetime = 0
                };
                var tm_count : u16 = 0;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);

                var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
                
                *status = build_tm_1_X_u8_failure_data(&mut b_tm_handler, tm_count,
                                tc_packet_id, tc_packet_seq_ctrl, verify_stage,
                                TM_1_8_TC_6_X_MEM_ACCESS_FAIL, mem_ID, current_obt);

                if (*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->tm_handler_pool.free(b_tm_handler);
                }

            }

            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }

        }

        return;

    }


};

