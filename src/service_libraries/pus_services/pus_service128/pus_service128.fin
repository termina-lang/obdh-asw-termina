/*
PUS SERVICE 128 : PRIVATE SERVICE, REEBOT
*/

import service_libraries.pus_services.pus_service128.pus_service128_help;

interface PUSS128Iface {
	procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>, reebot_flag : &mut bool);
};

resource class PUSService128 provides PUSS128Iface {

	exec_tc_req_status : PSExecTCReqStatus;
    exec_tc_req_status_update : PS128ExecTCReqStatusUpdate;


	tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

	pus_service_9 : access PUSS9Iface;


	method exec128_1TC(&priv self) -> Status<i32> {

		var status : Status<i32> = Success;
        var ack_enabled : bool = false;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler1 : Option<box TMHandlerT> = None;
		self->a_tm_handler_pool.alloc(&mut tm_handler1);

		match tm_handler1 {

			case Some(b_tm_handler1) => {

				var tm_count1 : u16 = 0 : u16;
				self->tm_counter.get_next_tm_count(&mut tm_count1);
				self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_3(&mut b_tm_handler1, tm_count1, self->exec_tc_req_status_update.flags_ack, current_obt, &mut status, &mut ack_enabled);

                if (ack_enabled) {

                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler1, &mut status);


                    }
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler1);
            
                    }

                } else {
                    
                    self->a_tm_handler_pool.free(b_tm_handler1);
                }
				
			} 
			case None => {

				status = Failure(TM_POOL_ALLOC_FAILURE);
				
			}
			
		}

        self->exec_tc_req_status_update.reebot_flag = true;

		
        if (status is Success){

            var tm_handler2 : Option<box TMHandlerT> = None;
		    self->a_tm_handler_pool.alloc(&mut tm_handler2);

            match tm_handler2 {

                case Some(b_tm_handler2) => {

                    var tm_count2 : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count2);
                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_7(&mut b_tm_handler2, tm_count2, self->exec_tc_req_status_update.flags_ack, current_obt, &mut status, &mut ack_enabled);
                    
                    if (ack_enabled) {

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler2, &mut status);

                        }
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler2);
                        
                        }

                    } else {
                        
                        self->a_tm_handler_pool.free(b_tm_handler2);
                       
                    }
                } 
                case None => {

                    status = Failure(TM_POOL_ALLOC_FAILURE);
                    
                }
			
		    }

        }

    
        return status;
       
		
	}




	procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>, reebot_flag : &mut bool) {

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status is PSExecTCReqStatus::Exit == false) {

            match self->exec_tc_req_status {

				case Init => {
					
                    self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.packet_error_ctrl = tc_handler->packet_error_ctrl;
                    self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;

                    self->exec_tc_req_status = PSExecTCReqStatus::ExecTC;
                        
            
				}

                case ExecTC => {

                     self->exec_tc_req_status = PSExecTCReqStatus::Exit;

                    if (subtype == 1) {

                        status = self->exec128_1TC();

                    } else {

                        status = Failure(ACCEPTANCE_ERROR);
                    }
                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }


        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

               if (error_code == ACCEPTANCE_ERROR || error_code == BUILD_TM_ERROR) {

                    *action_status = Success;

                    var tm_handler : Option<box TMHandlerT> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                            var tm_count : u16 = 0 : u16;
                            var current_obt : MissionObt = {seconds = 0, finetime = 0};
                            
                            self->tm_counter.get_next_tm_count(&mut tm_count);
                            self->pus_service_9.get_current_obt(&mut current_obt);

                            if (error_code == ACCEPTANCE_ERROR) {

                                build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut status);

                            } else if (error_code == BUILD_TM_ERROR) {

                                build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                            current_obt, &mut status);

                            } else {
                              

                            }

                            
                            
                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                                
                            }
                            
                        }
                        case None => {
                            status = Failure(TM_POOL_ALLOC_FAILURE);
                        }
                    }
                    
                } else {

                    *action_status = Failure(error_code);
                    
                }   
                
            }  
        }

        self->exec_tc_req_status = PSExecTCReqStatus::Init;

        *reebot_flag = self->exec_tc_req_status_update.reebot_flag;

        
        return;
    
    }

};
