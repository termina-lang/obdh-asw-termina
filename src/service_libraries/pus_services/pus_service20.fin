import service_libraries.pus_services.pus_service1.pus_service1;
import service_libraries.serialize;
import service_libraries.tc_ccsds_pus_format;
import service_libraries.tm_ccsds_pus_format;
import resources.system_data_pool;


interface PUSS20Iface {
    procedure exec20_1TC(&mut self, tc_descriptor : &TCDescriptorT, result : &mut Result);
    procedure exec20_3TC(&mut self, tc_descriptor : &TCDescriptorT, result : &mut Result);
};

resource class PUSService20 provides PUSS20Iface {

    system_data_pool : access AtomicArrayAccess<u16; sdp_num_params>;
    tm_channel: access TMChannelIface;   
    a_tm_descriptor_pool : access Allocator<TMDescriptorT>;
    tm_counter : access TMCounterIface;

    viewer build_tm_20_2(&self, PID: usize, p_tm_descriptor : &mut TMDescriptorT, tm_seq_counter : u16){

        var tm_packet_header : CCSDSPUSTMPacketHeaderT =
	                                     {packet_id = 0 : u16,
	                                      packet_seq_ctrl = 0 : u16,
	                                      packet_length = 0 : u16};
        var df_header : CCSDSPUSTMDFHeaderT =
                                            {version = 0 : u8,
                                            type = 0 : u8,
                                            subtype = 0 : u8,
                                            destinationID = 0 : u8};

        tm_packet_header.packet_id = ccsds_pus_tm_build_packet_id(0x32C : u16);

        tm_packet_header.packet_seq_ctrl = ccsds_pus_tm_build_packet_seq_ctrl(0x3 : u16, tm_seq_counter);
            

        tm_packet_header.packet_length = 7;

        df_header.version = ccsds_pus_tm_build_df_header_version(0x1 : u8);
        df_header.type = 20 : u8;
        df_header.subtype = 2;
        df_header.destinationID = 0x78 : u8;


        ccsds_pus_tm_set_fields(&mut p_tm_descriptor->tm_bytes[0 : usize .. 10 : usize], &tm_packet_header, &df_header);

        serialize_uint16(PID as u16, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
        var param_value : u16 = 0;
        self->system_data_pool.load_index(PID, &mut param_value);
        serialize_uint16(param_value, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);
            
        // Calculate p_tm_descriptor->tm_num_bytes
        p_tm_descriptor->tm_num_bytes = (tm_packet_header.packet_length + 7) as usize;

        return;

    }



    procedure exec20_1TC(&mut self, tc_descriptor : &TCDescriptorT, result: &mut Result){ 

        var tm_descriptor : Option<box TMDescriptorT> = None;
        self->a_tm_descriptor_pool.alloc(&mut tm_descriptor);

        match tm_descriptor {

            case Some(descriptor) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);


                var PID : usize = deserialize_uint16(&(tc_descriptor->tc_bytes[10..12])) as usize;

                if (PID < sdp_num_params){

                    var tm_descriptor1 : Option<box TMDescriptorT> = None;
                    self->a_tm_descriptor_pool.alloc(&mut tm_descriptor1);

                    match tm_descriptor1 {

                        case Some(descriptor1) => {

                        var tm_count1 : u16 = 0 : u16;
                        self->tm_counter.get_next_tm_count(&mut tm_count1);
                        self->build_tm_20_2(PID, &mut descriptor1, tm_count1);
                        self->tm_channel.send_tm(descriptor1, result);

                        }
                        case None => {
                            //Error
                        }
                    }

                    
                    build_tm_1_7(&mut descriptor, tm_count, tc_descriptor);
                        
                } else {

                    build_tm_1_8_tc_20_X_PIDnotvalid(&mut descriptor, tm_count, PID as u16, tc_descriptor);
                    
                }
                self->tm_channel.send_tm(descriptor, result);
            }
            case None => {
                //Error
                *result = Result::Error;
            }
        }


        return;
    }


    procedure exec20_3TC(&mut self, tc_descriptor : &TCDescriptorT, result: &mut Result){

        var tm_descriptor : Option<box TMDescriptorT> = None;
        self->a_tm_descriptor_pool.alloc(&mut tm_descriptor);

        match tm_descriptor {

            case Some(descriptor) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                var PID : usize = deserialize_uint16(&(tc_descriptor->tc_bytes[10..12])) as usize;
                var param_value : u16 = deserialize_uint16(&(tc_descriptor->tc_bytes[12..14]));

                
                if (PID < sdp_num_params){

                    self->system_data_pool.store_index(PID,param_value);
                    build_tm_1_7(&mut descriptor, tm_count, tc_descriptor);

                } else {

                    build_tm_1_8_tc_20_X_PIDnotvalid(&mut descriptor, tm_count, PID as u16, tc_descriptor);

                }
                self->tm_channel.send_tm(descriptor, result);
            }
            case None => {
                //Error
                *result = Result::Error;
            }
        }

        return;
    }

};