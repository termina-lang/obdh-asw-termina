/*
PUS SERVICE 20 : PARAMETER MANAGEMENT
*/

import service_libraries.pus_services.pus_service20.types;

interface PUSS20Iface {
    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>);
};

resource class PUSService20 provides PUSS20Iface {

    exec_tc_req_status_update : PS20ExecTCReqStatusUpdate;

    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;

    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandler>;
    tm_counter : access TMCounterIface;

    obt_manager : access OBTManagerIface;

    pus_service_1 : access PUSService1Iface;

    method exec20_1TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.N,
                        &mut status);

        } else if (sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID) == false) {

            self->pus_service_1.send_tm_1_4_PID_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.PID,
                        &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.flags_ack,
                    &mut status);

            var tm_handler : Option<box TMHandler> = None;
            self->a_tm_handler_pool.alloc(&mut tm_handler);

            match tm_handler {

                case Some(b_tm_handler) => {

                    var current_obt : MissionOBT = {seconds = 0, finetime = 0};
                    var tm_count : u16 = 0 : u16;

                    self->tm_counter.get_next_tm_count(&mut tm_count);
                    
                    startup_tm(&mut b_tm_handler);

                    status = append_u8_appdata_field(&mut b_tm_handler, 1);

                    if (status is Success){
                        status = append_u16_appdata_field(&mut b_tm_handler, (self->exec_tc_req_status_update.PID) as u16);
                    }
                    
                    if (status is Success){
                        var item_type : DataPoolItemType = sys_data_pool_get_item_type((self->exec_tc_req_status_update.PID));

                        match item_type {
                            case u8_t => {
                                var u8_SDP_value : u8 = 0;
                                self->system_data_pool_u8.load_index(((self->exec_tc_req_status_update.PID)) as usize, &mut u8_SDP_value);
                                status = append_u8_appdata_field(&mut b_tm_handler, u8_SDP_value);
                            }
                            case u32_t => {
                                var u32_SDP_value : u32 = 0;
                                self->system_data_pool_u32.load_index(((self->exec_tc_req_status_update.PID)) as usize, &mut u32_SDP_value);
                                status = append_u32_appdata_field(&mut b_tm_handler, u32_SDP_value);
                            }
                            case NoValidPID => {
                                status = Failure(INVALID_PID_ERROR);
                            }
                        }
                    }

                    self->obt_manager.get_current_obt(&mut current_obt);

                    if (status is Success){
                        close_tm(&mut b_tm_handler, 20, 2, tm_count, current_obt);
                        self->tm_channel.send_tm(b_tm_handler, &mut status);
                    } else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                    }
                
                }
                case None => {

                    status = Failure(TM_POOL_ALLOC_FAILURE);
                    
                }
            }

            self->pus_service_1.notify_tm_1_7(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.flags_ack,
                    &mut status);

        }
                
        return status;
    }



    method exec20_3TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.N,
                        &mut status);

        } else if (sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID) == false) {

            self->pus_service_1.send_tm_1_4_PID_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.PID,
                        &mut status);

        } else if (sys_data_pool_is_PID_update_via_TC_enabled(self->exec_tc_req_status_update.PID) == false) {
            
            self->pus_service_1.send_tm_1_4_PID_read_only_via_TC(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.PID,
                        &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack, 
                        &mut status);

            if (status is Success) {

                var item_type : DataPoolItemType = sys_data_pool_get_item_type(self->exec_tc_req_status_update.PID);

                match item_type {
                    case u8_t => {
                        self->system_data_pool_u8.store_index(((self->exec_tc_req_status_update.PID as usize) - sdp_first_u8_param_id), self->exec_tc_req_status_update.tc_20_3_data.PID_value_u8);
                    }
                    case u32_t => {
                        self->system_data_pool_u32.store_index(((self->exec_tc_req_status_update.PID as usize) - sdp_first_u32_param_id), self->exec_tc_req_status_update.tc_20_3_data.PID_value_u32);
                    }
                    case NoValidPID => {
                        status = Failure(INVALID_PID_ERROR);
                    }
                }

            }

            if (status is Success) {

                self->pus_service_1.notify_tm_1_7(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.flags_ack,
                            &mut status);

            }

        } 

        return status;

    }

    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>) {

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
        self->exec_tc_req_status_update.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
        self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
        self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;

        status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));

        if (status is Success) {
            status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.PID));
        }

        if ((status is Success) && subtype == 3) {

            var item_type : DataPoolItemType = sys_data_pool_get_item_type(self->exec_tc_req_status_update.PID);

            match item_type {
                case u8_t => {
                    status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_20_3_data.PID_value_u8));
                }
                case u32_t => {
                    status = tc_handler_get_u32_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_20_3_data.PID_value_u32));
                }
                case NoValidPID => {
                    status = Failure(INVALID_PID_ERROR);
                }
            }

        }

        if (status is Success) {

            if (subtype == 1) {

                status = self->exec20_1TC();

            } else if (subtype == 3) {

                status = self->exec20_3TC();

            } else {

                status = Failure(ACCEPTANCE_ERROR);
                
            }

        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    self->pus_service_1.send_tm_1_4_error_in_acceptance(
                                self->exec_tc_req_status_update.packet_id,
                                self->exec_tc_req_status_update.packet_seq_ctrl,
                                action_status);

                } else if (error_code == BUILD_TM_ERROR) {

                    self->pus_service_1.send_tm_1_8_tm_exceed_limit_appdata(
                                self->exec_tc_req_status_update.packet_id,
                                self->exec_tc_req_status_update.packet_seq_ctrl,
                                action_status);

                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->pus_service_1.send_tm_1_4_short_pack_length(
                                self->exec_tc_req_status_update.packet_id,
                                self->exec_tc_req_status_update.packet_seq_ctrl,
                                self->exec_tc_req_status_update.tc_num_bytes,
                                action_status);

                } else if (error_code == INVALID_PID_ERROR) {

                    self->pus_service_1.send_tm_1_4_PID_not_valid(
                                self->exec_tc_req_status_update.packet_id,
                                self->exec_tc_req_status_update.packet_seq_ctrl,
                                self->exec_tc_req_status_update.PID,
                                action_status);

                } else {
                    *action_status = Failure(error_code);
                }
                
            }  
        }

        return;
    
    }

};