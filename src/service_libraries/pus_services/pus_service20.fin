import service_libraries.pus_services.pus_service1.pus_service1;
import service_libraries.serialize;
import service_libraries.tc_ccsds_pus_format;
import service_libraries.tm_ccsds_pus_format;
import resources.system_data_pool;


interface PUSS20Iface {
    procedure exec20_1TC(&mut self, tc_descriptor : &TCHandlerT, result : &mut Result);
    procedure exec20_3TC(&mut self, tc_descriptor : &TCHandlerT, result : &mut Result);
};

resource class PUSService20 provides PUSS20Iface {

    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;

    tm_channel: access TMChannelIface;   
    a_tm_descriptor_pool : access Allocator<TMDescriptorT>;
    tm_counter : access TMCounterIface;


    viewer build_tm_20_2(&self, PID: u16, p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, result : &mut Result){

        startup_tm(p_tm_handler);

        append_u8_appdata_field(p_tm_handler, 1, result);
        append_u16_appdata_field(p_tm_handler, PID as u16, result);

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

        match item_type {
            case u8_t => {
                self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                append_u8_appdata_field(p_tm_handler, u8_SDP_value, result);
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                append_u32_appdata_field(p_tm_handler, u32_SDP_value, result);
            }
            case NoValidPID => {
                *result = Result::Error;
            }
        }

        close_tm(p_tm_handler, 20, 2, tm_seq_counter, result);

        return;

    }



    procedure exec20_1TC(&mut self, tc_descriptor : &mut TCHandlerT, result: &mut Result){ 

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);
        var succesful_execution : bool = false;

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                var N : u8 = 0;
                var PID : u16 = 0;

                *result = tc_handler_get_u8_appdata_field(tc_handler, &mut N);
                *result = tc_handler_get_u16_appdata_field(tc_handler, &mut PID);

                if (*result is Result::Error){

                    build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, &(*tc_handler), result);
                } 
                else {

                    if (N != 1) {

                        build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, &(*tc_handler), N, result);
                    }
                    else {

                        if (sys_data_pool_is_valid_PID(PID)){

                            build_tm_1_3(&mut b_tm_handler, tm_count, &(*tc_handler), PID, result);

                            var tm_descriptor1 : Option<box TMDescriptorT> = None;
                            self->a_tm_descriptor_pool.alloc(&mut tm_descriptor1);

                            match tm_descriptor1 {

                                case Some(descriptor1) => {

                                var tm_count1 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count1);
                                self->build_tm_20_2(PID, &mut descriptor1, tm_count1, result);
                                self->tm_channel.send_tm(descriptor1, result);

                                }
                                case None => {
                                    //Error
                                }
                            }

                            
                            succesful_execution = true;
                                
                        } else {

                            build_tm_1_4_PID_not_valid(&mut b_tm_handler, tm_count, &(*tc_handler), PID as u16, result);
                            
                        }
                        self->tm_channel.send_tm(descriptor, result);
                    }
                }
            }
            case None => {
                //Error
                *result = Result::Error;
            }
        }

        if (succesful_execution){

            match tm_handler2 {

                case Some(b_tm_handler2) => {

                    var tm_count2 : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count2);
                    build_tm_1_7(&mut b_tm_handler2, tm_count2, &(*tc_handler), result);
                    self->tm_channel.send_tm(b_tm_handler2, result);
                }
                case None => {
                    *result = Result::Error;
                }
            }

        }

        return;
    }



    procedure exec20_3TC(&mut self, tc_handler : &mut TCHandlerT, result: &mut Result){


        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);
        var succesful_execution : bool = false;

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                var N : u8 = 0;
                var PID : u16 = 0;

                *result = tc_handler_get_u8_appdata_field(tc_handler, &mut N);
                *result = tc_handler_get_u16_appdata_field(tc_handler, &mut PID);

                if (*result is Result::Error){

                    build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, &(*tc_handler), result);
                } 
                else {

                    if (N != 1) {

                        build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, &(*tc_handler), N, result);
                    }
                    else {

                        if (sys_data_pool_is_valid_PID(PID)){

                            if(sys_data_pool_is_PID_update_via_TC_enabled(PID)){

                                build_tm_1_3(&mut b_tm_handler, tm_count, &(*tc_handler), PID, result);

                                var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

                                match item_type {
                                    case u8_t => {
                                        var param_value : u8 = 0;
                                        *result = tc_handler_get_u8_appdata_field(tc_handler, &mut param_value);
                                        self->system_data_pool_u8.store_index(PID,param_value);
                                        succesful_execution = true;

                                    }
                                    case u32_t => {
                                        var param_value : u32 = 0;
                                        *result = tc_handler_get_u32_appdata_field(tc_handler, &mut param_value);
                                        self->system_data_pool_32.store_index(PID,param_value);
                                        succesful_execution = true;
                                    }
                                    case NoValidPID => {
                                        *result = Result::Error;
                                    }
                                }

                            }
                            else {
                                build_tm_1_4_PID_read_only_via_TC (&mut b_tm_handler, tm_count, &(*tc_handler), PID, result);
                            }
                        }
                        else {
                            build_tm_1_4_PID_not_valid(&mut b_tm_handler, tm_count, &(*tc_handler), PID as u16, result);
                        }
                    }
                }
            }
            case None => {
                //Error
                *result = Result::Error;
            }
        }

        if (succesful_execution){

            match tm_handler2 {

                case Some(b_tm_handler2) => {

                    var tm_count2 : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count2);
                    build_tm_1_7(&mut b_tm_handler2, tm_count2, &(*tc_handler), result);
                    self->tm_channel.send_tm(b_tm_handler2, result);
                }
                case None => {
                    *result = Result::Error;
                }
            }

        }

        

        return;
    }

};