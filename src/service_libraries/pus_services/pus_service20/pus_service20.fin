/*
PUS SERVICE 20 : PARAMETER MANAGEMENT
*/

import service_libraries.pus_services.pus_service20.pus_service20_help;

interface PUSS20Iface {
    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);
};

resource class PUSService20 provides PUSS20Iface {

    exec_tc_req_status : PSExecTCReqStatus;
    exec_tc_req_status_update : PS20ExecTCReqStatusUpdate;

    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;

    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

    pus_service_9 : access PUSS9Iface;



    method exec20_1TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;
        var ack_enabled : bool = false;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                 self->exec_tc_req_status_update.N, current_obt);

                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
            
                    }
                    
                }
                else {

                    if (sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID)){

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                        if (ack_enabled) {

                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            }
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                                
                            }

                        } else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }

                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                
                                startup_tm(&mut b_tm_handler2);

                                status = append_u8_appdata_field(&mut b_tm_handler2, 1);

                                if (status is Success){
                                    status = append_u16_appdata_field(&mut b_tm_handler2, (self->exec_tc_req_status_update.PID) as u16);
                                }
                                
                                if (status is Success){
                                    var item_type : DataPoolItemType = sys_data_pool_get_item_type((self->exec_tc_req_status_update.PID));

                                    match item_type {
                                        case u8_t => {
                                            var u8_SDP_value : u8 = 0;
                                            self->system_data_pool_u8.load_index(((self->exec_tc_req_status_update.PID)) as usize, &mut u8_SDP_value);
                                            status = append_u8_appdata_field(&mut b_tm_handler2, u8_SDP_value);
                                        }
                                        case u32_t => {
                                            var u32_SDP_value : u32 = 0;
                                            self->system_data_pool_u32.load_index(((self->exec_tc_req_status_update.PID)) as usize, &mut u32_SDP_value);
                                            status = append_u32_appdata_field(&mut b_tm_handler2, u32_SDP_value);
                                        }
                                        case NoValidPID => {
                                            status = Failure(INVALID_PID_ERROR);
                                        }
                                    }
                                }

                                self->pus_service_9.get_current_obt(&mut current_obt);

                                if (status is Success){

                                    close_tm(&mut b_tm_handler, 20, 2, tm_count, current_obt);
                                    self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                } 
                                else {
                                    self->a_tm_handler_pool.free(b_tm_handler2);
                                
                                }
                            
                            }
                            case None => {

                                status = Failure(TM_POOL_ALLOC_FAILURE);
                                
                            }
                        }

                        var tm_handler3 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler3);

                        match tm_handler3 {

                            case Some(b_tm_handler3) => {

                                var tm_count3 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count3);
                                self->pus_service_9.get_current_obt(&mut current_obt);
                                status = build_tm_1_7(&mut b_tm_handler3, tm_count3, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                                if (ack_enabled) {

                                    if (status is Success){

                                        self->tm_channel.send_tm(b_tm_handler3, &mut status);

                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler3);
                                    
                                    }

                                } else {
                                    self->a_tm_handler_pool.free(b_tm_handler3);
                                }
                                
                            }
                            case None => {
                                status = Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                            
                    } else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_PID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                     self->exec_tc_req_status_update.PID, current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                          
                        }
                          
                    }
                }
                
            }
            case None => {
                status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }


        return status;
    }



    method exec20_3TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;
        var ack_enabled : bool = false;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                             self->exec_tc_req_status_update.N, current_obt);

                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                    
                    }
                    
                }
                else {

                    if (sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID)){

                        if(sys_data_pool_is_PID_update_via_TC_enabled(self->exec_tc_req_status_update.PID)){

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                            if (ack_enabled) {

                                if (status is Success){

                                    self->tm_channel.send_tm(b_tm_handler, &mut status);

                                }
                                else {
                                    self->a_tm_handler_pool.free(b_tm_handler);
                               
                                }

                            } else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }
                            

                            var item_type : DataPoolItemType = sys_data_pool_get_item_type(self->exec_tc_req_status_update.PID);

                            var succesful_execution : bool = false;

                            match item_type {
                                case u8_t => {
                                    
                                    self->system_data_pool_u8.store_index(((self->exec_tc_req_status_update.PID as usize) - sdp_first_u8_param_id), self->exec_tc_req_status_update.tc_20_3_data.PID_value_u8);
                                    succesful_execution = true;
                                }
                                case u32_t => {

                                    self->system_data_pool_u32.store_index(((self->exec_tc_req_status_update.PID as usize) - sdp_first_u32_param_id), self->exec_tc_req_status_update.tc_20_3_data.PID_value_u32);
                                    succesful_execution = true;
                                }
                                case NoValidPID => {
                                    status = Failure(INVALID_PID_ERROR);
                                }
                            }

                            if (succesful_execution){

                                var tm_handler2 : Option<box TMHandlerT> = None;
                                self->a_tm_handler_pool.alloc(&mut tm_handler2);

                                match tm_handler2 {

                                    case Some(b_tm_handler2) => {

                                        var tm_count2 : u16 = 0 : u16;
                                        self->tm_counter.get_next_tm_count(&mut tm_count2);
                                        self->pus_service_9.get_current_obt(&mut current_obt);
                                        status = build_tm_1_7(&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                                        if (ack_enabled) {

                                            if (status is Success){

                                                self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                            }
                                            else {
                                                self->a_tm_handler_pool.free(b_tm_handler2);
                                            
                                            }

                                        } else {
                                            self->a_tm_handler_pool.free(b_tm_handler2);
                                        }
                                        
                                    }
                                    case None => {
                                        status = Failure(TM_POOL_ALLOC_FAILURE);
                                    }
                                }
                            }


                        }
                        else {

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            status = build_tm_1_4_PID_read_only_via_TC (&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                             self->exec_tc_req_status_update.PID, current_obt);

                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            
                            }
                            
                        }
                    }
                    else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_PID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                     self->exec_tc_req_status_update.PID, current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                
                        }
                    }
                }
            
            }
            case None => {
                
                status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return status;

    }



    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>) {

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status is PSExecTCReqStatus::Exit == false) {

            match self->exec_tc_req_status {

                case Init => {

                    self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
                    self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
                    self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
                    status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));
                    if (status is Success){
                        status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.PID));
                    }

                    if (subtype == 3 && (status is Success)) {

                        var item_type : DataPoolItemType = sys_data_pool_get_item_type(self->exec_tc_req_status_update.PID);

                        match item_type {
                            case u8_t => {
                                status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_20_3_data.PID_value_u8));
                            }
                            case u32_t => {
                                status = tc_handler_get_u32_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_20_3_data.PID_value_u32));
                            }
                            case NoValidPID => {
                                status = Failure(INVALID_PID_ERROR);
                            }
                        }
                    }

                    if (status is Success) {

                        self->exec_tc_req_status = PSExecTCReqStatus::ExecTC;
                        
                    } else {

                        self->exec_tc_req_status = PSExecTCReqStatus::Exit;
                        
                    }
                }
                case ExecTC => {

                    self->exec_tc_req_status = PSExecTCReqStatus::Exit;

                    if (subtype == 1) {

                        status = self->exec20_1TC();

                    } else if (subtype == 3) {

                        status = self->exec20_3TC();

                    } else {

                        status = Failure(ACCEPTANCE_ERROR);
                        
                    }
                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR || error_code == BUILD_TM_ERROR || error_code == TC_DATA_OUT_OF_RANGE_ERROR || error_code == INVALID_PID_ERROR) {

                    *action_status = Success;
                    
                    var tm_handler : Option<box TMHandlerT> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                            var tm_count : u16 = 0 : u16;
                            var current_obt : MissionObt = {seconds = 0, finetime = 0};
                            
                            self->tm_counter.get_next_tm_count(&mut tm_count);
                            self->pus_service_9.get_current_obt(&mut current_obt);

                            if (error_code == ACCEPTANCE_ERROR) {

                                status = build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                 current_obt);

                            } else if (error_code == BUILD_TM_ERROR) {

                                status = build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                            current_obt);

                            } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                                status = build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                    (self->exec_tc_req_status_update.tc_num_bytes), current_obt);

                            } else if (error_code == INVALID_PID_ERROR) {
                                status = build_tm_1_4_PID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                 self->exec_tc_req_status_update.PID, current_obt);

                            } else {
                              

                            }

                            
                            
                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                                
                            }
                            
                        }
                        case None => {
                            status = Failure(TM_POOL_ALLOC_FAILURE);
                        }
                    }

                    
                } else {
                    
                    *action_status = Failure(error_code);
                }
                
            }  
        }

        self->exec_tc_req_status = PSExecTCReqStatus::Init;
        
        return;
    
    }

};