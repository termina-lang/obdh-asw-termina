/*
PUS SERVICE 17 : TEST
*/

import service_libraries.tm_ccsds_pus_format;
import service_libraries.tc_ccsds_pus_format;
import service_libraries.pus_services.pus_services;





interface PUSS17Iface {
	procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);
};

resource class PUSService17 provides PUSS17Iface {

	exec_tc_req_status : PSExecTCReqStatus;

	tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

	pus_service_9 : access PUSS9Iface;


	viewer build_tm_17_2(&self, p_tm_handler : &mut TMHandlerT,
					tm_seq_counter : u16) {

		startup_tm(p_tm_handler);
		var current_obt : MissionObt = {
			seconds = 0,
			finetime = 0
		};
		self->pus_service_9.get_current_obt(&mut current_obt);
		close_tm(p_tm_handler, 17, 2, tm_seq_counter, current_obt);
		return;
	}

	method exec17_1TC(&priv self) -> PSExecTCReqStatus {

		var next_status : PSExecTCReqStatus = PSExecTCReqStatus::Exit;
		var result : MyResult = MyResult::Ok;
		

		var tm_handler : Option<box TMHandlerT> = None;
		self->a_tm_handler_pool.alloc(&mut tm_handler);

		match tm_handler {

			case Some(b_tm_handler) => {

				var tm_count : u16 = 0 : u16;
				self->tm_counter.get_next_tm_count(&mut tm_count);
				self->build_tm_17_2(&mut b_tm_handler, tm_count);
				self->tm_channel.send_tm(b_tm_handler, &mut result);

				if (result is MyResult::Error){
					next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
				}
			} 
			case None => {

				next_status = PSExecTCReqStatus::Failure(TM_POOL_ALLOC_FAILURE);
				
			}
			
		}

		return next_status;
	}

	procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>) {

        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status is PSExecTCReqStatus::Exit == false) {

            match self->exec_tc_req_status {

				case Init => {
					// Do nothing
				}

                case ExecTC => {

                    if (subtype == 1) {

                        self->exec_tc_req_status = self->exec17_1TC();

                    } else {

                        self->exec_tc_req_status = PSExecTCReqStatus::Error(ACCEPTANCE_ERROR);
                    }
                }

                case Error(error_code) => {

                    self->exec_tc_req_status = PSExecTCReqStatus::Exit;

                    if (error_code == ACCEPTANCE_ERROR) {

                        //Generar TM[1,4] error en la aceptacion
                        
                    } else if (error_code == BUILD_TM_ERROR) {

                        //Generar TM[1,8] error en la generacion de TM  
                      
                    } else {
                        
                       
                    }

                }

				case Failure(failure_code) => {

					*action_status = Failure(failure_code);
					self->exec_tc_req_status = PSExecTCReqStatus::Exit;

				}

                case Exit => {
                    //Unreachable point
                }  
            }
        }

        if(self->exec_tc_req_status is PSExecTCReqStatus::Exit){

            self->exec_tc_req_status = PSExecTCReqStatus::Init;
        }

        return;
    
    }

};



