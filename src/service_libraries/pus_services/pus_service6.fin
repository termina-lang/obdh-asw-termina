/*
PUS SERVICE 6 : MEMORY MANAGEMENT
*/


import service_libraries.pus_services.pus_service6.internal;



interface PUSS6Iface {

    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>);

};

resource class PUSService6 provides PUSS6Iface {

    exec_tc_req_status_update : PS6ExecTCReqStatusUpdate;

    mem_id_write_permissions : [bool; banks_number];
    memory : loc [[u8; bank_size] ; banks_number];

    tm_channel : access TMChannelIface;
    a_tm_handler_pool : access Allocator<TMHandler>;
    tm_counter : access TMCounterIface;

    obt_manager : access OBTManagerIface;

    pus_service_1 : access PUSService1Iface;

    viewer is_address_valid (&self) -> bool {

        var is_valid : bool = true;

        if (self->exec_tc_req_status_update.mem_id as usize >= banks_number) {
            is_valid = false;
        } else if (self->exec_tc_req_status_update.address as usize >= bank_size) {
            is_valid = false;
        } else if (self->exec_tc_req_status_update.address as usize + self->exec_tc_req_status_update.length as usize > bank_size) {
            is_valid = false;
        } else if (self->exec_tc_req_status_update.length as usize > max_num_of_bytes_memory_load) {
            is_valid = false;
        } else {

        }

        return is_valid;
    }


    viewer is_mem_id_write_enabled (&self) -> bool {

        return (self->mem_id_write_permissions[self->exec_tc_req_status_update.mem_id as usize] == true);

    }

    method write_data(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        let bank_index : usize = self->exec_tc_req_status_update.mem_id as usize;
        let start_address : usize = self->exec_tc_req_status_update.address as usize;

        for i : usize in 0 .. max_tc_size while (i < self->exec_tc_req_status_update.length as usize) {
                self->memory[bank_index][start_address + i] = self->exec_tc_req_status_update.data[i];
        }
        
        return status;
    }

    method read_data(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;
        let bank_index : usize = self->exec_tc_req_status_update.mem_id as usize;
        let start_address : usize = self->exec_tc_req_status_update.address as usize;

        for i : usize in 0 .. max_tc_size while (i < self->exec_tc_req_status_update.length as usize) {
            self->exec_tc_req_status_update.data[i] = self->memory[bank_index][start_address + i];
        }
        
        return status;
    }

    method check_data(&priv self) -> Option<u16> {

        let bank_index : usize = self->exec_tc_req_status_update.mem_id as usize;
        let start_address : usize = self->exec_tc_req_status_update.address as usize;
        var data : [u8; max_tc_size] = [0; max_tc_size];
        for i : usize in 0 .. max_tc_size while (i < self->exec_tc_req_status_update.length as usize) {
            data[i] = self->memory[bank_index][start_address + i];
        }

        var checksum : Option<u16> = 
                Some(cal_crc_16(&data, self->exec_tc_req_status_update.length as usize));
        
        return checksum;
    }

    method exec6_2TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.N,
                    &mut status);

        } else if(self->is_address_valid() == false) {

            self->pus_service_1.send_tm_1_4_mem_address_not_valid (
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.mem_id,
                    self->exec_tc_req_status_update.address, 
                    &mut status);

        } else if (self->is_mem_id_write_enabled() == false) {

            self->pus_service_1.send_tm_1_4_mem_id_read_only(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.mem_id,
                    &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.flags_ack, 
                    &mut status);
            
            if (status is Success) {
                status = self->write_data();
            }

            if (status is Success) {

                self->pus_service_1.notify_tm_1_7(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack, 
                        &mut status);

            } else {

                self->pus_service_1.send_tm_1_8_mem_access_error(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.mem_id,
                            &mut status);

            }
        
        }

        return status;

    }

    method exec6_5TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.N,
                        &mut status);

        } else if(self->is_address_valid() == false) {

            self->pus_service_1.send_tm_1_4_mem_address_not_valid (
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.mem_id,
                        self->exec_tc_req_status_update.address,
                        &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack, 
                        &mut status);

            if (status is Success) {

                status = self->read_data();
            
            }

            if (status is Success) {

                var tm_handler : Option<box TMHandler> = None;
                self->a_tm_handler_pool.alloc(&mut tm_handler);

                match tm_handler {

                    case Some(b_tm_handler) => {

                        var current_obt : MissionOBT = {seconds = 0, finetime = 0};
                        var tm_count : u16 = 0 : u16;

                        self->tm_counter.get_next_tm_count(&mut tm_count);
                        self->obt_manager.get_current_obt(&mut current_obt);

                        status = build_tm_6_6(&mut b_tm_handler, tm_count, current_obt, &(self->exec_tc_req_status_update));

                        if (status is Success){
                            self->tm_channel.send_tm(b_tm_handler, &mut status);
                        } else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }

                        if (status is Success) {

                            self->pus_service_1.notify_tm_1_7(
                                    self->exec_tc_req_status_update.packet_id,
                                    self->exec_tc_req_status_update.packet_seq_ctrl,
                                    self->exec_tc_req_status_update.flags_ack, 
                                    &mut status);

                        }

                    }
                    case None => {

                        status = Failure(TM_POOL_ALLOC_FAILURE);
                    }
                }
                
            } else {

                self->pus_service_1.send_tm_1_8_mem_access_error(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.mem_id, 
                        &mut status);

            }

        }
        
        return status;

    }

    method exec6_9TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.N,
                        &mut status);

        } else if(self->is_address_valid() == false) {

            self->pus_service_1.send_tm_1_4_mem_address_not_valid(
                    self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.mem_id,
                    self->exec_tc_req_status_update.address,
                    &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(self->exec_tc_req_status_update.packet_id,
                    self->exec_tc_req_status_update.packet_seq_ctrl,
                    self->exec_tc_req_status_update.flags_ack, 
                    &mut status);

            var option_checksum : Option<u16> = None;
            option_checksum = self->check_data();

            match option_checksum {

                case Some(checksum) => {

                    var tm_handler : Option<box TMHandler> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                            var current_obt : MissionOBT = {seconds = 0, finetime = 0};
                            var tm_count : u16 = 0 : u16;
                            self->tm_counter.get_next_tm_count(&mut tm_count);
                            self->obt_manager.get_current_obt(&mut current_obt);

                            status = build_tm_6_10(&mut b_tm_handler, tm_count, current_obt, &(self->exec_tc_req_status_update), checksum);

                            if (status is Success){
                                self->tm_channel.send_tm(b_tm_handler, &mut status);
                            } else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }

                            if (status is Success) {

                                self->pus_service_1.notify_tm_1_7(
                                        self->exec_tc_req_status_update.packet_id,
                                        self->exec_tc_req_status_update.packet_seq_ctrl,
                                        self->exec_tc_req_status_update.flags_ack, 
                                        &mut status);

                            }

                        }
                        case None => {

                            status = Failure(TM_POOL_ALLOC_FAILURE);
                        }
                    }
                }
                case None => {

                    self->pus_service_1.send_tm_1_8_mem_access_error(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.mem_id, 
                            &mut status);

                }

            }

        }
        
        return status;

    }

    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>){

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
        self->exec_tc_req_status_update.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
        self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
        self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;

        status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.mem_id));

        if (status is Success) {
            status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));
        }

        if (status is Success) {
            status = tc_handler_get_u32_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.address));
        }
        
        if (status is Success) {
            status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.length));
        }

        if ((status is Success) && (subtype == 2)) {
            for j : usize in 0 .. max_num_of_bytes_memory_load while ((j < self->exec_tc_req_status_update.length as usize) && (status is Success)) {
                status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.data[j]));
            }
        } 

        if (status is Success) {

            if (subtype == 2) {

                status = self->exec6_2TC();

            } else if (subtype == 5) {

                status = self->exec6_5TC();

            } else if (subtype == 9) {

                status = self->exec6_9TC();

            } else {

                status = Failure(ACCEPTANCE_ERROR);
            }

        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    self->pus_service_1.send_tm_1_4_error_in_acceptance(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            action_status);

                } else if (error_code == BUILD_TM_ERROR) {

                    self->pus_service_1.send_tm_1_8_tm_exceed_limit_appdata(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            action_status);

                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->pus_service_1.send_tm_1_4_short_pack_length(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.tc_num_bytes,
                            action_status);

                } else {
                  
                    *action_status = Failure(error_code);
                    
                }   
                
            }  
        }

        return;
    
    }

};