/**
 * @file pus_service12_help.fin
 * @brief Imports and definitions related to PUS Service 12.
 */

import resources.system_data_pool;
import service_libraries.pus_services.pus_services;
import service_libraries.pus_services.pus_service9.pus_service9;
import service_libraries.pus_services.pus_service5.pus_service5;
import service_libraries.pus_services.pus_service1.pus_service1;


constexpr max_num_pmon_ids : usize = 16;
constexpr max_num_transitions : usize = 1;


enum MonitorCheckType {
    ExpectedValue, //0
    Limits,  //1
    Delta,  //2
    Free   //3
};

struct ParamValueCheckDefinition {
    mask_value : u32;
    expected_value : u32;
    EvID : u16;
};

struct ParamLimitCheckDefinition {
    low_limit : u32;
    low_limit_evID : u16;
    high_limit : u32;
    high_limit_evID : u16;
};

struct ParamDeltaCheckDefinition {
    low_delta_threshold : u16;
    low_delta_EvID : u16;
    high_delta_threshold : u16;
    high_delta_EvID : u16;
    consecutive_delta_values : u8;
};

enum MonitorDefinition {
    ParamValueCheck(ParamValueCheckDefinition),
    ParamLimitCheck(ParamLimitCheckDefinition),
    ParamDeltaCheck(ParamDeltaCheckDefinition),
    Unselected
};

enum CheckValueStatus {
    MonitorUnchecked, //1
    MonitorValueUnexpected, //2
    MonitorValueExpected  //3
};

enum CheckLimitsStatus {
    MonitorUnchecked,  //4
    MonitorAboveHighLimit,  //5
    MonitorBelowLowLimit,  //6
    MonitorWithinLimits  //7
};

enum CheckDeltaStatus {
    MonitorUnchecked,  //8
    MonitorDeltaLow,  //9
    MonitorDeltaHigh,  //10
    MonitorDeltaWithin  //11
};


enum CheckState {
    ParamValueStatus(CheckValueStatus),
    ParamLimitStatus(CheckLimitsStatus),
    ParamDeltaStatus(CheckDeltaStatus),
    Unselected //0
};


struct ParamMonitoringConfiguration {
    PID : u16;
    type : MonitorCheckType;
    enabled : bool;
    definition : MonitorDefinition;
    repetition: u8;
    repetition_control: u8;
    interval : u8;
    interval_control : u8;
    transition_obt : MissionObt;
    temp_state : CheckState;
    current_state : CheckState;
};


struct ParamMonitoringTransition {
    PMONID : u16;
    PID : u16;
    type : MonitorCheckType;
    mask_value : u32;
	limit_value : u32;
	new_value : u32;
	prev_status : CheckState;
	new_status : CheckState;
	trans_obt : MissionObt;

};

struct DoMonitoringReqStatusUpdate {
    PMONID: u16;
    EvID: u16;
    current_monitor_definition: MonitorDefinition;
    fault_info: FaultInfo;
    new_status: CheckState;
    event_triggered: bool;
};

constexpr ps12_init_do_monitoring_req_status_update : DoMonitoringReqStatusUpdate = {
    PMONID = 0,
    EvID = 0,
    current_monitor_definition = MonitorDefinition::Unselected,
    fault_info = FaultInfo::Empty,
    new_status = CheckState::Unselected,
    event_triggered = false
};



enum DoMonitoringReqStatus {
    Init,
    CheckPMONID,
    GetMonitoringType,
    DoLimitsMonitoring,
    DoExpectedValueMonitoring,
    GetRequestStatusUpdate,
    Exit
};


struct PS12TC_1_2_6_Data {
    N : u8;
    PMONID: u16;
};

struct PS12TC_5_Data {
    N : u8;
    PMONID: u16;
    mon_config : ParamMonitoringConfiguration;
};

struct PS12ExecTCReqStatusUpdate {
    packet_id : u16;
    packet_seq_ctrl : u16;
    flags_ack : u8;
    tc_num_bytes : usize;
    tc_data_1_2_6: PS12TC_1_2_6_Data;
    tc_data_5: PS12TC_5_Data;  
};

constexpr ps12_init_tc_req_status_update : PS12ExecTCReqStatusUpdate = {
    packet_id = 0,
    packet_seq_ctrl = 0,
    flags_ack = 0,
    tc_num_bytes = 0,
    tc_data_1_2_6 = {
        N = 0,
        PMONID = 0
    },
    tc_data_5 = {
        N = 0,
        PMONID = 0,
        mon_config = {
            PID = 0,
            type = MonitorCheckType::Free,
            enabled = false,
            definition = MonitorDefinition::Unselected,
            repetition= 0,
            repetition_control= 0,
            interval = 0,
            interval_control = 0,
            transition_obt = {seconds = 0, finetime = 0},
            temp_state = CheckState::Unselected,
            current_state = CheckState::Unselected
        }
    }
};


    

function get_check_status_index (status : CheckState) -> u8 {

    var index : u8 = 0;

    match status {

        case ParamValueStatus(param_status) => {

            match param_status {

                case MonitorUnchecked => {
                    index = 1;
                }
                case MonitorValueUnexpected => {
                    index = 2;
                }
                case MonitorValueExpected => {
                    index = 3;
                }
            }

        }
        case ParamLimitStatus(limit_status) => {

            match limit_status {

                case MonitorUnchecked => {
                    index = 4;
                }
                case MonitorAboveHighLimit => {
                    index = 5;
                }
                case MonitorBelowLowLimit => {
                    index = 6;
                }
                case MonitorWithinLimits => {
                    index = 7;
                }
            }

        }
        case ParamDeltaStatus(delta_status) => {

            match delta_status {

                case MonitorUnchecked => {
                    index = 8;
                }
                case MonitorDeltaLow => {
                    index = 9;
                }
                case MonitorDeltaHigh => {
                    index = 10;
                }
                case MonitorDeltaWithin => {
                    index = 11;
                }
            }

        }
        case Unselected => {

            index = 0;

        }
    }

    return index;
}

function get_type_index (type : MonitorCheckType) -> u8 {

    var index : u8 = 0;

    match type {

        case ExpectedValue => {
            index = 0;
        }
        case Limits => {
            index = 1;
        }
        case Delta => {
            index = 2;
        }
        case Free => {
            index = 0xFF;
        }
    }

    return index;
}


function are_status_equal (status1 : CheckState, status2 : CheckState) -> bool {

    var equal : bool = get_check_status_index(status1) == get_check_status_index(status2);

    return equal;
}



function get_check_type (aux : u8) -> MonitorCheckType {

    var monitor_check : MonitorCheckType = MonitorCheckType::Free;

    if (aux == 0) {

        monitor_check = MonitorCheckType::ExpectedValue;

    } else if (aux == 1) {

        monitor_check = MonitorCheckType::Limits;

    } else if (aux == 2) {

        monitor_check = MonitorCheckType::Delta;

    } else {

        monitor_check = MonitorCheckType::Free;

    }

    return monitor_check;
}


function is_valid_check_limit_def (param_limit_check_definition : &MonitorDefinition) -> bool {

    var res : bool = false;

    match *param_limit_check_definition {

        case ParamLimitCheck(param_limit_def) => {

            if (param_limit_def.low_limit < param_limit_def.high_limit) {

                res = true;

            }
        }
        case _ => {

            res = false;

        }
    }
    return res;
}


function build_tm_12_12(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, current_obt : MissionObt, counter: u8, param_mon_transitions_table : &[ParamMonitoringTransition; max_num_transitions]) -> Status<i32> {

    var status : Status<i32> = Success;

    startup_tm(p_tm_handler);
    status = append_u8_appdata_field(p_tm_handler, counter);

    for i : usize in 0 .. max_num_transitions while (i < (counter as usize)) {

        var aux_prev_status : u8 = 0;
        var aux_new_status : u8 = 0;

        if (status is Success) {
            status = append_u16_appdata_field(p_tm_handler, param_mon_transitions_table[i].PMONID);
        }
        if (status is Success) {
            status = append_u16_appdata_field(p_tm_handler, param_mon_transitions_table[i].PID);
        }
        if (status is Success) {
            var type_id : u8 = get_type_index(param_mon_transitions_table[i].type);
            status = append_u8_appdata_field(p_tm_handler, type_id);
        }
        
        
        if(param_mon_transitions_table[i].type is MonitorCheckType::ExpectedValue && (status is Success)) {
            status = append_u32_appdata_field(p_tm_handler, param_mon_transitions_table[i].mask_value);
        }

        aux_prev_status = get_check_status_index(param_mon_transitions_table[i].prev_status);
        aux_new_status = get_check_status_index(param_mon_transitions_table[i].new_status);

        if (status is Success) {
            status = append_u32_appdata_field(p_tm_handler, param_mon_transitions_table[i].new_value);
        }
        if (status is Success) {
            status = append_u32_appdata_field(p_tm_handler, param_mon_transitions_table[i].limit_value);
        }
        if (status is Success) {
            status = append_u8_appdata_field(p_tm_handler, aux_prev_status);
        }
        if (status is Success) {
            status = append_u8_appdata_field(p_tm_handler, aux_new_status);
        }
        if (status is Success) {
            status = append_u32_appdata_field(p_tm_handler, param_mon_transitions_table[i].trans_obt.seconds); 
        }
    }
    if(status is Success){
        close_tm(p_tm_handler, 12, 12, tm_seq_counter, current_obt);
    }


    return status;
}