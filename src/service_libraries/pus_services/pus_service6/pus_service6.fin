/*
PUS SERVICE 6 : MEMORY MANAGEMENT
*/


import service_libraries.pus_services.pus_service6.pus_service6_help;



interface PUSS6Iface {

    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);


};

resource class PUSService6 provides PUSS6Iface {

    exec_tc_req_status : PSExecTCReqStatus;
    exec_tc_req_status_update : PS6ExecTCReqStatusUpdate;

    mem_id_write_permisssions : [bool; banks_number];
    memory : loc [[u8; bank_size] ; banks_number];


    tm_channel : access TMChannelIface;
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

    pus_service_9 : access PUSS9Iface;



    viewer is_address_valid (&self) -> bool {

        var is_valid : bool = true;
        // TO DO: Implement address validation logic
        if (self->exec_tc_req_status_update.mem_id as usize >= banks_number) {
            is_valid = false;
        } else if (self->exec_tc_req_status_update.address as usize >= bank_size) {
            is_valid = false;
        } else if (self->exec_tc_req_status_update.address as usize + self->exec_tc_req_status_update.length as usize > bank_size) {
            is_valid = false;
        } else if (self->exec_tc_req_status_update.length as usize > max_num_of_bytes_memory_load) {
            is_valid = false;
        } else {

        }

        return is_valid;
    }


    viewer is_mem_id_write_enabled (&self) -> bool {

        var is_enabled : bool = true;
        if (self->mem_id_write_permisssions[self->exec_tc_req_status_update.mem_id as usize] == false) {
            is_enabled = false;
        }
        
        return is_enabled;
    }

    method write_data(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        let bank_index : usize = self->exec_tc_req_status_update.mem_id as usize;
        let start_address : usize = self->exec_tc_req_status_update.address as usize;

        for i : usize in 0 .. max_tc_size while (i < self->exec_tc_req_status_update.length as usize) {
                self->memory[bank_index][start_address + i] = self->exec_tc_req_status_update.data[i];
        }
        

        return status;
    }

    method read_data(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;
        let bank_index : usize = self->exec_tc_req_status_update.mem_id as usize;
        let start_address : usize = self->exec_tc_req_status_update.address as usize;

        for i : usize in 0 .. max_tc_size while (i < self->exec_tc_req_status_update.length as usize) {
            self->exec_tc_req_status_update.data[i] = self->memory[bank_index][start_address + i];
        }
        
        

        return status;
    }

    method check_data(&priv self) -> u16 {

        let bank_index : usize = self->exec_tc_req_status_update.mem_id as usize;
        let start_address : usize = self->exec_tc_req_status_update.address as usize;
        var data : [u8; max_tc_size] = [0; max_tc_size];
        for i : usize in 0 .. max_tc_size while (i < self->exec_tc_req_status_update.length as usize) {
            data[i] = self->memory[bank_index][start_address + i];
        }

        var checksum : u16 = cal_crc_16(&data, self->exec_tc_req_status_update.length as usize);
        
        return checksum;
    }

    method exec6_2TC(&priv self) -> Status<i32> {

        var ack_enabled : bool = false;
        var status : Status<i32> = Success;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);
            
                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                 self->exec_tc_req_status_update.N, current_obt);

                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);

                    }
                   
                }
                else {

                    if(self->is_address_valid() == false) {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_mem_address_not_valid (&mut b_tm_handler,tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                             (self->exec_tc_req_status_update.mem_id), (self->exec_tc_req_status_update.address), current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        }
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }                                               
                    }
                    else if (self->is_mem_id_write_enabled() == false) {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_mem_id_read_only (&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                             (self->exec_tc_req_status_update.mem_id), current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        }
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }                        
                    }
                    else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                        if (ack_enabled) {

                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            }
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }

                        } else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }

                        status = self->write_data();

                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                self->pus_service_9.get_current_obt(&mut current_obt);

                                if (status is Success){

                                    status = build_tm_1_7(&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                                    if (ack_enabled) {

                                        if (status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                        }
                                        else {
                                            self->a_tm_handler_pool.free(b_tm_handler2);
                                        }

                                    } else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                    

                                }
                                else {

                                    status = build_tm_1_8_mem_access_error (&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                         self->exec_tc_req_status_update.mem_id, current_obt);

                                    if (status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                }
                            }
                            case None => {

                                status = Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                    }
           
                }
            }
            case None => {

                status = Failure(TM_POOL_ALLOC_FAILURE);

            }
        }
                        

        return status;

    }


    method exec6_5TC(&priv self) -> Status<i32> {

        var ack_enabled : bool = false;
        var status : Status<i32> = Success;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);
            
                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                 self->exec_tc_req_status_update.N, current_obt);

                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);

                    }
                   
                }
                else {

                    if(self->is_address_valid() == false) {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_mem_address_not_valid (&mut b_tm_handler,tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                             (self->exec_tc_req_status_update.mem_id), (self->exec_tc_req_status_update.address), current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        }
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }                        
                    }
                    else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                        if (ack_enabled) {

                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            }
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }

                        } else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }

                        status = self->read_data();

                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                self->pus_service_9.get_current_obt(&mut current_obt);

                                if (status is Success){

                                    status = build_tm_6_6(&mut b_tm_handler2, tm_count2, current_obt, &(self->exec_tc_req_status_update));

                                    if (status is Success){

                                        self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                    var tm_handler3 : Option<box TMHandlerT> = None;
                                    self->a_tm_handler_pool.alloc(&mut tm_handler3);

                                    match tm_handler3 {

                                        case Some(b_tm_handler3) => {

                                            var tm_count3 : u16 = 0 : u16;
                                            self->tm_counter.get_next_tm_count(&mut tm_count3);
                                            self->pus_service_9.get_current_obt(&mut current_obt);
                                            status = build_tm_1_7(&mut b_tm_handler3, tm_count3, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                                            if (ack_enabled) {

                                                if (status is Success){

                                                    self->tm_channel.send_tm(b_tm_handler3, &mut status);

                                                }
                                                else {
                                                    self->a_tm_handler_pool.free(b_tm_handler3);
                                
                                                }

                                            } else {
                                                
                                                self->a_tm_handler_pool.free(b_tm_handler3);
                                            }
                                        }
                                        case None => {

                                            status = Failure(TM_POOL_ALLOC_FAILURE);
                                        }
                                    }

                                }
                                else {

                                    status = build_tm_1_8_mem_access_error (&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                         self->exec_tc_req_status_update.mem_id, current_obt);

                                    if (status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                }
                            }
                            case None => {

                                status = Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                    }
           
                }
            }
            case None => {

                status = Failure(TM_POOL_ALLOC_FAILURE);

            }
        }
                        

        return status;

    }


    method exec6_9TC(&priv self) -> Status<i32> {

        var ack_enabled : bool = false;
        var status : Status<i32> = Success;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);
            
                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                 self->exec_tc_req_status_update.N, current_obt);

                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);

                    }
                   
                }
                else {

                    if(self->is_address_valid() == false) {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_mem_address_not_valid (&mut b_tm_handler,tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                             (self->exec_tc_req_status_update.mem_id), (self->exec_tc_req_status_update.address), current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        }
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }                                           
                    }
                    else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                        if (ack_enabled) {

                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            }
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }

                        } else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }

                        var checksum : u16 = 0;
                        checksum = self->check_data();

                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                self->pus_service_9.get_current_obt(&mut current_obt);

                                if (status is Success){

                                    status = build_tm_6_10(&mut b_tm_handler2, tm_count2, current_obt, &(self->exec_tc_req_status_update), checksum);

                                    if (status is Success){

                                        self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                    var tm_handler3 : Option<box TMHandlerT> = None;
                                    self->a_tm_handler_pool.alloc(&mut tm_handler3);

                                    match tm_handler3 {

                                        case Some(b_tm_handler3) => {

                                            var tm_count3 : u16 = 0 : u16;
                                            self->tm_counter.get_next_tm_count(&mut tm_count3);
                                            self->pus_service_9.get_current_obt(&mut current_obt);
                                            status = build_tm_1_7(&mut b_tm_handler3, tm_count3, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl), self->exec_tc_req_status_update.flags_ack, current_obt, &mut ack_enabled);

                                            if (ack_enabled) {

                                                if (status is Success){

                                                    self->tm_channel.send_tm(b_tm_handler3, &mut status);

                                                }
                                                else {
                                                    self->a_tm_handler_pool.free(b_tm_handler3);
                                
                                                }

                                            } else {
                                                
                                                self->a_tm_handler_pool.free(b_tm_handler3);
                                            }
                                        }
                                        case None => {

                                            status = Failure(TM_POOL_ALLOC_FAILURE);
                                        }
                                    }


                                }
                                else {

                                    status = build_tm_1_8_mem_access_error (&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                         self->exec_tc_req_status_update.mem_id, current_obt);

                                    if (status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                }
                            }
                            case None => {

                                status = Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                    }
           
                }
            }
            case None => {

                status = Failure(TM_POOL_ALLOC_FAILURE);

            }
        }
                        

        return status;

    }

    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>){

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status is PSExecTCReqStatus::Exit == false) {

            match self->exec_tc_req_status {

                case Init => {

                    self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
                    self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
                    self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
                    status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.mem_id));
                    if (status is Success) {
                        status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));
                    }
                    if (status is Success) {
                        status = tc_handler_get_u32_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.address));
                    }
                    if (status is Success) {
                        status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.length));
                    }
                    if ((subtype == 2) && (status is Success)) {
                        for j : usize in 0 .. max_num_of_bytes_memory_load while ((j < self->exec_tc_req_status_update.length as usize) && (status is Success)) {
                            status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.data[j]));
                        }
                    } 

                    if (status is Success) {

                        self->exec_tc_req_status = PSExecTCReqStatus::ExecTC;
                        
                    } else {

                        status = Failure(ACCEPTANCE_ERROR);
                        self->exec_tc_req_status = PSExecTCReqStatus::Exit;
                        
                    }

                }
                case ExecTC => {

                    self->exec_tc_req_status = PSExecTCReqStatus::Exit;

                    if (subtype == 2) {

                        status = self->exec6_2TC();

                    } else if (subtype == 5) {

                        status = self->exec6_5TC();

                    } else if (subtype == 9) {

                        status = self->exec6_9TC();

                    } else {

                        status = Failure(ACCEPTANCE_ERROR);
                    }
                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR || error_code == BUILD_TM_ERROR || error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    *action_status = Success;

                    var tm_handler : Option<box TMHandlerT> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                            var tm_count : u16 = 0 : u16;
                            var current_obt : MissionObt = {seconds = 0, finetime = 0};
                            
                            self->tm_counter.get_next_tm_count(&mut tm_count);
                            self->pus_service_9.get_current_obt(&mut current_obt);

                            if (error_code == ACCEPTANCE_ERROR) {

                                status = build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                 current_obt);

                            } else if (error_code == BUILD_TM_ERROR) {

                                status = build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                            current_obt);

                            } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                                status = build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_seq_ctrl),
                                    (self->exec_tc_req_status_update.tc_num_bytes), current_obt);

                            } else {
                              

                            }

                            
                            
                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                                
                            }
                            
                        }
                        case None => {
                            status = Failure(TM_POOL_ALLOC_FAILURE);
                        }
                    }
                    
                } else {

                    *action_status = Failure(error_code);
                    
                }   
                
            }  
        }

        self->exec_tc_req_status = PSExecTCReqStatus::Init;

        return;
    
    }



};