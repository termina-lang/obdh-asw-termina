import service_libraries.pus_services.pus_service1;
import service_libraries.pus_tm_handler;
import resources.obt_manager;
import resources.tm_channel;


const max_num_of_bytes_memory_load : usize = 256;
const banks_number : usize = 8; //Number of memory banks
const bank_size : usize = 1 << 24 : usize; //Size of each memory bank in bytes

struct PS6ExecTCReqStatusUpdate {
    packet_id : u16;
    packet_seq_ctrl : u16;
    flags_ack : u8;
    tc_num_bytes : usize;
    mem_id : u8;
    N : u8;
    address: u32;
    length: u16;
    data: [u8; max_num_of_bytes_memory_load];
};

constexpr ps6_init_tc_req_status_update : PS6ExecTCReqStatusUpdate = {
    packet_id = 0, packet_seq_ctrl = 0, flags_ack = 0, tc_num_bytes = 0, mem_id = 0, N = 0, address = 0, length = 0, data = [0; max_num_of_bytes_memory_load]
};


function build_tm_6_6(p_tm_handler : &mut TMHandler, tm_seq_counter : u16, current_obt : MissionOBT, mem_data : &PS6ExecTCReqStatusUpdate) -> Status<i32> {

    var status : Status<i32> = Success;
  
    startup_tm(p_tm_handler);
    status = append_u8_appdata_field(p_tm_handler, mem_data->mem_id);
    if (status is Success) {
        status = append_u8_appdata_field(p_tm_handler,1);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, mem_data->address);
    }
    if (status is Success) {
        status = append_u16_appdata_field(p_tm_handler, mem_data->length);
    }
    for i : usize in 0 .. (max_send_size - tm_app_data_offset)  while ((status is Success) && (i < mem_data->length as usize)) {
        status = append_u8_appdata_field(p_tm_handler, mem_data->data[i]);
    }
    if (status is Success) {
        close_tm(p_tm_handler, 6, 6, tm_seq_counter, current_obt);
    }

    return status;
}


function build_tm_6_10(p_tm_handler : &mut TMHandler, tm_seq_counter : u16, current_obt : MissionOBT, mem_data : &PS6ExecTCReqStatusUpdate, checksum : u16) -> Status<i32> {

    var status : Status<i32> = Success;
    startup_tm(p_tm_handler);
    status = append_u8_appdata_field(p_tm_handler, mem_data->mem_id);
    if (status is Success) {
        status = append_u8_appdata_field(p_tm_handler,1);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, mem_data->address);
    }
    if (status is Success) {
        status = append_u16_appdata_field(p_tm_handler, mem_data->length);
    }
    if (status is Success) {
        status = append_u16_appdata_field(p_tm_handler, checksum);
    }
    if (status is Success) {
        close_tm(p_tm_handler, 6, 10, tm_seq_counter, current_obt);
    }

    return status;
}