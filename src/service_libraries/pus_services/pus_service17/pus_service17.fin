/**
 * @file pus_service17.fin
 * @brief Implementation of PUS Service 17 (Test Service)
 */

import service_libraries.pus_services.pus_service17.pus_service17_help;

/**
 * @interface PUSS17Iface
 * @brief Interface for PUS Service 17 resource.
 */
interface PUSS17Iface {
	procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);
};


/**
 * @class PUSService17
 * @brief Resource class implementing the PUS Service 17 Test functionality.
*/
resource class PUSService17 provides PUSS17Iface {

	/**
    * @brief Current status of the telecommand (TC) execution request.
    * 
    * Tracks the state of TC execution, such as initialization, execution, error,
    * failure, or exit states.
    */
    exec_tc_req_status : PSExecTCReqStatus;

    /**
    * @brief Structure holding updated status information for the TC execution request.
    * 
    * Used to report detailed execution results, acknowledgments, and flags related
    * to the telecommand processing.
    */
    exec_tc_req_status_update : PS17ExecTCReqStatusUpdate;

    /**
    * @brief Access to the telemetry (TM) channel interface.
    * 
    * Used to send telemetry packets generated by the service.
    */
    tm_channel : access TMChannelIface;

    /**
    * @brief Allocator for TMHandlerT objects.
    * 
    * Provides dynamic memory management for telemetry handler instances.
    */
    a_tm_handler_pool : access Allocator<TMHandlerT>;

    /**
    * @brief Interface for the telemetry packet counter.
    * 
    * Provides sequential TM packet counters to ensure proper numbering of packets.
    */
    tm_counter : access TMCounterIface;

    /**
    * @brief Access to PUS Service 9 interface.
    * 
    * Provides time-related services such as obtaining the current onboard time (OBT)
    * used for timestamping telemetry packets.
    */
    pus_service_9 : access PUSS9Iface;



    /**
     * @brief Builds TM[17,2] packet.
     * 
     * @param p_tm_handler Telemetry handler.
     * @param tm_seq_counter Telemetry sequence counter.
    */
	viewer build_tm_17_2(&self, p_tm_handler : &mut TMHandlerT,
					tm_seq_counter : u16) {

		startup_tm(p_tm_handler);
		var current_obt : MissionObt = {
			seconds = 0,
			finetime = 0
		};
		self->pus_service_9.get_current_obt(&mut current_obt);
		close_tm(p_tm_handler, 17, 2, tm_seq_counter, current_obt);
		return;
	}


    /**
     * @brief Executes the processing logic for TC[17,1].
     * 
     * Builds and sends TM[1,3], TM[17,2], and TM[1,7] based on the execution flow.
     * Handles resource allocation and error management.
     * 
     * @return Execution status after processing TC[17,1].
     */
	method exec17_1TC(&priv self) -> PSExecTCReqStatus {

		var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};
        var ack_enabled : bool = false;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler1 : Option<box TMHandlerT> = None;
		self->a_tm_handler_pool.alloc(&mut tm_handler1);

		match tm_handler1 {

			case Some(b_tm_handler1) => {

				var tm_count1 : u16 = 0 : u16;
				self->tm_counter.get_next_tm_count(&mut tm_count1);
				self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_3(&mut b_tm_handler1, tm_count1, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                if (ack_enabled) {

                    if (next_status.status is Success){

                        self->tm_channel.send_tm(b_tm_handler1, &mut next_status.status);

                    }
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler1);
                    }

                } else {
                    
                    self->a_tm_handler_pool.free(b_tm_handler1);
                }
				
			} 
			case None => {

				next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
				
			}
			
		}
		
        if (next_status.status is Success) {

            var tm_handler2 : Option<box TMHandlerT> = None;
		    self->a_tm_handler_pool.alloc(&mut tm_handler2);

		    match tm_handler2 {

                case Some(b_tm_handler2) => {

                    var tm_count2 : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count2);
                    self->build_tm_17_2(&mut b_tm_handler2, tm_count2);
                    self->tm_channel.send_tm(b_tm_handler2, &mut next_status.status);


                } 
                case None => {

                    next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                    
                }
			
		    }

        }

		
        if (next_status.status is Success){

            var tm_handler3 : Option<box TMHandlerT> = None;
		    self->a_tm_handler_pool.alloc(&mut tm_handler3);

            match tm_handler3 {

                case Some(b_tm_handler3) => {

                    var tm_count3 : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count3);
                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_7(&mut b_tm_handler3, tm_count3, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);
                    
                    if (ack_enabled) {

                        if (next_status.status is Success){

                            self->tm_channel.send_tm(b_tm_handler3, &mut next_status.status);

                        }
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler3);
                        
                        }

                    } else {
                        
                        self->a_tm_handler_pool.free(b_tm_handler3);
                       
                    }
                } 
                case None => {

                    next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                    
                }
			
		    }

        }

		return next_status;
	}


    /**
     * @brief Extracts relevant parameters from the incoming TC for execution.
     * 
     * @param tc_handler Pointer to the telecommand handler.
     * @param subtype Pointer to store the subtype of the TC.
     * 
     * @return A structure containing extracted TC parameters.
     */
    viewer get_TC_params(&self, tc_handler : &mut TCHandlerT, subtype : &mut u8) -> PS17ExecTCReqStatusUpdate {

        *subtype = tc_handler->df_header.subtype;

        var tc_data : PS17ExecTCReqStatusUpdate = ps17_init_tc_req_status_update;
        

        return tc_data;

    }


    /**
     * @brief Handles generation and sending of TM[1,4] in case of acceptance error.
     * 
     * @return Execution status after handling the error.
     */
	viewer manage_error_in_acceptance(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                    
                }
                
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }


    /**
     * @brief Handles generation and sending of TM[1,8] in case TM limit is reached.
     * 
     * @return Execution status after handling the error.
     */
    viewer manage_tm_limit_app_data_reached(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
         
                }
                
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }



    /**
     * @brief Executes a telecommand for PUS Service 17.
     * 
     * This function processes the TC in several stages depending on the current execution status.
     * Handles TM generation and error management.
     * 
     * @param tc_handler Pointer to the telecommand handler.
     * @param action_status Pointer to store the final execution status.
     */
	procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>) {

        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status.exec_tc_status is PSReqStatus::Exit == false) {

            match self->exec_tc_req_status.exec_tc_status {

				case Init => {
					// Do nothing
                    self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.packet_error_ctrl = tc_handler->packet_error_ctrl;
                    self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
                    self->exec_tc_req_status.exec_tc_status = PSReqStatus::ExecTC;
				}

                case ExecTC => {

                    if (subtype == 1) {

                        self->exec_tc_req_status = self->exec17_1TC();

                    } else {

                        self->exec_tc_req_status.status = Failure(ACCEPTANCE_ERROR);
                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::Exit;
                    }
                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }

         match self->exec_tc_req_status.status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    self->exec_tc_req_status = self->manage_error_in_acceptance();
                    
                } else if (error_code == BUILD_TM_ERROR) {

                    self->exec_tc_req_status = self->manage_tm_limit_app_data_reached();
                
            
                } else {
                    
                    *action_status = Failure(error_code);
                
                }
                
            }  
        }

        self->exec_tc_req_status = {
                    exec_tc_status = PSReqStatus::Init,
                    status = Success
                };

        return;
    
    }

};



