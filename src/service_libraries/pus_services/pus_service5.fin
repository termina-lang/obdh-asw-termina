/*
PUS SERVICE 5 : EVENT REPORTING
*/


import service_libraries.pus_services.pus_service5.internal;


enum FaultInfo {
    ParamOutOfLimit(ParamOutOfLimitInfo),
    ParamFaultValue(ParamFaultValueInfo),
    Empty
};


interface PUSS5Iface {

    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>);
    procedure is_Ev_ID_enabled_ext(&mut self, Ev_ID: u16, p_enabled: &mut bool); 
    procedure send_tm_5_x(&mut self, evID: u16, fault_info: FaultInfo, status: &mut Status<i32>);
    procedure send_tm_5_2(&mut self, status: &mut Status<i32>);

};

resource class PUSService5 provides PUSS5Iface {

    Ev_ID_enable_config : [u32; 4];

    exec_tc_req_status_update : PS5ExecTCReqStatusUpdate;

    /**
    * @brief Access to the telemetry (TM) channel interface.
    * 
    * Used to send telemetry packets generated by the service.
    */
    tm_channel : access TMChannelIface;

    /**
    * @brief Allocator for TMHandler objects.
    * 
    * Provides dynamic memory management for telemetry handler instances.
    */
    a_tm_handler_pool : access Allocator<TMHandler>;

    /**
    * @brief Interface for the telemetry packet counter.
    * 
    * Provides sequential TM packet counters to ensure proper numbering of packets.
    */
    tm_counter : access TMCounterIface;

    /**
    * @brief Access to the On-Board Time manager resource.
    * 
    * Provides time-related services such as obtaining the current onboard time (OBT)
    * used for timestamping telemetry packets.
    */
    obt_manager : access OBTManagerIface;

    pus_service_1 : access PUSService1Iface;

    method is_Ev_ID_enabled(&self, Ev_ID : u16) -> bool {

        var enabled : bool = false;
        var index : usize = get_Ev_ID_enable_config_index(Ev_ID);
        var offset : u8 = get_Ev_ID_enable_config_offset(Ev_ID);

        if (index <= 4){

            var config_array_index : usize = index - 1; 
            if(((self->Ev_ID_enable_config[config_array_index] >> (offset-1)) & 0x01) != 0){
                enabled = true;
            }
        }

        return enabled;
    }

    procedure is_Ev_ID_enabled_ext(&mut self, Ev_ID: u16, p_enabled: &mut bool) {

        *p_enabled = (self->is_Ev_ID_enabled(Ev_ID));

        return;
    }

    method exec5_5TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        var index: usize = get_Ev_ID_enable_config_index(self->exec_tc_req_status_update.EvID);
        var offset : u8 = get_Ev_ID_enable_config_offset(self->exec_tc_req_status_update.EvID);

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.N, &mut status);
            
        } else if (index > 4) {

            self->pus_service_1.send_tm_1_4_EvID_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.EvID, &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                        self->exec_tc_req_status_update.packet_id, 
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack,
                        &mut status);

            if (status is Success) {

                let mask : u32 = 0x1 << (offset - 1);
                self->Ev_ID_enable_config[index - 1] = self->Ev_ID_enable_config[index - 1] | mask;

                self->pus_service_1.notify_tm_1_7(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.flags_ack,
                            &mut status);

            }

        }

        return status;

    }

    method exec5_6TC(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;
        
        var index: usize = get_Ev_ID_enable_config_index(self->exec_tc_req_status_update.EvID);
        var offset : u8 = get_Ev_ID_enable_config_offset(self->exec_tc_req_status_update.EvID);

        if (self->exec_tc_req_status_update.N != 1) {

            self->pus_service_1.send_tm_1_4_num_of_instr_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.N, &mut status);

        } else if (index > 4) {

            self->pus_service_1.send_tm_1_4_EvID_not_valid(
                        self->exec_tc_req_status_update.packet_id,
                        self->exec_tc_req_status_update.packet_seq_ctrl, 
                        self->exec_tc_req_status_update.EvID,
                        &mut status);

        } else {

            self->pus_service_1.notify_tm_1_3(
                        self->exec_tc_req_status_update.packet_id, 
                        self->exec_tc_req_status_update.packet_seq_ctrl,
                        self->exec_tc_req_status_update.flags_ack,
                        &mut status);

            if (status is Success) {

                let mask : u32 = 0x1 << (offset - 1);
                self->Ev_ID_enable_config[index - 1] = self->Ev_ID_enable_config[index - 1] & (0xFFFFFFFE ^ mask);

                self->pus_service_1.notify_tm_1_7(
                            self->exec_tc_req_status_update.packet_id,
                            self->exec_tc_req_status_update.packet_seq_ctrl,
                            self->exec_tc_req_status_update.flags_ack,
                            &mut status);
            }

        }

        return status;

    }

    procedure send_tm_5_2(&mut self, status: &mut Status<i32>){ 

        var tm_handler : Option<box TMHandler> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                startup_tm(&mut b_tm_handler);
                *status = append_u16_appdata_field(&mut b_tm_handler, EvID_build_tm_error);

                if(*status is Success){ 

                    var current_obt : MissionOBT = {seconds = 0, finetime = 0};
                    var tm_count : u16 = 0 : u16;

                    self->tm_counter.get_next_tm_count(&mut tm_count);
                    self->obt_manager.get_current_obt(&mut current_obt);

                    close_tm(&mut b_tm_handler, 5, 2, tm_count, current_obt);

                    self->tm_channel.send_tm(b_tm_handler, status);

                }
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                }
            }
            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
                
            }
        }
        return;

    }

    procedure send_tm_5_x(&mut self, evID: u16, fault_info: FaultInfo, status: &mut Status<i32>){

        var tm_handler : Option<box TMHandler> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var current_obt : MissionOBT = {seconds = 0, finetime = 0};
                var tm_count : u16 = 0 : u16;

                self->tm_counter.get_next_tm_count(&mut tm_count);
                self->obt_manager.get_current_obt(&mut current_obt);
                
                match (fault_info) {
                    case ParamOutOfLimit(fault_value_info) => {
                        *status = build_tm_5_x_param_out_of_limit(&mut b_tm_handler, tm_count, fault_value_info, evID, current_obt);
                    }
                    case ParamFaultValue(fault_value_info) => {
                        *status = build_tm_5_x_param_check_value_fail(&mut b_tm_handler, tm_count, fault_value_info, evID, current_obt);
                    }  
                    case Empty => {
                       
                    } 
                }

                if(*status is Success){
                    self->tm_channel.send_tm(b_tm_handler, status);
                } else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                }

            }
            case None => {
                *status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return;
    }

    procedure exec_tc (&mut self, tc_handler : &mut TCHandler, action_status: &mut Status<i32>){

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
        self->exec_tc_req_status_update.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
        self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
        self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
        status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));

        if (status is Success){
            status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.EvID));
        }

        if (status is Success) {

            if (subtype == 5) {

                status = self->exec5_5TC();

            } else if (subtype == 6) {

                status = self->exec5_6TC();

            } else {

                status = Failure(ACCEPTANCE_ERROR);
            }

        }

        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    self->pus_service_1.send_tm_1_4_error_in_acceptance(
                                self->exec_tc_req_status_update.packet_id,
                                self->exec_tc_req_status_update.packet_seq_ctrl,
                                action_status);

                } else if (error_code == BUILD_TM_ERROR) {

                    self->pus_service_1.send_tm_1_8_tm_exceed_limit_appdata(
                                self->exec_tc_req_status_update.packet_id,
                                self->exec_tc_req_status_update.packet_seq_ctrl,
                                action_status);

                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->pus_service_1.send_tm_1_4_short_pack_length(
                                self->exec_tc_req_status_update.packet_id,
                                self->exec_tc_req_status_update.packet_seq_ctrl,
                                self->exec_tc_req_status_update.tc_num_bytes,
                                action_status);

                } else {

                    *action_status = Failure(error_code); 

                }
                
            }  
        }

        return;
    
    }
  
};



