/*
PUS SERVICE 3 : HOUSEKEEPING
*/

import service_libraries.pus_services.pus_service3.pus_service3_help;


interface PUSS3Iface {

    procedure do_hk (&mut self, action_status : &mut Status<i32>);    
    procedure exec_tc(&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);
    procedure update_params(&mut self);

};

resource class PUSService3 provides PUSS3Iface {

    hk_config_table : [HKConfiguration; max_num_of_SIDs];
    exec_tc_req_status : PSExecTCReqStatus;
    exec_tc_req_status_update : PS3ExecTCReqStatusUpdate;
    
    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;
    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

    pus_service_9 : access PUSS9Iface;
    pus_service_5 : access PUSS5Iface;

    random_seed : u32;

    viewer get_SIDindex (&self) -> IndexFound {

        var index_found: IndexFound = {found = false, index = 0};

        for i : usize in 0 .. max_num_of_SIDs while (index_found.found == false) {

            if (self->exec_tc_req_status_update.tc_data.SID == self->hk_config_table[i].SID){

                index_found.found = true;
                index_found.index = i;
            }
        }
        return index_found;
    }

    method exec3_5TC(&priv self)-> Status<i32> {

        var ack_enabled : bool = false;
        var status : Status<i32> = Success;

        var current_obt: MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if(self->exec_tc_req_status_update.tc_data.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                 self->exec_tc_req_status_update.tc_data.N, current_obt);
                    
                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                    }
                   
                } 
                else {

                    self->exec_tc_req_status_update.index = self->get_SIDindex();

                    if (self->exec_tc_req_status_update.index.found){

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl), self->exec_tc_req_status_update.tc_data.flags_ack, current_obt, &mut ack_enabled);

                        if (ack_enabled) {

                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            }
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                      
                            }

                        } else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }
                        
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].enabled = true;
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;
                        
                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                self->pus_service_9.get_current_obt(&mut current_obt);
                                status = build_tm_1_7(&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl), self->exec_tc_req_status_update.tc_data.flags_ack, current_obt, &mut ack_enabled);

                                if (ack_enabled) {

                                    if (status is Success){

                                        self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                } else {
                                    self->a_tm_handler_pool.free(b_tm_handler2);
                                }
                        
                            }
                            case None => {
                                status = Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                    } else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_SID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                     self->exec_tc_req_status_update.tc_data.SID, current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                
                        }
                        
                    }
                }
            }
            case None => {

                status = Failure(TM_POOL_ALLOC_FAILURE);

            }
        }
 
        return status;
    }

    method exec3_6TC(&priv self) -> Status<i32> {

        var ack_enabled : bool = false;
        var status : Status<i32> = Success;

        var current_obt: MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if(self->exec_tc_req_status_update.tc_data.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                 self->exec_tc_req_status_update.tc_data.N, current_obt);

                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
    
                    }
                   
                } 
                else {

                    self->exec_tc_req_status_update.index = self->get_SIDindex();

                    if (self->exec_tc_req_status_update.index.found){

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl), self->exec_tc_req_status_update.tc_data.flags_ack, current_obt, &mut ack_enabled);
                        
                        if (ack_enabled) {

                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            }
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }

                        } else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }
                        
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].enabled = false;
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;
                        
                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                self->pus_service_9.get_current_obt(&mut current_obt);
                                status = build_tm_1_7(&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl), self->exec_tc_req_status_update.tc_data.flags_ack, current_obt, &mut ack_enabled);
                                
                                if (ack_enabled) {

                                    if (status is Success){

                                        self->tm_channel.send_tm(b_tm_handler2, &mut status);
                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                } else {
                                    self->a_tm_handler_pool.free(b_tm_handler2);
                                }
                            }
                            case None => {
                                status = Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                    } else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_SID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                     self->exec_tc_req_status_update.tc_data.SID, current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        
                        }
                    }
                }
            }
            case None => {

                status = Failure(TM_POOL_ALLOC_FAILURE);

            }
        }

        return status;
    }

    method exec3_31TC(&priv self) -> Status<i32> {

        var ack_enabled : bool = false;
        var status : Status<i32> = Success;

        var current_obt: MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

            match tm_handler {

                case Some(b_tm_handler) => {

                    var tm_count : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count);

                    if (self->exec_tc_req_status_update.tc_data.N != 1) {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        status = build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                         self->exec_tc_req_status_update.tc_data.N, current_obt);

                        if (status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                           
                        }

                    } else {

                        self->exec_tc_req_status_update.index = self->get_SIDindex();

                        if (self->exec_tc_req_status_update.index.found){

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            status = build_tm_1_3(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl), self->exec_tc_req_status_update.tc_data.flags_ack, current_obt, &mut ack_enabled);

                            if (ack_enabled) {

                                if (status is Success){

                                    self->tm_channel.send_tm(b_tm_handler, &mut status);

                                }
                                else {
                                    self->a_tm_handler_pool.free(b_tm_handler);
                                    
                                }

                            } else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }
                              
                            self->hk_config_table[self->exec_tc_req_status_update.index.index].interval = self->exec_tc_req_status_update.tc_data.collection_interval;
                            self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;

                            var tm_handler2 : Option<box TMHandlerT> = None;
                            self->a_tm_handler_pool.alloc(&mut tm_handler2);

                            match tm_handler2 {

                                case Some(b_tm_handler2) => {

                                    var tm_count2 : u16 = 0 : u16;
                                    self->tm_counter.get_next_tm_count(&mut tm_count2);

                                    self->pus_service_9.get_current_obt(&mut current_obt);
                                    status = build_tm_1_7(&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl), self->exec_tc_req_status_update.tc_data.flags_ack, current_obt, &mut ack_enabled);
                                    
                                    if (ack_enabled) {

                                        if (status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut status);

                                        }
                                        else {
                                            self->a_tm_handler_pool.free(b_tm_handler2);
                                            
                                        }

                                    } else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }
                                }
                                case None => {
                                    status = Failure(TM_POOL_ALLOC_FAILURE);
                                }
                            }

                        } else {

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            status = build_tm_1_4_SID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                                 self->exec_tc_req_status_update.tc_data.SID, current_obt);
                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
            
                            }
                        }
                    }
                }
                case None => {

                    status = Failure(TM_POOL_ALLOC_FAILURE);

                }
            }

        return status;
    }



    procedure exec_tc(&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>){

        var status : Status<i32> = Success;
        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status is PSExecTCReqStatus::Exit == false) {

            match self->exec_tc_req_status {

                case Init => {

                    self->exec_tc_req_status_update.tc_data.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.tc_data.packet_seq_ctrl = tc_handler->packet_header.packet_seq_ctrl;
                    self->exec_tc_req_status_update.tc_data.flags_ack = tc_handler->df_header.flag_ver_ack;
                    self->exec_tc_req_status_update.tc_data.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
                    status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_data.N));
                    if (status is Success){
                        status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_data.SID));
                    }
                    

                    if (subtype == 31 && (status is Success)) {

                        status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.tc_data.collection_interval));

                    }

                    if (status is Success) {

                        self->exec_tc_req_status = PSExecTCReqStatus::ExecTC;
                        
                    } else {

                        status = Failure(ACCEPTANCE_ERROR);
                        self->exec_tc_req_status = PSExecTCReqStatus::Exit;
                        
                    }

                }
                case ExecTC => {

                    self->exec_tc_req_status = PSExecTCReqStatus::Exit;

                    if (subtype == 5) {

                        status = self->exec3_5TC();

                    } else if (subtype == 6) {

                        status = self->exec3_6TC();

                    } else if (subtype == 31) {

                        status = self->exec3_31TC();

                    } else {

                        status = Failure(ACCEPTANCE_ERROR);
                
                    }

                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }


        match status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR || error_code == BUILD_TM_ERROR || error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    *action_status = Success;

                    var tm_handler : Option<box TMHandlerT> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                            var tm_count : u16 = 0 : u16;
                            var current_obt : MissionObt = {seconds = 0, finetime = 0};
                            
                            self->tm_counter.get_next_tm_count(&mut tm_count);
                            self->pus_service_9.get_current_obt(&mut current_obt);

                            if (error_code == ACCEPTANCE_ERROR) {

                                status = build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                 current_obt);

                            } else if (error_code == BUILD_TM_ERROR) {

                                status = build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                            current_obt);

                            } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                                status = build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), (self->exec_tc_req_status_update.tc_data.packet_seq_ctrl),
                                    (self->exec_tc_req_status_update.tc_data.tc_num_bytes), current_obt);

                            } else {
                              

                            }

                            
                            
                            if (status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                                
                            }
                            
                        }
                        case None => {
                            status = Failure(TM_POOL_ALLOC_FAILURE);
                        }
                    }

                    
                } else {
                    
                    *action_status = Failure(error_code);
                }
                
            }  
        }

        self->exec_tc_req_status = PSExecTCReqStatus::Init;
        

        return;

    } 
    


    procedure do_hk (&mut self, action_status : &mut Status<i32>) {

        var do_hk_status : Status<i32> = Success;

        for i : usize in 0 .. max_num_of_SIDs while (*action_status is Success) {

            if (self->hk_config_table[i].enabled == true){

                self->hk_config_table[i].interval_control = self->hk_config_table[i].interval_control + 1;

                if (self->hk_config_table[i].interval_control >= self->hk_config_table[i].interval){

                    self->hk_config_table[i].interval_control = 0;

                    var tm_handler : Option<box TMHandlerT> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                        var tm_count : u16 = 0 : u16;
                        self->tm_counter.get_next_tm_count(&mut tm_count);

                        
                        startup_tm(&mut b_tm_handler);
                        do_hk_status = append_u16_appdata_field(&mut b_tm_handler, self->hk_config_table[i].SID);

                        var PID : u16 = 0;
                        var u32_SDP_value : u32 = 0;
                        var u8_SDP_value : u8 = 0;

                        for j : usize in 0 .. max_params_per_SID while (j < (self->hk_config_table[i].num_params as usize) && (do_hk_status is Success)) {

                            PID = self->hk_config_table[i].params_def[j];
                            var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

                            match item_type {
                                case u8_t => {
                                    self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                                    do_hk_status = append_u8_appdata_field(&mut b_tm_handler, u8_SDP_value);
                                }
                                case u32_t => {
                                    self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                                    do_hk_status = append_u32_appdata_field(&mut b_tm_handler, u32_SDP_value);
                                }
                                case NoValidPID => {
                                    do_hk_status = Failure(SDP_ITEM_TYPE_ERROR);
                                }
                            }
                    
                        }

                        var current_obt: MissionObt = {seconds = 0, finetime = 0};
                        self->pus_service_9.get_current_obt(&mut current_obt);

                        if (do_hk_status is Success){
                            close_tm(&mut b_tm_handler, 3, 25, tm_count, current_obt);
                            self->tm_channel.send_tm(b_tm_handler, &mut do_hk_status);
                        }
                         else {
                            //Generar TM[5,2]
                            self->pus_service_5.build_and_tx_tm_5_2(&mut do_hk_status);
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }
                        
                   
                        }
                        case None => {
                            *action_status = Failure(TM_POOL_ALLOC_FAILURE);

                        }
                    }       
                }
            }
        }

        return;
    }

    procedure update_params(&mut self) {

        for i : usize in 0 .. 5 {

            var random_noise : u32 = (rand_r(&mut (self->random_seed)) % 11) - 5;
            var data : u32 = 0;

            self->system_data_pool_u32.load_index(i, &mut data);
            data = data + random_noise;

           self->system_data_pool_u32.store_index(i, data);
        }

        return;
    }



};










