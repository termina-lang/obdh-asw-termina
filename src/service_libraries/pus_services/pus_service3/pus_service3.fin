/*
PUS SERVICE 3 : HOUSEKEEPING
*/

import service_libraries.tc_ccsds_pus_format;
import service_libraries.tm_ccsds_pus_format;
import service_libraries.pus_services.pus_service1.pus_service1;
import service_libraries.pus_services.pus_service3.pus_service3_help;
import service_libraries.serialize;
import resources.system_data_pool;
import resources.tm_channel;
import resources.tm_counter;




interface PUSS3Iface {

    procedure do_hk (&mut self, result : &mut Result);    
    procedure exec_tc(&mut self, tc_handler : &mut TCHandlerT, result: &mut Result);

};

resource class PUSService3 provides PUSS3Iface {

    hk_config_table : [HKConfiguration; max_num_of_SIDs];
    exec_tc_req_status : PS3ExecTCReqStatus;
    exec_tc_req_status_update : PS3ExecTCReqStatusUpdate;
    
    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;
    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;



    method get_SIDindex (&priv self) -> IndexFound {

        var index_found: IndexFound = {found = false, index = 0};

        for i : usize in 0 .. max_num_of_SIDs while (index_found.found == false) {

            if (self->exec_tc_req_status_update.tc_data.SID == self->hk_config_table[i].SID){

                index_found.found = true;
                index_found.index = i;
            }
        }
        return index_found;
    }

    method exec3_5TC(&priv self)-> PS3ExecTCReqStatus {

        var result : Result = Result::Ok;
        var next_status : PS3ExecTCReqStatus = PS3ExecTCReqStatus::Error;

        var tm_handler : Option<box TMHandlerT> = None;
                self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if(self->exec_tc_req_status_update.tc_data.N != 1) {

                    build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), 
                                                    (self->exec_tc_req_status_update.tc_data.packet_error_ctrl), self->exec_tc_req_status_update.tc_data.N, &mut result);
                    self->tm_channel.send_tm(b_tm_handler, &mut result);
                } 
                else {

                    self->exec_tc_req_status_update.index = self->get_SIDindex();

                    if (self->exec_tc_req_status_update.index.found){

                        
                        build_tm_1_3(&mut b_tm_handler, tm_count, &mut result);
                        self->tm_channel.send_tm(b_tm_handler, &mut result);
                        
                        
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].enabled = true;
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;
                        
                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                build_tm_1_7(&mut b_tm_handler2, tm_count2, &mut result);
                                self->tm_channel.send_tm(b_tm_handler2, &mut result);
                            }
                            case None => {
                                result = Result::Error;
                            }
                        }

                    } else {

                        build_tm_1_4_SID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), 
                                                    (self->exec_tc_req_status_update.tc_data.packet_error_ctrl), self->exec_tc_req_status_update.tc_data.SID, &mut result);
                        self->tm_channel.send_tm(b_tm_handler, &mut result);
                    }
                }
            }
            case None => {

            }
        }
 

        if (result is Result::Error){

            next_status = PS3ExecTCReqStatus::Error;

        } else {

            next_status = PS3ExecTCReqStatus::Exit;

        }

        return next_status;
    }

    method exec3_6TC(&priv self) -> PS3ExecTCReqStatus {

        var result : Result = Result::Ok;
        var next_status : PS3ExecTCReqStatus = PS3ExecTCReqStatus::Error;

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if(self->exec_tc_req_status_update.tc_data.N != 1) {

                    build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), 
                                                    (self->exec_tc_req_status_update.tc_data.packet_error_ctrl), self->exec_tc_req_status_update.tc_data.N, &mut result);
                    self->tm_channel.send_tm(b_tm_handler, &mut result);
                } 
                else {

                    self->exec_tc_req_status_update.index = self->get_SIDindex();

                    if (self->exec_tc_req_status_update.index.found){

                        
                        build_tm_1_3(&mut b_tm_handler, tm_count, &mut result);
                        self->tm_channel.send_tm(b_tm_handler, &mut result);
                        
                        
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].enabled = false;
                        self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;
                        
                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                build_tm_1_7(&mut b_tm_handler2, tm_count2, &mut result);
                                self->tm_channel.send_tm(b_tm_handler2, &mut result);
                            }
                            case None => {
                                result = Result::Error;
                            }
                        }

                    } else {

                        build_tm_1_4_SID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), 
                                                    (self->exec_tc_req_status_update.tc_data.packet_error_ctrl), self->exec_tc_req_status_update.tc_data.SID, &mut result);
                        self->tm_channel.send_tm(b_tm_handler, &mut result);
                    }
                }
            }
            case None => {

            }
        }

        

        if (result is Result::Error){

            next_status = PS3ExecTCReqStatus::Error;

        } else {

            next_status = PS3ExecTCReqStatus::Exit;

        }

        return next_status;
    }

    method exec3_31TC(&priv self) -> PS3ExecTCReqStatus {

        var result : Result = Result::Ok;
        var next_status : PS3ExecTCReqStatus = PS3ExecTCReqStatus::Error;

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

            match tm_handler {

                case Some(b_tm_handler) => {

                    var tm_count : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count);

                    if (self->exec_tc_req_status_update.tc_data.N != 1) {

                        build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), 
                                                        (self->exec_tc_req_status_update.tc_data.packet_error_ctrl), self->exec_tc_req_status_update.tc_data.N, &mut result);
                        self->tm_channel.send_tm(b_tm_handler, &mut result);

                    } else {

                        self->exec_tc_req_status_update.index = self->get_SIDindex();

                        if (self->exec_tc_req_status_update.index.found){


                            build_tm_1_3(&mut b_tm_handler, tm_count, &mut result);
                            self->tm_channel.send_tm(b_tm_handler, &mut result);
                              

                            self->hk_config_table[self->exec_tc_req_status_update.index.index].interval = self->exec_tc_req_status_update.tc_data.collection_interval;
                            self->hk_config_table[self->exec_tc_req_status_update.index.index].interval_control = 0;

                            var tm_handler2 : Option<box TMHandlerT> = None;
                            self->a_tm_handler_pool.alloc(&mut tm_handler2);

                            match tm_handler2 {

                                case Some(b_tm_handler2) => {

                                    var tm_count2 : u16 = 0 : u16;
                                    self->tm_counter.get_next_tm_count(&mut tm_count2);

                                    build_tm_1_7(&mut b_tm_handler2, tm_count2, &mut result);
                                    self->tm_channel.send_tm(b_tm_handler2, &mut result);
                                }
                                case None => {
                                    result = Result::Error;
                                }
                            }

                        } else {

                            build_tm_1_4_SID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), 
                                                        (self->exec_tc_req_status_update.tc_data.packet_error_ctrl), self->exec_tc_req_status_update.tc_data.SID, &mut result);
                            self->tm_channel.send_tm(b_tm_handler, &mut result);
                        }
                    }
                }
                case None => {

                    result = Result::Error;

                }
            }


        if (result is Result::Error){

            next_status = PS3ExecTCReqStatus::Error;

        } else {

            next_status = PS3ExecTCReqStatus::Exit;

        }

        return next_status;
    }

    viewer manage_short_pack_length_error(&self) -> PS3ExecTCReqStatus {

        var next_status : PS3ExecTCReqStatus = PS3ExecTCReqStatus::Error;
        var result : Result = Result::Ok;

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.tc_data.packet_id), 
                                            (self->exec_tc_req_status_update.tc_data.packet_error_ctrl), (self->exec_tc_req_status_update.tc_data.tc_num_bytes), &mut result);
                self->tm_channel.send_tm(b_tm_handler, &mut result);
            }
            case None => {
                result = Result::Error;
            }
        }

        if (result is Result::Error){

            next_status = PS3ExecTCReqStatus::Error;

        } else {

            next_status = PS3ExecTCReqStatus::Exit;

        }

        return next_status;
    }


    viewer build_tm_3_25(&self, p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, index: usize, result: &mut Result) {

        startup_tm(p_tm_handler);
        append_u16_appdata_field(p_tm_handler, self->hk_config_table[index].SID, result);

        var PID : u16 = 0;
        var u32_SDP_value : u32 = 0;
        var u8_SDP_value : u8 = 0;

        for j : usize in 0 .. max_params_per_SID while (j < (self->hk_config_table[index].num_params as usize)) {

            PID = self->hk_config_table[index].params_def[j];
            var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

            match item_type {
                case u8_t => {
                    self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                    append_u8_appdata_field(p_tm_handler, u8_SDP_value, result);
                }
                case u32_t => {
                    self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                    append_u32_appdata_field(p_tm_handler, u32_SDP_value, result);
                }
                case NoValidPID => {
                    *result = Result::Error;
                }
            }
    
        }

        close_tm(p_tm_handler, 3, 25, tm_seq_counter, result);


	    return;
    }


    viewer get_TC_params(&self, tc_handler : &mut TCHandlerT, subtype : &mut u8, result : &mut Result) -> PS3TCData {

        *subtype = tc_handler->df_header.subtype;

        var tc_data : PS3TCData = {
            packet_id = 0,
            packet_error_ctrl = 0,
            tc_num_bytes = 0,
            N = 0,
            SID = 0,
            collection_interval = 0
        };
        tc_data.packet_id = tc_handler->packet_header.packet_id;
        tc_data.packet_error_ctrl = tc_handler->packet_error_ctrl;
        tc_data.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
        *result = tc_handler_get_u8_appdata_field(tc_handler, &mut (tc_data.N));
        *result = tc_handler_get_u16_appdata_field(tc_handler, &mut (tc_data.SID));

        if (*subtype == 31) {

            *result = tc_handler_get_u8_appdata_field(tc_handler, &mut (tc_data.collection_interval));

        }


        return tc_data;

    }




    procedure exec_tc(&mut self, tc_handler : &mut TCHandlerT, result: &mut Result){

        var subtype : u8 = 0;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status is PS3ExecTCReqStatus::Exit == false) {

            match self->exec_tc_req_status {

                case Init => {

                    self->exec_tc_req_status_update.tc_data = self->get_TC_params(tc_handler, &mut subtype, result);
                    if (*result is Result::Error) {
                        self->exec_tc_req_status = self->manage_short_pack_length_error();
                    } else {
                        self->exec_tc_req_status = PS3ExecTCReqStatus::ExecTC;
                    }

                }
                case ExecTC => {

                    if (subtype == 5) {

                        self->exec_tc_req_status = self->exec3_5TC();

                    } else if (subtype == 6) {

                        self->exec_tc_req_status = self->exec3_6TC();

                    } else if (subtype == 31) {

                        self->exec_tc_req_status = self->exec3_31TC();

                    } else {

                        self->exec_tc_req_status = PS3ExecTCReqStatus::Error;
                    }

                }
                case Error => {

                    *result = Result::Error;
                    self->exec_tc_req_status = PS3ExecTCReqStatus::Exit;

                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }

        if(self->exec_tc_req_status is PS3ExecTCReqStatus::Exit){

            self->exec_tc_req_status = PS3ExecTCReqStatus::Init;
        }

        return;

    } 
    


    procedure do_hk (&mut self, result : &mut Result){

        for i : usize in 0 .. max_num_of_SIDs {

            if (self->hk_config_table[i].enabled == true){

                self->hk_config_table[i].interval_control = self->hk_config_table[i].interval_control + 1;

                if (self->hk_config_table[i].interval_control >= self->hk_config_table[i].interval){

                    self->hk_config_table[i].interval_control = 0;

                    var tm_handler : Option<box TMHandlerT> = None;
                    self->a_tm_handler_pool.alloc(&mut tm_handler);

                    match tm_handler {

                        case Some(b_tm_handler) => {

                        var tm_count : u16 = 0 : u16;
                        self->tm_counter.get_next_tm_count(&mut tm_count);

                        self->build_tm_3_25(&mut b_tm_handler, tm_count, i, result);
                        //Enviar telemetría a través del TM_CHANNEL
                        self->tm_channel.send_tm(b_tm_handler, result);
                   
                        }
                        case None => {
                            *result = Result::Error;

                        }
                    }       
                }
            }
        }

        return;
    }



};










