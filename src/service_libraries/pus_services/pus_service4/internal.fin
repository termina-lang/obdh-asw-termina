/**
 * @file pus_service4_help.fin
 * @brief Imports and definitions related to PUS Service 4.
 */

import service_libraries.pus_services.pus_service1;
import resources.tm_channel;
import resources.obt_manager;

constexpr max_num_of_stats : usize = 4;

struct StatsDef {
    min : u32;
    min_obt : MissionOBT;
    max : u32;
    max_obt : MissionOBT;
    mean_value : u32;
    samples : u32;
};

struct StatsConfig {
    defined : [bool; max_num_of_stats];
    PID : [u16; max_num_of_stats];
    start_time : [MissionOBT; max_num_of_stats];
};

struct PS4ExecTCReqStatusUpdate {
    packet_id : u16;
    packet_seq_ctrl : u16;
    flags_ack : u8;
    tc_num_bytes : usize;
    N: u8;
    PID: u16;
    valid_index : usize;
};

constexpr ps4_init_tc_req_status_update : PS4ExecTCReqStatusUpdate = {
    packet_id = 0,
    packet_seq_ctrl = 0,
    flags_ack = 0,
    tc_num_bytes = 0,
    N = 0,
    PID = 0,
    valid_index = 0
};

struct IndexStatus {
    index : usize;
    status : Status<i32>;
};


function build_tm_4_2(p_tm_handler : &mut TMHandler, tm_seq_counter : u16, index: usize, N : u8, stats_config_table : &StatsConfig, param_stats : &[StatsDef; max_num_of_stats], current_obt: MissionOBT) -> Status<i32> {

    var status : Status<i32> = Success;
    startup_tm(p_tm_handler);
    
    status = append_u32_appdata_field(p_tm_handler, stats_config_table->start_time[index].seconds);
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, current_obt.seconds);
    }
    if (status is Success) {
        status = append_u8_appdata_field(p_tm_handler, N);
    }
    if (status is Success) {
        status = append_u16_appdata_field(p_tm_handler, stats_config_table->PID[index]);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, param_stats[index].samples);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, param_stats[index].max);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, param_stats[index].max_obt.seconds);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, param_stats[index].min);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, param_stats[index].min_obt.seconds);
    }
    if (status is Success) {
        status = append_u32_appdata_field(p_tm_handler, param_stats[index].mean_value);
    }

    if(status is Success) {
        close_tm(p_tm_handler, 4, 2, tm_seq_counter, current_obt);
    }

    return status;
}
