/*
PUS SERVICE 4 : PARAMETER STATISTICS REPORTING
*/

import service_libraries.pus_services.pus_service4.pus_service4_help;

interface PUSS4Iface {

    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);
    procedure update_all_stats(&mut self);
    procedure startup(&mut self);
    
};

resource class PUSService4 provides PUSS4Iface {

    exec_tc_req_status : PSExecTCReqStatus;
    exec_tc_req_status_update : PS4ExecTCReqStatusUpdate;

    param_stats : [StatsDef; max_num_of_stats];
    stats_config_table : StatsConfig;

    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;

    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

    pus_service_9 : access PUSS9Iface;


    method get_PID_defined_stats_index (&priv self) -> Status<i32> {

        var status : Status<i32> = Failure(INVALID_PID_ERROR);

        for i : usize in 0 .. max_num_of_stats while (status is Success) {

            if(self->exec_tc_req_status_update.PID == self->stats_config_table.PID[i]) {

                if (self->stats_config_table.defined[i] == true) {

                    if(sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID)) {

                        self->exec_tc_req_status_update.valid_index = i;
                        status = Success;
                        
                    } else {
                        self->stats_config_table.defined[i] = false;
                    
                    }
                }

            }
        }
        return status;
    }

    viewer get_free_index (&self, index: &mut usize) -> Status<i32> {

        var status: Status<i32> = Failure(NO_FREE_STATS_INDEX_ERROR);

        for i : usize in 0 .. max_num_of_stats while (status is Failure) {

            if ((self->stats_config_table.defined[i] == false) || (sys_data_pool_is_valid_PID(self->stats_config_table.PID[i])) == false) {

                *index = i; 
                status = Success;
            }
        }
        return status;
    }

    viewer is_stats_index_defined(&self, index: usize) -> bool {

        var is_defined: bool = false;

        if(index < max_num_of_stats){

            if (self->stats_config_table.defined[index] == true) {

                if(sys_data_pool_is_valid_PID(self->stats_config_table.PID[index])) {

                    is_defined = true;

                } else {

                }
            }
        }

        return is_defined;
    }


    method add_PID_stats (&priv self) -> Status<i32> {
        
        var status : Status<i32> = Success;

        status = self->get_PID_defined_stats_index();

        if(status is Success) {

            var index : usize = 0;
            status = self->get_free_index(&mut index);
            self->exec_tc_req_status_update.valid_index = index;
        }

        if(status is Success) {

            var PID_index: usize = self->exec_tc_req_status_update.valid_index;

            self->stats_config_table.defined[PID_index] = true;
            self->stats_config_table.PID[PID_index] = self->exec_tc_req_status_update.PID;

            self->param_stats[PID_index].samples = 0;
            var current_obt : MissionObt = {seconds = 0, finetime = 0};
            self->pus_service_9.get_current_obt(&mut current_obt);
            self->stats_config_table.start_time[PID_index] = current_obt;
            
        }

        return status;
    }

    method delete_PID_stats (&priv self) -> Status<i32> {

        var status : Status<i32> = Success;
        var PID_index: usize = 0;
        status = self->get_PID_defined_stats_index();

        if (status is Success) {
            self->stats_config_table.defined[PID_index] = false;
        }

        return status;
        
    }

    method delete_all_stats (&priv self){

        for i : usize in 0 .. max_num_of_stats {
            self->stats_config_table.defined[i] = false;
        }

        return;
        
    }

    viewer build_tm_4_2(&self, p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, index: usize, status : &mut Status<i32>) {

        startup_tm(p_tm_handler);

        var current_obt : MissionObt = {seconds = 0, finetime = 0};
        self->pus_service_9.get_current_obt(&mut current_obt);
        
        append_u32_appdata_field(p_tm_handler, self->stats_config_table.start_time[index].seconds, status);
        append_u32_appdata_field(p_tm_handler, current_obt.seconds, status);
        append_u8_appdata_field(p_tm_handler, self->exec_tc_req_status_update.N, status);
        append_u16_appdata_field(p_tm_handler, self->stats_config_table.PID[index], status);
        append_u32_appdata_field(p_tm_handler, self->param_stats[index].samples, status);
        append_u32_appdata_field(p_tm_handler, self->param_stats[index].max, status);
        append_u32_appdata_field(p_tm_handler, self->param_stats[index].max_obt.seconds, status);
        append_u32_appdata_field(p_tm_handler, self->param_stats[index].min, status);
        append_u32_appdata_field(p_tm_handler, self->param_stats[index].min_obt.seconds, status);
        append_u32_appdata_field(p_tm_handler, self->param_stats[index].mean_value, status);

        if(*status is Success) {
            close_tm(p_tm_handler, 4, 2, tm_seq_counter, current_obt);
        }

        return;
    }

// TC[4,1] : Report the parameter statistics
    method exec4_1TC(&priv self) -> PSExecTCReqStatus {

        var ack_enabled : bool = false;
        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {
            case Some(b_tm_handler)=> {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_3(&mut b_tm_handler, tm_count, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                if (ack_enabled) {

                    if (next_status.status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                    }
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                       
                    }

                } else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                }
               
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        for i : usize in 0 .. max_num_of_stats while (next_status.status is Success) {

            if (self->stats_config_table.defined[i] == true) {

                var tm_handler2 : Option<box TMHandlerT> = None;
                self->a_tm_handler_pool.alloc(&mut tm_handler2);

                match tm_handler2 {

                    case Some(b_tm_handler2) => {

                        var tm_count : u16 = 0 : u16;
                        self->tm_counter.get_next_tm_count(&mut tm_count);

                        self->build_tm_4_2(&mut b_tm_handler2, tm_count, i, &mut next_status.status);

                        if (next_status.status is Success){

                            self->tm_channel.send_tm(b_tm_handler2, &mut next_status.status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler2);
                        
                        }
                        
                        //reset_stats_index
                        self->param_stats[i].samples = 0;
                        var current_obt_update : MissionObt = {seconds = 0, finetime = 0};
                        self->pus_service_9.get_current_obt(&mut current_obt_update);
                        self->stats_config_table.start_time[i] = current_obt_update;
                    }
                    case None => {
                        next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                    }
                }
            }
        }

        if (next_status.status is Success) {

            var tm_handler3 : Option<box TMHandlerT> = None;
            self->a_tm_handler_pool.alloc(&mut tm_handler3);

            match tm_handler3 {

                case Some(b_tm_handler3) => {

                    var tm_count3 : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count3);

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_7(&mut b_tm_handler3, tm_count3, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                    if (ack_enabled) {

                        if (next_status.status is Success){

                            self->tm_channel.send_tm(b_tm_handler3, &mut next_status.status);

                        }
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler3);
                
                        }

                    } else {
                        self->a_tm_handler_pool.free(b_tm_handler3);
                    }
                }
                case None => {
                    next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                }
            }

        }
        else {
            //TODO TM/TC Memory Fail -> EEPROM, Recov Action -> Reset -> Reported in Reboot
            //Generar TM[5,2]
        }


        return next_status;
    }

// TC[4,6] : Add or update parameter statistics definitions
    method exec4_6TC(&priv self) -> PSExecTCReqStatus {

        var ack_enabled : bool = false;
        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 self->exec_tc_req_status_update.N, current_obt, &mut next_status.status);

                    if (next_status.status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                    }
                    
                }
                else {

                    if(sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID)) {

                        next_status.status = self->add_PID_stats();

                        if (next_status.status is Success) {

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            build_tm_1_3(&mut b_tm_handler, tm_count, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                            if (ack_enabled) {

                                if (next_status.status is Success){

                                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                                }
                                else {
                                    self->a_tm_handler_pool.free(b_tm_handler);
                                
                                }

                            } else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }
                           
                            var tm_handler2 : Option<box TMHandlerT> = None;
                            self->a_tm_handler_pool.alloc(&mut tm_handler2);

                            match tm_handler2 {

                                case Some(b_tm_handler2) => {

                                    var tm_count2 : u16 = 0 : u16;
                                    self->tm_counter.get_next_tm_count(&mut tm_count2);

                                    self->pus_service_9.get_current_obt(&mut current_obt);
                                    build_tm_1_7(&mut b_tm_handler2, tm_count2, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);
                                    
                                    if (ack_enabled) {

                                        if (next_status.status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut next_status.status);

                                        }
                                        else {
                                            self->a_tm_handler_pool.free(b_tm_handler2);
                                    
                                        }

                                    } else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }
                                }
                                case None => {
                                    next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                                }
                            }


                        } else {

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            build_tm_1_8_not_free_stats_config(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                             self->exec_tc_req_status_update.PID, current_obt, &mut next_status.status);

                            if (next_status.status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                
                            }
                         
                        }

                    }
                    else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_4_PID_not_valid (&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                             self->exec_tc_req_status_update.PID, current_obt, &mut next_status.status);

                        if (next_status.status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);

                        }          

                    }
                }
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

// TC[4,7] : Delete parameter statistics definitions
    method exec4_7TC(&priv self) -> PSExecTCReqStatus {

        var ack_enabled : bool = false;
        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                     self->exec_tc_req_status_update.N, current_obt, &mut next_status.status);

                    if (next_status.status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                    
                    }
                    
                }
                else {

                    if(sys_data_pool_is_valid_PID(self->exec_tc_req_status_update.PID)) {

                        next_status.status = self->delete_PID_stats();

                        if (next_status.status is Success) {

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            build_tm_1_3(&mut b_tm_handler, tm_count, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                            if (ack_enabled) {

                                if (next_status.status is Success){

                                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                                }
                                else {
                                    self->a_tm_handler_pool.free(b_tm_handler);
                        
                                }

                            } else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                            }

                            var tm_handler2 : Option<box TMHandlerT> = None;
                            self->a_tm_handler_pool.alloc(&mut tm_handler2);

                            match tm_handler2 {

                                case Some(b_tm_handler2) => {

                                    var tm_count2 : u16 = 0 : u16;
                                    self->tm_counter.get_next_tm_count(&mut tm_count2);

                                    self->pus_service_9.get_current_obt(&mut current_obt);
                                    build_tm_1_7(&mut b_tm_handler2, tm_count2, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                                    if (ack_enabled) {

                                        if (next_status.status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut next_status.status);

                                        }
                                        else {
                                            self->a_tm_handler_pool.free(b_tm_handler2);
                    
                                        }

                                    } else {
                                        
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                        
                                    }
                                    
                                }
                                case None => {
                                    next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                                }
                            }


                        } else {

                            self->pus_service_9.get_current_obt(&mut current_obt);
                            build_tm_1_4_PID_stats_undefined(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                             self->exec_tc_req_status_update.PID, current_obt, &mut next_status.status);

                            if (next_status.status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                            } 
                            else {
                                self->a_tm_handler_pool.free(b_tm_handler);
                    
                            }

                        }


                    }
                    else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_4_PID_not_valid (&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                     self->exec_tc_req_status_update.PID, current_obt, &mut next_status.status);

                        if (next_status.status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                    
                        }
                    }
                }
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }
    


    viewer manage_short_pack_length_error(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                             (self->exec_tc_req_status_update.tc_num_bytes), current_obt, &mut next_status.status);

                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                 
                }
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

    viewer manage_error_in_acceptance(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                   
                }
                
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

    viewer manage_tm_limit_app_data_reached(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                    
                }
                
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }


    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>){

        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status.exec_tc_status is PSReqStatus::Exit == false) {

            match self->exec_tc_req_status.exec_tc_status {

                case Init => {

                    self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.packet_error_ctrl = tc_handler->packet_error_ctrl;
                    self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
                    self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;

                    if (subtype == 6 || subtype == 7) {

                        self->exec_tc_req_status.status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));
                        self->exec_tc_req_status.status = tc_handler_get_u16_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.PID));
                    }

                    if (self->exec_tc_req_status.status is Success) {

                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::ExecTC;
                        
                    } else {

                        self->exec_tc_req_status.status = Failure(ACCEPTANCE_ERROR);
                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::Exit;
                        
                    }

                }
                case ExecTC => {

                    if (subtype == 1) {

                        self->exec_tc_req_status = self->exec4_1TC();

                    } else if (subtype == 6) {

                        self->exec_tc_req_status = self->exec4_6TC();

                    } else if (subtype == 7) {

                        self->exec_tc_req_status = self->exec4_7TC();

                    } else {

                        self->exec_tc_req_status.status = Failure(ACCEPTANCE_ERROR);
                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::Exit;
                    }
                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }

        match self->exec_tc_req_status.status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    //Generar TM[1,4] error en la aceptación
                    self->exec_tc_req_status = self->manage_error_in_acceptance();
                        
                } else if (error_code == BUILD_TM_ERROR) {

                    //Generar TM[1,8] error en la generación de TM
                    self->exec_tc_req_status = self->manage_tm_limit_app_data_reached();
                    
                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->exec_tc_req_status = self->manage_short_pack_length_error();

                } else if (error_code == NO_FREE_STATS_INDEX_ERROR) {

                    //TO DO: Already managed error?
                    
                } else {
                    
                    *action_status = Failure(error_code);
                }
                
            }  
        }

        self->exec_tc_req_status = {
                    exec_tc_status = PSReqStatus::Init,
                    status = Success
                };

        return;
    
    }

    viewer SDP_param_higher_than_limit(&self, pid_index : usize) -> bool {

        var is_higher : bool = false;
        var PID : u16 = self->stats_config_table.PID[pid_index];
        var u8_SDP_value : u8 = 0;
        var u32_SDP_value : u32 = 0;

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

        match item_type {
            case u8_t => {
                self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                if ((u8_SDP_value as u32) > self->param_stats[pid_index].max) {
                    is_higher = true;
                }
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                if (u32_SDP_value > self->param_stats[pid_index].max) {
                    is_higher = true;
                }
            }
            case NoValidPID => {
                //Error
            }
        }

        return is_higher;
    }


    viewer SDP_param_lower_than_limit(&self, pid_index : usize) -> bool {

        var is_lower : bool = false;
        var PID : u16 = self->stats_config_table.PID[pid_index];
        var u8_SDP_value : u8 = 0;
        var u32_SDP_value : u32 = 0;

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

        match item_type {
            case u8_t => {
                self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                if ((u8_SDP_value as u32) < self->param_stats[pid_index].min) {
                    is_lower = true;
                }
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                if (u32_SDP_value < self->param_stats[pid_index].min) {
                    is_lower = true;
                }
            }
            case NoValidPID => {
                //Error
            }
        }

        return is_lower;
    }

    viewer get_data_pool_item(&self, PID: u16 ) -> u32 {

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);
        var SDP_value : u32 = 0;

        match item_type {
            case u8_t => {
                var aux_value: u8 = 0;
                self->system_data_pool_u8.load_index(PID as usize, &mut aux_value);
                SDP_value = aux_value as u32;
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut SDP_value);
            }
            case NoValidPID => {
                //Error
            }
        }
        return SDP_value;

    }


    viewer SDP_get_mean(&self, pid_index : usize) -> u32 {

        var PID : u16 = self->stats_config_table.PID[pid_index];
        var u8_SDP_value : u8 = 0;
        var u32_SDP_value : u32 = 0;
        var mean_value : u32 = 0;

        var item_type : DataPoolItemType = sys_data_pool_get_item_type(PID);

        match item_type {
            case u8_t => {
                self->system_data_pool_u8.load_index(PID as usize, &mut u8_SDP_value);
                mean_value = ((self->param_stats[pid_index].mean_value * self->param_stats[pid_index].samples) + (u8_SDP_value as u32)) / (self->param_stats[pid_index].samples + 1);   
            }
            case u32_t => {
                self->system_data_pool_u32.load_index(PID as usize, &mut u32_SDP_value);
                mean_value = ((self->param_stats[pid_index].mean_value * self->param_stats[pid_index].samples) + u32_SDP_value) / (self->param_stats[pid_index].samples + 1);
            }
            case NoValidPID => {
                //Error
            }
        }

        return mean_value;
    }

    procedure update_all_stats(&mut self) {

        for i : usize in 0 .. max_num_of_stats {

            if(self->is_stats_index_defined(i) == true) {

                var PID : u16 = self->stats_config_table.PID[i];

                if(self->param_stats[i].samples > 0){

                    if(self->SDP_param_higher_than_limit(i) == true) {

                        var system_data_pool_item : u32 = self->get_data_pool_item(PID);
                        self->param_stats[i].max = system_data_pool_item;
                        var current_time : MissionObt = {
                            seconds = 0,
                            finetime = 0
                        };
                        self->pus_service_9.get_current_obt(&mut current_time);
                        self->param_stats[i].max_obt = current_time;


                    } else if (self->SDP_param_lower_than_limit(i) == true) {

                        var system_data_pool_item : u32 = self->get_data_pool_item(PID);
                        self->param_stats[i].min = system_data_pool_item;
                        var current_time : MissionObt = {
                            seconds = 0,
                            finetime = 0
                        };
                        self->pus_service_9.get_current_obt(&mut current_time);
                        self->param_stats[i].min_obt = current_time;

                    } else {

                    }

                    self->param_stats[i].mean_value = self->SDP_get_mean(i);

                }
                else {

                    var system_data_pool_item : u32 = self->get_data_pool_item(PID);
                    self->param_stats[i].max = system_data_pool_item;
                    self->param_stats[i].min = system_data_pool_item;
                    self->param_stats[i].mean_value = system_data_pool_item;
                    var current_time : MissionObt = {
                        seconds = 0,
                        finetime = 0
                    };
                    self->pus_service_9.get_current_obt(&mut current_time);
                    self->param_stats[i].max_obt = current_time;
                    self->param_stats[i].min_obt = current_time;
                    
                    
                }

                self->param_stats[i].samples = self->param_stats[i].samples + 1;

                
            } else {
                
                self->stats_config_table.defined[i] = false;
                
            }


        }

        return;
    }


    procedure startup(&mut self){

        for i : usize in 0 .. max_num_of_stats {

            if(self->is_stats_index_defined(i) == true) {

                self->param_stats[i].samples = 0;
                var current_obt : MissionObt = {seconds = 0, finetime = 0};
                self->pus_service_9.get_current_obt(&mut current_obt);
                self->stats_config_table.start_time[i] = current_obt;

            }
            else {
                self->stats_config_table.defined[i] = false;
            }
            
        }

        return;
    }

};