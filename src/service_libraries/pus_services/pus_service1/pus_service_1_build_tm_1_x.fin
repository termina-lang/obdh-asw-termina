import service_libraries.pus_services.pus_service1.pus_service1_help;

//Error codes for TM[1,4] packets
const TM_1_4_TC_X_Y_TC_SHORT_PACK_LENGTH 		: u8 = 1;
const TM_1_4_TC_X_Y_TC_NOT_VALID_NUM_OF_INSTR 	: u8 = 2;
const TM_1_4_TC_2_X_DEVICE_NOT_VALID  			: u8 = 3;
const TM_1_4_TC_2_X_DEVICE_ADDRESS_NOT_VALID 	: u8 = 4;
const TM_1_4_TC_3_X_INVALID_SID 				: u8 = 5;
const TM_1_4_TC_4_7_PID_STATS_UNDEFINED			: u8 = 6;
const TM_1_4_TC_5_X_INVALID_EV_ID				: u8 = 7;
const TM_1_4_TC_6_X_INVALID_MEMORY_ADDRESS		: u8 = 8;
const TM_1_4_TC_6_X_MEMORY_ID_READ_ONLY			: u8 = 9;
const TM_1_4_TC_6_X_OUT_OF_MEMORY_ID_LIMITS		: u8 = 10;
const TM_1_4_TC_11_X_SCHED_TC_REJECTED 			: u8 = 11;
const TM_1_4_TC_11_X_INVALID_SCHED_TIME			: u8 = 12;
const TM_1_4_TC_12_X_PMON_UNDEFINED				: u8 = 13;
const TM_1_4_TC_12_X_PMON_DEFINED				: u8 = 14;
const TM_1_4_TC_12_X_PMON_ENABLED				: u8 = 15;
const TM_1_4_TC_12_X_INVALID_PMONID				: u8 = 16;
const TM_1_4_TC_12_X_INVALID_PMON_DEFINITION	: u8 = 17;
const TM_1_4_TC_15_X_INVALID_PACKET_STORE		: u8 = 18;
const TM_1_4_TC_19_X_EV_ACTION_IS_ENABLED  		: u8 = 19;
const TM_1_4_TC_19_1_EV_ACTION_REJECTED 		: u8 = 20;
const TM_1_4_TC_19_X_EV_ACTION_NOT_DEFINED      : u8 = 21;
const TM_1_4_TC_20_X_INVALID_PID 				: u8 = 22;
const TM_1_4_TC_20_X_PID_READ_ONLY_VIA_TC 		: u8 = 23;

//Error codes for TM[1,8] packets
const TM_1_8_TM_X_Y_TM_EXCEED_LIMIT_APPDATA	   : u8 = 1;
const TM_1_8_TM_2_1_DEV_COMMAND_EXEC_ERROR	   : u8 = 2;
const TM_1_8_TC_4_1_NOT_FREE_PID_STATS_CONFIG  : u8 = 3;
const TM_1_8_TC_6_X_MEM_ACCESS_FAIL			   : u8 = 4;
const TM_1_8_TC_11_X_SCHED_TC_POOL_EMPTY	   : u8 = 5;
const TM_1_8_TC_19_1_MAX_EV_ACTIONS_REACHED    : u8 = 6;


function build_tm_1_1(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, 
				tc_packet_id: u16, tc_packet_error_ctrl: u16, current_obt: MissionObt, result : &mut MyResult) {

    startup_tm(p_tm_handler);
	append_u16_appdata_field(p_tm_handler, tc_packet_id, result);
	append_u16_appdata_field(p_tm_handler, tc_packet_error_ctrl, result);
	close_tm(p_tm_handler, 1, 1, tm_seq_counter, current_obt);	

	return;
}

function build_tm_1_2 (status : &TCStatus, p_tm_handler : &mut TMHandlerT,
		tm_seq_counter : u16, tc_handler: &TCHandlerT, current_obt: MissionObt, result : &mut MyResult) {

	var error_code : u8 = 0;

	startup_tm(p_tm_handler);
	append_u16_appdata_field(p_tm_handler, tc_handler->packet_header.packet_id, result);
	append_u16_appdata_field(p_tm_handler, tc_handler->packet_error_ctrl, result);

	match ((*status).error_code) {

		case CRCError => {

			error_code = 2;
			append_u8_appdata_field(p_tm_handler, error_code, result);
			var calculated_crc : u16 = cal_crc_16(&(tc_handler->tc_descriptor.tc_bytes), (tc_handler->tc_descriptor.tc_num_bytes - 2));
			append_u16_appdata_field(p_tm_handler, tc_handler->packet_error_ctrl, result);
			append_u16_appdata_field(p_tm_handler, calculated_crc, result);
			
		}
		case APIDError => {

			error_code = 3;
			append_u8_appdata_field(p_tm_handler, error_code, result);
				
		}
		case SourceIDError => {

			error_code = 4;
			append_u8_appdata_field(p_tm_handler, error_code, result);
			append_u16_appdata_field(p_tm_handler, tc_handler->df_header.sourceID as u16, result);
			
		}
		case TypeError => {

			error_code = 5;
			append_u8_appdata_field(p_tm_handler, error_code, result);
			
		}
		case SubTypeError => {

			error_code = 6;
			append_u8_appdata_field(p_tm_handler, error_code, result);
		}
		case Undefined => {

			//error
		}
	}

	close_tm(p_tm_handler, 1, 2, tm_seq_counter, current_obt);

	return;
}


function build_tm_1_3(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16,
							 current_obt: MissionObt, result : &mut MyResult) {
	
	startup_tm(p_tm_handler);
	close_tm(p_tm_handler, 1, 3, tm_seq_counter, current_obt);

	return;
}


function build_tm_1_4_short_pack_length(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, tc_bytes: usize, current_obt : MissionObt, result : &mut MyResult) {

	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	var failure_data : u16 = tc_bytes as u16;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_X_Y_TC_SHORT_PACK_LENGTH, failure_data, current_obt, result);	


	return;
}

function build_tm_1_4_num_of_instr_not_valid(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, N : u8, current_obt : MissionObt, result : &mut MyResult) {

	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u8_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_X_Y_TC_NOT_VALID_NUM_OF_INSTR, N, current_obt, result);	

	return;
}

function build_tm_1_4_device_address_not_valid(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, device_address : u32, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u32_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_2_X_DEVICE_ADDRESS_NOT_VALID, device_address, current_obt, result);

	return;
}

function build_tm_1_4_SID_not_valid(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, SID : u16, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_3_X_INVALID_SID, SID, current_obt, result);

	return;
}

function build_tm_1_4_mem_address_not_valid (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, mem_id : u8, mem_address : u32, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u8_u32_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_6_X_INVALID_MEMORY_ADDRESS, mem_id, mem_address, current_obt, result);

	return;
}

function build_tm_1_4_mem_id_read_only (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, mem_id : u8, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u8_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_6_X_MEMORY_ID_READ_ONLY, mem_id, current_obt, result);

	return;
}

function build_tm_1_4_EvID_not_valid (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
			 tc_packet_error_ctrl: u16, EvID : u16, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_5_X_INVALID_EV_ID, EvID, current_obt, result);

	return;
}

function build_tm_1_4_PID_not_valid (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, PID : u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_20_X_INVALID_PID, PID, current_obt, result);

	return;
}

function build_tm_1_4_PMON_undefined (p_tm_handler : &mut TMHandlerT,	tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, PMONID : u16, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_12_X_PMON_UNDEFINED, PMONID, current_obt, result);

	return;
}

function build_tm_1_4_PMON_defined (p_tm_handler : &mut TMHandlerT,	tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, PMONID : u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_12_X_PMON_DEFINED, PMONID, current_obt, result);

	return;
}

function build_tm_1_4_PMON_enabled (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, PMONID : u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_12_X_PMON_ENABLED, PMONID, current_obt, result);

	return;
}

function build_tm_1_4_PMONID_invalid (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, PMONID : u16, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_12_X_INVALID_PMONID, PMONID, current_obt, result);

	return;
}

function build_tm_1_4_PMON_definition_invalid (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, PMONID : u16, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_12_X_INVALID_PMON_DEFINITION, PMONID, current_obt, result);

	return;
}

function build_tm_1_4_ev_action_enabled (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, event_ID : u16, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_19_X_EV_ACTION_IS_ENABLED, event_ID, current_obt, result);

	return;
}

function build_tm_1_4_ev_action_rejected (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, event_ID : u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_19_1_EV_ACTION_REJECTED, event_ID, current_obt, result);

	return;
}

function build_tm_1_4_ev_action_undefined (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, event_ID : u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_19_X_EV_ACTION_NOT_DEFINED, event_ID, current_obt, result);

	return;
}

function build_tm_1_4_PID_stats_undefined (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
		tc_packet_error_ctrl: u16, PID : u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_4_7_PID_STATS_UNDEFINED, PID, current_obt, result);

	return;
}

function build_tm_1_4_PID_read_only_via_TC (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, PID : u16, current_obt: MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecStart;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_4_TC_20_X_PID_READ_ONLY_VIA_TC, PID, current_obt, result);

	return;
}

function build_tm_1_7(p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, 
							current_obt: MissionObt, result : &mut MyResult) {

	close_tm(p_tm_handler, 1, 7, tm_seq_counter, current_obt);

	return;
}


function build_tm_1_8_max_ev_actions_defined (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
			tc_packet_error_ctrl: u16, evID: u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_8_TC_19_1_MAX_EV_ACTIONS_REACHED, evID, current_obt, result);

	return;
}


function build_tm_1_8_tm_exceed_limit_appdata (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
	
	build_tm_1_X_no_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_8_TM_X_Y_TM_EXCEED_LIMIT_APPDATA, current_obt, result);

	return;
}

function build_tm_1_8_device_command_exec_error (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
			 tc_packet_error_ctrl: u16, on_off_command : u32, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
	
	build_tm_1_X_u32_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_8_TM_2_1_DEV_COMMAND_EXEC_ERROR, on_off_command, current_obt, result);

	return;
}


function build_tm_1_8_not_free_stats_config (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16, 
			tc_packet_error_ctrl: u16, PID : u16, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
	
	build_tm_1_X_u16_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_8_TC_4_1_NOT_FREE_PID_STATS_CONFIG, PID, current_obt, result);

	return;
}

function build_tm_1_8_mem_access_error (p_tm_handler : &mut TMHandlerT, tm_seq_counter : u16, tc_packet_id : u16,
		 tc_packet_error_ctrl: u16, mem_ID: u8, current_obt : MissionObt, result : &mut MyResult) {
	
	var verify_stage : TCVerifyStage = TCVerifyStage::ExecCompletion;
	
	build_tm_1_X_u8_failure_data(p_tm_handler, tm_seq_counter, tc_packet_id, tc_packet_error_ctrl, verify_stage,
	    TM_1_8_TC_6_X_MEM_ACCESS_FAIL, mem_ID, current_obt, result);

	return;
}









