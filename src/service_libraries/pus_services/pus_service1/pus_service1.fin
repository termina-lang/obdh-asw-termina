/*
PUS SERVICE 1 : REQUEST VERIFICATION SERVICE
*/

import service_libraries.pus_services.pus_service1.pus_service1_help;


//Error codes for TM[1,8] packets
const TM_1_8_TC_3_X_invalid_SID : u16 = 1;
const TM_1_8_TC_20_X_invalid_PID : u16 = 2;
const TM_1_8_TC_5_X_unknown_RID : u16 = 3;
const TM_1_8_TC_12_X_PMONID_undefined : u16 = 4;
const TM_1_8_TC_12_X_PMONID_defined : u16 = 5;
const TM_1_8_TC_12_X_invalid_PMONID : u16 = 6;
const TM_1_8_TC_19_X_ev_action_is_enabled : u16 = 8;
const TM_1_8_TC_19_1_max_ev_actions_reached  : u16 = 9;
const TM_1_8_TC_19_1_ev_action_rejected  : u16 = 10;
const TM_1_8_TC_19_X_ev_action_not_defined : u16 = 11;
const TM_1_8_TC_2_X_device_not_valid : u16 = 12;


// Will I be using this function for action TCs???
function handle_tc(tc_descriptor: &TCDescriptorT) -> TCExecutionCtrl {

	var type : u8 = get_type(&(tc_descriptor->tc_bytes));
	var exec_ctrl : TCExecutionCtrl = TCExecutionCtrl::ExecCtrlReboot;

	if (type == 9 || type == 17) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlPrioTC;

	} else if (type == 3 || type == 5 || type == 12 || type == 19){

		exec_ctrl = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

	} else if (type == 20) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlBKGTC;

	} else if (type == 128) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlReboot;

	} else {
		// I shouldn't arrive to this branch, acceptation error
	}

	return exec_ctrl;
} 

function try_tc_acceptation(tc_descriptor: &TCDescriptorT) -> TCStatus {

	var status : TCStatus = {acceptation_status = TCAcceptationStatus::Undefined,
								execution_status = TCExecutionCtrl::Undefined,
								error_code = TCErrorType::Undefined};

	if (false == is_crc_valid(tc_descriptor)) {

		status.acceptation_status = TCAcceptationStatus::Rejected;
		status.error_code = TCErrorType::CRCError;

	} else if (false == is_apid_valid(tc_descriptor)) {

		status.acceptation_status = TCAcceptationStatus::Rejected;
		status.error_code = TCErrorType::APIDError;

	} else if (false == is_sourceID_valid(tc_descriptor)) {

		status.acceptation_status = TCAcceptationStatus::Rejected;
		status.error_code = TCErrorType::SourceIDError;

	} else {

		var type : u8 = get_type(&(tc_descriptor->tc_bytes));
		var subtype : u8 = get_subtype(&(tc_descriptor->tc_bytes));

		if (9 : u8 == type) {
		
			if (129 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (17 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (3 : u8 == type) {
		
			if (5 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}

            else if (6 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

            else if (31 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

			else {

				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (20 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlBKGTC;

			}

            else if (3 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlBKGTC;
            }

			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (5 : u8 == type) {
		
			if (5 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}

            else if (6 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (12 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}

            else if (5 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

			else if (6 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (19 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}

            else if (2 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

			else if (4 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

			else if (5 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
                status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;
            }

			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}
        } else if (128 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlReboot;

			} else {

				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}
        } else {

			status.acceptation_status = TCAcceptationStatus::Rejected;
			status.error_code = TCErrorType::TypeError;

		}

	}

	return status;
}




function build_tm_1_1(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16, tc_descriptor: &TCDescriptorT) {
	
	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length, 1, 1);	

	return;
}


function build_tm_1_2 (status : &TCStatus, p_tm_descriptor : &mut TMDescriptorT,
		tm_seq_counter : u16, tc_descriptor: &TCDescriptorT) {

	var error_code : u16 = 0;

	match ((*status).error_code) {

		case CRCError => {

			build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 6, 1, 2);
			error_code = 2;
			var packet_error_ctrl : u16 = get_packet_seq_ctrl(&(tc_descriptor->tc_bytes));
			var calculated_crc : u16 = cal_crc_16(&(tc_descriptor->tc_bytes), (tc_descriptor->tc_num_bytes - 2));
			serialize_uint16(packet_error_ctrl, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);
			serialize_uint16(calculated_crc, &mut p_tm_descriptor->tm_bytes[18 : usize .. 20 : usize]);
			
		}
		case APIDError => {

			build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 2, 1, 2);
			error_code = 3;
			
		}
		case SourceIDError => {

			build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 2);
			error_code = 4;
			var sourceID : u8 = get_source_id(&(tc_descriptor->tc_bytes));
			serialize_uint16(sourceID as u16, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);
			
		}
		case TypeError => {

			build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 2, 1, 2);
			error_code = 5;
			
		}
		case SubTypeError => {

			build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 2, 1, 2);
			error_code = 6;
		}
		case Undefined => {

			//error
		}
	}

	serialize_uint16(error_code ,&mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);

	return;
}



function build_tm_1_7(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length, 1, 7);

	return;
}


function build_tm_1_8_tc_3_X_SIDnotvalid(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					SID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_3_X_invalid_SID, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(SID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}



function build_tm_1_8_tc_20_X_PIDnotvalid(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					PID : u16,  tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_20_X_invalid_PID , &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(PID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}


function build_tm_1_8_tc_5_X_RIDunknown(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					RID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_5_X_unknown_RID, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(RID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}


function build_tm_1_8_tc_12_X_PMONIDundefined(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					PMONID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_12_X_PMONID_undefined, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(PMONID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}

function build_tm_1_8_tc_12_X_PMONIDdefined(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					PMONID : u16, tc_descriptor: &TCDescriptorT) {
	
	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_12_X_PMONID_defined, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(PMONID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}


function build_tm_1_8_tc_12_X_PMONIDnotvalid(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					PMONID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_12_X_invalid_PMONID , &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(PMONID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}


function build_tm_1_8_tc_19_X_event_action_enabled(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					event_ID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_19_X_ev_action_is_enabled , &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(event_ID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}



function build_tm_1_8_tc_19_1_max_event_actions(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					event_ID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_19_1_max_ev_actions_reached, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(event_ID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}


function build_tm_1_8_tc_19_1_event_action_rejected(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					event_ID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_19_1_ev_action_rejected, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(event_ID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}	

    
function build_tm_1_8_tc_19_X_event_action_not_defined(p_tm_descriptor : &mut TMDescriptorT,
					tm_seq_counter : u16,
					event_ID : u16, tc_descriptor: &TCDescriptorT) {

	build_tm(p_tm_descriptor, tm_seq_counter, tc_descriptor, base_length + 4, 1, 8);

	serialize_uint16(TM_1_8_TC_19_X_ev_action_not_defined, &mut p_tm_descriptor->tm_bytes[14 : usize .. 16 : usize]);
	serialize_uint16(event_ID, &mut p_tm_descriptor->tm_bytes[16 : usize .. 18 : usize]);

	return;
}	