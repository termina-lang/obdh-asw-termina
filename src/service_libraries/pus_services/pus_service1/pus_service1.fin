/*
PUS SERVICE 1 : REQUEST VERIFICATION SERVICE
*/

import service_libraries.pus_services.pus_service1.pus_service1_help;
import service_libraries.pus_services.pus_service1.pus_service_1_build_tm_1_x;

// Will I be using this function for action TCs???
function handle_tc(tc_descriptor: &TCDescriptorT) -> TCExecutionCtrl {

	var type : u8 = get_type(&(tc_descriptor->tc_bytes));
	var exec_ctrl : TCExecutionCtrl = TCExecutionCtrl::ExecCtrlReboot;

	if (type == 9 || type == 17) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlPrioTC;

	} else if (type == 3 || type == 5 || type == 12 || type == 19){

		exec_ctrl = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

	} else if (type == 20) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlBKGTC;

	} else if (type == 128) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlReboot;

	} else {
		// I shouldn't arrive to this branch, acceptation error
	}

	return exec_ctrl;
} 

function try_tc_acceptation(tc_descriptor: &TCDescriptorT) -> TCStatus {

	var status : TCStatus = {acceptation_status = TCAcceptationStatus::Undefined,
								execution_status = TCExecutionCtrl::Undefined,
								error_code = TCErrorType::Undefined};

	if (false == is_crc_valid(tc_descriptor)) {

		status.acceptation_status = TCAcceptationStatus::Rejected;
		status.error_code = TCErrorType::CRCError;

	} else if (false == is_apid_valid(tc_descriptor)) {

		status.acceptation_status = TCAcceptationStatus::Rejected;
		status.error_code = TCErrorType::APIDError;

	} else if (false == is_sourceID_valid(tc_descriptor)) {

		status.acceptation_status = TCAcceptationStatus::Rejected;
		status.error_code = TCErrorType::SourceIDError;

	} else {

		var type : u8 = get_type(&(tc_descriptor->tc_bytes));
		var subtype : u8 = get_subtype(&(tc_descriptor->tc_bytes));

		if (9 : u8 == type) {
		
			if (129 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (17 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}
		} else if (4 : u8 == type) {
		
			if (1 : u8 == subtype || 6 : u8 == subtype || 7 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			} 
			else {
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}
		} else if (2 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (3 : u8 == type) {
		
			if (5 : u8 == subtype || 6 : u8 == subtype || 31 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {

				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (20 : u8 == type) {
		
			if (1 : u8 == subtype || 3 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlBKGTC;

			}
			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (5 : u8 == type) {
		
			if (5 : u8 == subtype || 6 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (12 : u8 == type) {
		
			if (1 : u8 == subtype || 5 : u8 == subtype || 6 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}

        } else if (19 : u8 == type) {
		
			if (1 : u8 == subtype || 2 : u8 == subtype || 4 : u8 == subtype || 5 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {
                
				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}
        } else if (128 : u8 == type) {
		
			if (1 : u8 == subtype) {

				status.acceptation_status = TCAcceptationStatus::Accepted;
				status.execution_status = TCExecutionCtrl::ExecCtrlReboot;

			} else {

				status.acceptation_status = TCAcceptationStatus::Rejected;
				status.error_code = TCErrorType::SubTypeError;
			}
        } else {

			status.acceptation_status = TCAcceptationStatus::Rejected;
			status.error_code = TCErrorType::TypeError;

		}

	}

	return status;
}




