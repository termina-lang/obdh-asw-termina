/**
 * @file pus_service1.fin
 * @brief Implementation of PUS Service 1 (Request Verification Service)
 */

import service_libraries.pus_services.pus_service1.internal;

/**
 * @brief Determines the execution control strategy for a given telecommand.
 *
 * This function classifies the telecommand (TC) based on its type, 
 * and selects an appropriate execution control category.
 *
 * - Types 9, 17, and 128 → ExecCtrlPrioTC
 * - Types 3, 5, 12, and 19 → ExecCtrlHK_FDIRTC
 * - Type 20 → ExecCtrlBKGTC
 *
 * @note This function assumes the TC is already validated and only routes it.
 *
 * @param tc_descriptor Reference to the TCDescriptor structure containing the TC bytes.
 * @return TCExecutionCtrl indicating how the TC should be executed.
 */
function handle_tc(tc_descriptor: &TCDescriptor) -> TCExecutionCtrl {

	var type : u8 = get_type(&(tc_descriptor->tc_bytes));
	var exec_ctrl : TCExecutionCtrl = TCExecutionCtrl::ExecCtrlPrioTC;

	if (type == 9 || type == 17 || type == 128) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlPrioTC;

	} else if (type == 3 || type == 5 || type == 12 || type == 19){

		exec_ctrl = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

	} else if (type == 20) {

		exec_ctrl = TCExecutionCtrl::ExecCtrlBKGTC;		

	} else {
		// I shouldn't arrive to this branch, acceptation error
	}

	return exec_ctrl;
} 


/**
 * @brief Verifies whether a telecommand (TC) is acceptable for execution.
 *
 * This function performs acceptation checks on a TC based on:
 * - CRC validity
 * - APID validity
 * - Source ID validity
 * 
 * If the TC passes all checks, the function determines whether the type and subtype
 * combination is supported and sets the execution category accordingly.
 *
 * @param tc_descriptor Reference to the TCDescriptor structure to be verified.
 * @return TCStatus structure indicating the result of the acceptation check,
 *         including acceptation status, execution strategy, and error code (if any).
 */
function try_tc_acceptation(tc_descriptor: &TCDescriptor) -> TCStatus {

	var tc_status : TCStatus = {acceptation_status = TCAcceptationStatus::Undefined,
								execution_status = TCExecutionCtrl::Undefined,
								error_code = TCErrorType::Undefined};

	if (false == is_crc_valid(tc_descriptor)) {

		tc_status.acceptation_status = TCAcceptationStatus::Rejected;
		tc_status.error_code = TCErrorType::CRCError;

	} else if (false == is_apid_valid(tc_descriptor)) {

		tc_status.acceptation_status = TCAcceptationStatus::Rejected;
		tc_status.error_code = TCErrorType::APIDError;

	} else if (false == is_sourceID_valid(tc_descriptor)) {

		tc_status.acceptation_status = TCAcceptationStatus::Rejected;
		tc_status.error_code = TCErrorType::SourceIDError;

	} else {

		var type : u8 = get_type(&(tc_descriptor->tc_bytes));
		var subtype : u8 = get_subtype(&(tc_descriptor->tc_bytes));

		if (9 : u8 == type) {
		
			if (129 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}

        } else if (17 : u8 == type) {
		
			if (1 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}
		} else if (4 : u8 == type) {
		
			if (1 : u8 == subtype || 6 : u8 == subtype || 7 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			} 
			else {
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}
		} else if (2 : u8 == type) {
		
			if (1 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}

        } else if (3 : u8 == type) {
		
			if (5 : u8 == subtype || 6 : u8 == subtype || 31 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {

				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}

        } else if (20 : u8 == type) {
		
			if (1 : u8 == subtype || 3 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlBKGTC;

			}
			else {
                
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}

        } else if (5 : u8 == type) {
		
			if (5 : u8 == subtype || 6 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {
                
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}

        } else if (12 : u8 == type) {
		
			if (1 : u8 == subtype || 5 : u8 == subtype || 6 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {
                
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}

        } else if (19 : u8 == type) {
		
			if (1 : u8 == subtype || 2 : u8 == subtype || 4 : u8 == subtype || 5 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlHK_FDIRTC;

			}
			else {
                
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}
        } else if (128 : u8 == type) {
		
			if (1 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlPrioTC;

			} else {

				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}
		} else if (6 : u8 == type) {
		
			if (2 : u8 == subtype || 5 : u8 == subtype || 9 : u8 == subtype) {

				tc_status.acceptation_status = TCAcceptationStatus::Accepted;
				tc_status.execution_status = TCExecutionCtrl::ExecCtrlBKGTC;

			}
			else {
                
				tc_status.acceptation_status = TCAcceptationStatus::Rejected;
				tc_status.error_code = TCErrorType::SubTypeError;
			}
        } else {

			tc_status.acceptation_status = TCAcceptationStatus::Rejected;
			tc_status.error_code = TCErrorType::TypeError;

		}

	}

	return tc_status;
}




