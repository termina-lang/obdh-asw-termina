/*
PUS SERVICE 2 : DEVICE ACCESS
*/

import service_libraries.pus_services.pus_service2.pus_service2_help;



/* Se pueden encender y apagar cuatros dispositivos, simulados mediante el uso de cuatro leds */
// DISP <--> LED <--> address ON, OFF
// DISP 1 <--> LED 0 <--> 0x00000001, 0x00000000
// DISP 2 <--> LED 1 <--> 0x10000001, 0x10000000
// DISP 3 <--> LED 2 <--> 0x20000001, 0x20000000
// DISP 4 <--> LED 3 <--> 0x30000001, 0x30000000

interface PUSS2Iface {

    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);

};

resource class PUSService2 provides PUSS2Iface {

    exec_tc_req_status : PSExecTCReqStatus;
    exec_tc_req_status_update : PS2ExecTCReqStatusUpdate;

    tm_channel: access TMChannelIface;   
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

    gpio_driver : access GPIODrvIface;

    pus_service_9 : access PUSS9Iface;
    
    method exec2_1TC(&priv self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};
        var ack_enabled : bool = false;

        var current_obt : MissionObt = {
            seconds = 0,
            finetime = 0
        };

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl), 
                            self->exec_tc_req_status_update.N, current_obt, &mut next_status.status);

                    if (next_status.status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                    } else {
                        self->a_tm_handler_pool.free(b_tm_handler);
    
                    }
                    
                } else {

                    if(self->device_drv_is_on_off_address_valid()){

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_3(&mut b_tm_handler, tm_count, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                        if (ack_enabled) {

                            if (next_status.status is Success){

                                self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                            }
                            else {

                                self->a_tm_handler_pool.free(b_tm_handler);
                               
                            }
                        } else {

                            self->a_tm_handler_pool.free(b_tm_handler);

                        }

                       
                        next_status.status = self->dev_drv_on_off();

                        if ((next_status.status is Success) == false) {

                            var tm_handler2 : Option<box TMHandlerT> = None;
                            self->a_tm_handler_pool.alloc(&mut tm_handler2);

                            match tm_handler2 {

                                case Some(b_tm_handler2) => {

                                    var tm_count2 : u16 = 0 : u16;
                                    self->tm_counter.get_next_tm_count(&mut tm_count2);
                                    self->pus_service_9.get_current_obt(&mut current_obt);
                                    build_tm_1_8_device_command_exec_error(&mut b_tm_handler2, tm_count2, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                             self->exec_tc_req_status_update.dev_address, current_obt, &mut next_status.status);

                                    if (next_status.status is Success){

                                        self->tm_channel.send_tm(b_tm_handler2, &mut next_status.status);
                                    }
                                    else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                            
                                    }
                                }
                                case None => {
                                    next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                                }
                            }
                            
                        }
                        else {

                            var tm_handler2 : Option<box TMHandlerT> = None;
                            self->a_tm_handler_pool.alloc(&mut tm_handler2);

                            match tm_handler2 {

                                case Some(b_tm_handler2) => {

                                    var tm_count2 : u16 = 0 : u16;
                                    self->tm_counter.get_next_tm_count(&mut tm_count2);
                                    self->pus_service_9.get_current_obt(&mut current_obt);
                                    build_tm_1_7(&mut b_tm_handler2, tm_count2, self->exec_tc_req_status_update.flags_ack, current_obt, &mut next_status.status, &mut ack_enabled);

                                    if (ack_enabled) {

                                        if (next_status.status is Success){

                                            self->tm_channel.send_tm(b_tm_handler2, &mut next_status.status);

                                        }
                                        else {
                                            self->a_tm_handler_pool.free(b_tm_handler2);
                                            
                                        }

                                    } else {
                                        self->a_tm_handler_pool.free(b_tm_handler2);
                                    }

                                    
                                }
                                case None => {
                                    next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
                                }
                            }

                        }

                     

                    } else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_4_device_address_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 self->exec_tc_req_status_update.dev_address, current_obt, &mut next_status.status);

                        if (next_status.status is Success){

                            self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                        }
                    }
                }
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

    viewer device_drv_is_on_off_address_valid(&self) -> bool {

        var is_valid : bool = false;
        var device_address : u32 = self->exec_tc_req_status_update.dev_address;

        if (device_address == 0x00000001 || device_address == 0x10000001 || device_address == 0x20000001 || device_address == 0x30000001 ||
            device_address == 0x00000000 || device_address == 0x10000000 || device_address == 0x20000000 || device_address == 0x30000000) {
            is_valid = true;
        }

        return is_valid;

    }


    viewer manage_short_pack_length_error(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {
            seconds = 0,
            finetime = 0
        };

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl), 
                        (self->exec_tc_req_status_update.tc_num_bytes), current_obt, &mut next_status.status);

                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                        
                }
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

    viewer manage_error_in_acceptance(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                }
                
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

    viewer manage_tm_limit_app_data_reached(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = {exec_tc_status = PSReqStatus::Exit, status = Success};

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_8_tm_exceed_limit_appdata(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 current_obt, &mut next_status.status);
                
                if (next_status.status is Success){

                    self->tm_channel.send_tm(b_tm_handler, &mut next_status.status);

                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
            
                }
            }
            case None => {
                next_status.status = Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }

    method dev_drv_on_off(&priv self) -> Status<i32> {

        var status : Status<i32> = Success;

        var led: u8 = (self->exec_tc_req_status_update.dev_address & 0x10000000) as u8;
        var on_off : u8 = (self->exec_tc_req_status_update.dev_address & 0x00000001) as u8;

        self->gpio_driver.write_led(led, on_off, &mut status);

        return status;
    }

    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>){

        var subtype : u8 = tc_handler->df_header.subtype;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status.exec_tc_status is PSReqStatus::Exit == false) {

            match self->exec_tc_req_status.exec_tc_status {

                case Init => {

                    self->exec_tc_req_status_update.packet_id = tc_handler->packet_header.packet_id;
                    self->exec_tc_req_status_update.packet_error_ctrl = tc_handler->packet_error_ctrl;
                    self->exec_tc_req_status_update.flags_ack = tc_handler->df_header.flag_ver_ack;
                    self->exec_tc_req_status_update.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
                    self->exec_tc_req_status.status = tc_handler_get_u8_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.N));
                    self->exec_tc_req_status.status = tc_handler_get_u32_appdata_field(tc_handler, &mut (self->exec_tc_req_status_update.dev_address));
                    

                    if (self->exec_tc_req_status.status is Success) {

                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::ExecTC;
                        
                    } else {

                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::Exit;
                        
                    }

                }
                case ExecTC => {

                    if (subtype == 1) {

                        self->exec_tc_req_status = self->exec2_1TC();

                    } else {

                        self->exec_tc_req_status.status = Failure(ACCEPTANCE_ERROR);
                        self->exec_tc_req_status.exec_tc_status = PSReqStatus::Exit;
                    }
                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }

        match self->exec_tc_req_status.status {
                        
            case Success => {

                *action_status = Success;
    
            }
            case Failure(error_code) => {

                if (error_code == ACCEPTANCE_ERROR) {

                    //Generar TM[1,4] error en la aceptación
                    self->exec_tc_req_status = self->manage_error_in_acceptance();
                    
                } else if (error_code == BUILD_TM_ERROR) {

                    //Generar TM[1,8] error en la generación de TM
                    self->exec_tc_req_status = self->manage_tm_limit_app_data_reached();
                    
                } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                    self->exec_tc_req_status = self->manage_short_pack_length_error();
                
                } else if (error_code == INVALID_LED_INDEX_ERROR) {

                    // TO DO: error alreadey managed in method exec_tc_2_1 
            
                    
                } else {

                    *action_status = Failure(error_code);
                    
                }   

            }
        }

        self->exec_tc_req_status = {
                    exec_tc_status = PSReqStatus::Init,
                    status = Success
                };         

        return;
    
    }


};
