
import service_libraries.pus_services.pus_services;
import service_libraries.pus_services.pus_service1.pus_service1;
import service_libraries.pus_services.pus_service9.pus_service9;

const informative_Ev_IDs : u16 = 3;
const low_severity_anomaly_Ev_IDs : u16 = 4;
const medium_severity_anomaly_Ev_IDs : u16 = 0;
const high_severity_anomaly_Ev_IDs : u16 = 16;

const offset_mask : u16 = 0x001F; //Maximum Ev_IDs of each type in the baseline configuration is 32,
	                              //from 0xX000 to 0xX01F, where X is the Ev_ID type

const EvID_build_tm_error : u16 = 0x2100; //Ev_ID for the build TM error

enum Ev_IDType {
    Informative, //0x1XXX
    LowSeverityAnomaly, //0x2XXX
    MediumSeverityAnomaly, //0x3XXX
    HighSeverityAnomaly, //0x4XXX
    Ev_IDNotValid
};

struct ParamOutOfLimitInfo {
    PID : u16;
    PID_value : u32;
    PID_limit : u32;
};

struct ParamFaultValueInfo {
    PID : u16;
    PID_value : u32;
    PID_mask : u32;
    PID_expected_value : u32;
};

enum FaultInfo {
    ParamOutOfLimit(ParamOutOfLimitInfo),
    ParamFaultValue(ParamFaultValueInfo),
    Empty
};


struct PS5ExecTCReqStatusUpdate {
    packet_id : u16;
    packet_error_ctrl : u16;
    flags_ack : u8;
    tc_num_bytes : usize;
    N : u8;
    EvID: u16;
};

constexpr ps5_init_tc_req_status_update : PS5ExecTCReqStatusUpdate = {
    packet_id = 0, packet_error_ctrl = 0, flags_ack = 0, tc_num_bytes = 0, N = 0, EvID = 0
};

//These functions could become viewers !!!


function get_Ev_ID_type(Ev_ID : u16) -> Ev_IDType {

    var Ev_ID_type: Ev_IDType = Ev_IDType::Ev_IDNotValid;
    var aux_type : u16 = Ev_ID >> 12 : u16;
    var aux_id : u16 = Ev_ID & 0x0FFF;

    if (aux_type == 1){
        if (aux_id < informative_Ev_IDs){
            Ev_ID_type = Ev_IDType::Informative;
        } else {
            Ev_ID_type = Ev_IDType::Ev_IDNotValid;
        }
    } else if (aux_type == 2){
        if (aux_id < low_severity_anomaly_Ev_IDs){
            Ev_ID_type = Ev_IDType::LowSeverityAnomaly;
        } else {
            Ev_ID_type = Ev_IDType::Ev_IDNotValid;
        }
    } else if (aux_type == 3){
        if (aux_id < medium_severity_anomaly_Ev_IDs){
            Ev_ID_type = Ev_IDType::MediumSeverityAnomaly;
        } else {
            Ev_ID_type = Ev_IDType::Ev_IDNotValid;
        }
    } else if (aux_type == 4){
        if (aux_id < high_severity_anomaly_Ev_IDs){
         Ev_ID_type = Ev_IDType::HighSeverityAnomaly;
        } else {
            Ev_ID_type = Ev_IDType::Ev_IDNotValid;
        }
    } else {
        Ev_ID_type = Ev_IDType::Ev_IDNotValid;
    }

    return Ev_ID_type;

}

function is_Ev_ID_valid (evID : u16) -> bool {

    var is_valid : bool = true;
    var evID_type : Ev_IDType = get_Ev_ID_type(evID);
    if (evID_type is Ev_IDType::Ev_IDNotValid){
        is_valid = false;
    } else {
        
    }
    return is_valid;
}



function get_Ev_ID_enable_config_index(Ev_ID : u16) -> usize {

    var Ev_ID_type : Ev_IDType = get_Ev_ID_type(Ev_ID);
    var index : usize = 4; //not valid index
    match Ev_ID_type {
        case Informative => {
            index = 0;
        }
        case LowSeverityAnomaly => {
            index = 1;
        }
        case MediumSeverityAnomaly => {
            index = 2;
        }
        case HighSeverityAnomaly => {
            index = 3;
        }
        case Ev_IDNotValid => {
            index = 4;
        }
    }

    return index;
}

function get_Ev_ID_enable_config_offset(Ev_ID : u16) -> u8 {

    return (Ev_ID & offset_mask) as u8;
} 