/*
PUS SERVICE 5 : EVENT REPORTING
*/


import service_libraries.pus_services.pus_service5.pus_service5_help;



interface PUSS5Iface {

    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>);
    procedure is_Ev_ID_enabled_ext(&mut self, Ev_ID: u16, p_enabled: &mut bool); 
    procedure build_and_tx_tm_5_x(&mut self, result: &mut MyResult, evID: u16, fault_info: FaultInfo);

};

resource class PUSService5 provides PUSS5Iface {

    Ev_ID_enable_config : [u32; 4];

    exec_tc_req_status : PSExecTCReqStatus;
    exec_tc_req_status_update : PS5ExecTCReqStatusUpdate;

    tm_channel : access TMChannelIface;
    a_tm_handler_pool : access Allocator<TMHandlerT>;
    tm_counter : access TMCounterIface;

    pus_service_9 : access PUSS9Iface;
    

    viewer is_Ev_ID_enabled(&self, Ev_ID : u16) -> bool {

        var enabled : bool = false;
        var index : usize = get_Ev_ID_enable_config_index(Ev_ID);
        var offset : u8 = get_Ev_ID_enable_config_offset(Ev_ID);

        if (index < 4){

            if(((self->Ev_ID_enable_config[index] >> offset) & 0x01) != 0){
                enabled = true;
            }
        }

        return enabled;
    }

    procedure is_Ev_ID_enabled_ext(&mut self, Ev_ID: u16, p_enabled: &mut bool) {

        *p_enabled = (self->is_Ev_ID_enabled(Ev_ID));

        return;
    }

    viewer manage_short_pack_length_error(&self) -> PSExecTCReqStatus {

        var next_status : PSExecTCReqStatus = PSExecTCReqStatus::Exit;
        var result : MyResult = MyResult::Ok;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                self->pus_service_9.get_current_obt(&mut current_obt);
                build_tm_1_4_short_pack_length(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl), 
                                (self->exec_tc_req_status_update.tc_num_bytes), current_obt, &mut result);

                if (result is MyResult::Ok){

                    self->tm_channel.send_tm(b_tm_handler, &mut result);

                    if (result is MyResult::Error){
                        next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                    }
                } 
                else {
                    self->a_tm_handler_pool.free(b_tm_handler);
                    next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                }
            }
            case None => {
                next_status = PSExecTCReqStatus::Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;
    }


    method exec5_5TC(&priv self) -> PSExecTCReqStatus {

        var result : MyResult = MyResult::Ok;
        var next_status : PSExecTCReqStatus = PSExecTCReqStatus::Exit;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                var index: usize = get_Ev_ID_enable_config_index(self->exec_tc_req_status_update.EvID);
                var offset : u8 = get_Ev_ID_enable_config_offset(self->exec_tc_req_status_update.EvID);

            
                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 self->exec_tc_req_status_update.N, current_obt, &mut result);

                    if (result is MyResult::Ok){

                        self->tm_channel.send_tm(b_tm_handler, &mut result);

                        if (result is MyResult::Error){
                            next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                        }
                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                        next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                    }
                }
                else {

                    var is_valid_EvID : bool = index < 4;

                    if(is_valid_EvID) {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_3(&mut b_tm_handler, tm_count, current_obt, &mut result);

                        if (result is MyResult::Ok){

                            self->tm_channel.send_tm(b_tm_handler, &mut result);

                            if (result is MyResult::Error){
                                next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                            }
                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                            next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                        }

                        self->Ev_ID_enable_config[index] = self->Ev_ID_enable_config[index] | (1 << offset);

                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                self->pus_service_9.get_current_obt(&mut current_obt);
                                build_tm_1_7(&mut b_tm_handler2, tm_count2, current_obt, &mut result);

                                if (result is MyResult::Ok){

                                    self->tm_channel.send_tm(b_tm_handler2, &mut result);

                                    if (result is MyResult::Error){
                                        next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                                    }
                                } 
                                else {
                                    self->a_tm_handler_pool.free(b_tm_handler2);
                                    next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                                }
                        
                            }
                            case None => {
                                next_status = PSExecTCReqStatus::Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                    } else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_4_EvID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 (self->exec_tc_req_status_update.EvID), current_obt, &mut result);

                        if (result is MyResult::Ok){

                            self->tm_channel.send_tm(b_tm_handler, &mut result);

                            if (result is MyResult::Error){
                                next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                            }
                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                            next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                        }

                    }

                }
            }
            case None => {
                next_status = PSExecTCReqStatus::Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;

    }

    method exec5_6TC(&priv self) -> PSExecTCReqStatus {

        var result : MyResult = MyResult::Ok;
        var next_status : PSExecTCReqStatus = PSExecTCReqStatus::Exit;

        var current_obt : MissionObt = {seconds = 0, finetime = 0};

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);

                var index: usize = get_Ev_ID_enable_config_index(self->exec_tc_req_status_update.EvID);
                var offset : u8 = get_Ev_ID_enable_config_offset(self->exec_tc_req_status_update.EvID);

            
                if (self->exec_tc_req_status_update.N != 1) {

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    build_tm_1_4_num_of_instr_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl),
                                 self->exec_tc_req_status_update.N, current_obt, &mut result);

                    if (result is MyResult::Ok){

                        self->tm_channel.send_tm(b_tm_handler, &mut result);

                        if (result is MyResult::Error){
                            next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                        }
                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                        next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                    }
                   
                }
                else {

                    var is_valid_EvID : bool = index < 4;

                    if(is_valid_EvID) {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_3(&mut b_tm_handler, tm_count, current_obt, &mut result);

                        if (result is MyResult::Ok){

                            self->tm_channel.send_tm(b_tm_handler, &mut result);

                            if (result is MyResult::Error){
                                next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                            }
                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                            next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                        }

                        self->Ev_ID_enable_config[index] = self->Ev_ID_enable_config[index] & (0xFFFFFFFE << offset);

                        var tm_handler2 : Option<box TMHandlerT> = None;
                        self->a_tm_handler_pool.alloc(&mut tm_handler2);

                        match tm_handler2 {

                            case Some(b_tm_handler2) => {

                                var tm_count2 : u16 = 0 : u16;
                                self->tm_counter.get_next_tm_count(&mut tm_count2);
                                self->pus_service_9.get_current_obt(&mut current_obt);
                                build_tm_1_7(&mut b_tm_handler2, tm_count2, current_obt, &mut result);

                                if (result is MyResult::Ok){

                                    self->tm_channel.send_tm(b_tm_handler2, &mut result);

                                    if (result is MyResult::Error){
                                        next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                                    }
                                } 
                                else {
                                    self->a_tm_handler_pool.free(b_tm_handler2);
                                    next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                                }
                            }
                            case None => {
                                next_status = PSExecTCReqStatus::Failure(TM_POOL_ALLOC_FAILURE);
                            }
                        }

                    } else {

                        self->pus_service_9.get_current_obt(&mut current_obt);
                        build_tm_1_4_EvID_not_valid(&mut b_tm_handler, tm_count, (self->exec_tc_req_status_update.packet_id), (self->exec_tc_req_status_update.packet_error_ctrl), 
                                (self->exec_tc_req_status_update.EvID), current_obt, &mut result);

                        if (result is MyResult::Ok){

                            self->tm_channel.send_tm(b_tm_handler, &mut result);

                            if (result is MyResult::Error){
                                next_status = PSExecTCReqStatus::Failure(TM_SEND_FAILURE);
                            }
                        } 
                        else {
                            self->a_tm_handler_pool.free(b_tm_handler);
                            next_status = PSExecTCReqStatus::Error(BUILD_TM_ERROR);
                        }
                    }

                }
            }
            case None => {
                next_status = PSExecTCReqStatus::Failure(TM_POOL_ALLOC_FAILURE);
            }
        }

        return next_status;

    }


    viewer build_tm_5_x_param_out_of_limit(&self, p_tm_handler : &mut TMHandlerT, tm_seq_counter: u16, fault_info : ParamOutOfLimitInfo, ev_ID : u16, result : &mut MyResult){

        startup_tm(p_tm_handler);
        append_u16_appdata_field(p_tm_handler, ev_ID,result);
        append_u16_appdata_field(p_tm_handler, fault_info.PID,result);
        append_u32_appdata_field(p_tm_handler, fault_info.PID_value,result);
        append_u32_appdata_field(p_tm_handler, fault_info.PID_limit,result);
        var subtype : u8 = get_Ev_ID_enable_config_index(ev_ID) as u8;
        var current_obt : MissionObt = {seconds = 0, finetime = 0};
        self->pus_service_9.get_current_obt(&mut current_obt);
        close_tm(p_tm_handler, 5, subtype, tm_seq_counter, current_obt);

        return;
    }


    viewer build_tm_5_x_param_check_value_fail(&self, p_tm_handler : &mut TMHandlerT, tm_seq_counter: u16, fault_info : ParamFaultValueInfo, ev_ID : u16, result : &mut MyResult){

        startup_tm(p_tm_handler);
        append_u16_appdata_field(p_tm_handler, ev_ID,result);
        append_u16_appdata_field(p_tm_handler, fault_info.PID,result);
        append_u32_appdata_field(p_tm_handler, fault_info.PID_value,result);
        append_u32_appdata_field(p_tm_handler, fault_info.PID_mask,result);
        append_u32_appdata_field(p_tm_handler, fault_info.PID_expected_value,result);
        var subtype : u8 = get_Ev_ID_enable_config_index(ev_ID) as u8;
        var current_obt : MissionObt = {seconds = 0, finetime = 0};
        self->pus_service_9.get_current_obt(&mut current_obt);
        close_tm(p_tm_handler, 5, subtype, tm_seq_counter, current_obt);

        return;
    }

    procedure build_and_tx_tm_5_x(&mut self, result: &mut MyResult, evID: u16, fault_info: FaultInfo){

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);
                
                match (fault_info) {
                    case ParamOutOfLimit(fault_value_info) => {
                        self->build_tm_5_x_param_out_of_limit(&mut b_tm_handler, tm_count, fault_value_info, evID, result);
                    }
                    case ParamFaultValue(fault_value_info) => {
                        self->build_tm_5_x_param_check_value_fail(&mut b_tm_handler, tm_count, fault_value_info, evID, result);
                    }  
                    case Empty => {
                        *result = MyResult::Error;
                    } 
                }

                if(*result is MyResult::Ok){

                    self->tm_channel.send_tm(b_tm_handler, result);

                } else {
                    //Generar TM[5,2]
                    self->a_tm_handler_pool.free(b_tm_handler);
                }
                

            }
            case None => {
                *result = MyResult::Error;
            }
        }

        return;
    }

    viewer get_TC_params(&self, tc_handler : &mut TCHandlerT, subtype : &mut u8, result : &mut MyResult) -> PS5ExecTCReqStatusUpdate {

        *subtype = tc_handler->df_header.subtype;

        var tc_data : PS5ExecTCReqStatusUpdate = {
            packet_id = 0,
            packet_error_ctrl = 0,
            tc_num_bytes = 0,
            N = 0,
            EvID = 0
        };
        tc_data.packet_id = tc_handler->packet_header.packet_id;
        tc_data.packet_error_ctrl = tc_handler->packet_error_ctrl;
        tc_data.tc_num_bytes = tc_handler->tc_descriptor.tc_num_bytes;
        *result = tc_handler_get_u8_appdata_field(tc_handler, &mut (tc_data.N));
        *result = tc_handler_get_u16_appdata_field(tc_handler, &mut (tc_data.EvID));

        return tc_data;

    }

    procedure exec_tc (&mut self, tc_handler : &mut TCHandlerT, action_status: &mut Status<i32>){

        var subtype : u8 = 0;

        for i : usize in 0 .. 3 while (self->exec_tc_req_status is PSExecTCReqStatus::Exit == false) {

            match self->exec_tc_req_status {

                case Init => {

                    var result : MyResult = MyResult::Ok;
                    self->exec_tc_req_status_update = self->get_TC_params(tc_handler, &mut subtype, &mut result);

                    if (result is MyResult::Error) {
                        self->exec_tc_req_status = PSExecTCReqStatus::Error(TC_DATA_OUT_OF_RANGE_ERROR);
                    } else {
                        self->exec_tc_req_status = PSExecTCReqStatus::ExecTC;
                    }

                }
                case ExecTC => {

                    if (subtype == 5) {

                        self->exec_tc_req_status = self->exec5_5TC();

                    } else if (subtype == 6) {

                        self->exec_tc_req_status = self->exec5_6TC();

                    } else {

                        self->exec_tc_req_status = PSExecTCReqStatus::Error(ACCEPTANCE_ERROR);
                    }
                }
                case Error(error_code) => {

                    self->exec_tc_req_status = PSExecTCReqStatus::Exit;

                    if (error_code == ACCEPTANCE_ERROR) {

                        //Generar TM[1,4] error en la aceptacion
                        
                    } else if (error_code == BUILD_TM_ERROR) {

                        //Generar TM[1,8] error en la generacion de TM
                       
                    } else if (error_code == TC_DATA_OUT_OF_RANGE_ERROR) {

                        self->exec_tc_req_status = self->manage_short_pack_length_error();
                      
                    } else {
                        
                       
                    }

                }
                case Failure(failure_code) => {

                    *action_status = Failure(failure_code);
                    self->exec_tc_req_status = PSExecTCReqStatus::Exit;

                }
                case Exit => {
                    //Unreachable point
                }  
            }
        }

        if(self->exec_tc_req_status is PSExecTCReqStatus::Exit){

            self->exec_tc_req_status = PSExecTCReqStatus::Init;
        }

        return;
    
    }
  
};



