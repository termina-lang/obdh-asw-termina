import service_libraries.serialize;


const max_tc_size : usize = 256 : usize;

struct CCSDSPUSTCPacketHeaderT {

    packet_id : u16;
    packet_seq_ctrl : u16;
    packet_length : u16;

};


struct CCSDSPUSTCDFHeaderT {

	flag_ver_ack : u8;
	type : u8;
	subtype : u8;
	sourceID : u16;

};


 struct TCDescriptorT {

	tc_bytes : [u8 ; max_tc_size];
	tc_num_bytes : usize;

 };


 function get_packet_id(tc_bytes : &[u8 ; max_tc_size]) -> u16 {

    var packet_id : u16 = 0 : u16;
    packet_id = deserialize_uint16(&(*tc_bytes)[0 : usize .. 2 : usize]);
    return packet_id;

 }



function get_APID(tc_bytes : &[u8 ; max_tc_size]) -> u16 {

	var packet_id : u16 = get_packet_id(tc_bytes);

	return ((packet_id) & 0x07FF : u16);
}



function get_seq_flags(packet_seq_ctrl : u16) -> u16 {

	return ((packet_seq_ctrl) >> 14 : u16);
} 



function get_seq_count(packet_seq_ctrl : u16) -> u16 {

	return ((packet_seq_ctrl) & 0x3FFF : u16);
}

function get_packet_length(tc_bytes : &[u8 ; max_tc_size]) -> u16 {

	return (deserialize_uint16(&(*tc_bytes)[4 : usize .. 6 : usize]));
}

function get_packet_seq_ctrl(tc_bytes : &[u8 ; max_tc_size]) -> u16 {

	var packet_error_ctrl : u16 = 0 : u16;
	let crc_offset : u16 = get_packet_length(tc_bytes) + 5 : u16;
	packet_error_ctrl = deserialize_uint16(&(*tc_bytes)[crc_offset as usize .. (crc_offset + 2) as usize]);	

	return packet_error_ctrl;
}


function get_ack(flag_ver_ack : u8) -> u8 {

	return ((flag_ver_ack) & 0x0F : u8);
} 

function get_type(tc_bytes : &[u8 ; max_tc_size]) -> u8 {

	var type : u8 = (*tc_bytes)[7 : usize];
	return type;
}

function get_subtype(tc_bytes : &[u8 ; max_tc_size]) -> u8 {

	var subtype : u8 = (*tc_bytes)[8 : usize];
	return subtype;
}

function get_source_id(tc_bytes : &[u8 ; max_tc_size]) -> u8 {

	var sourceID : u8 = (*tc_bytes)[9 : usize];
	return sourceID;
}


function tc_get_fields(tc_bytes : &[u8 ; max_tc_size],
		    p_tc_packet_header : &mut CCSDSPUSTCPacketHeaderT,
		    p_tc_df_header : &mut CCSDSPUSTCDFHeaderT,
		    p_tc_packet_err_ctrl : &mut u16) {

	// Deserialize Packet ID and store it into field packet_id
	p_tc_packet_header->packet_id = deserialize_uint16(&(*tc_bytes)[0 : usize .. 2 : usize]);

	//Deserialize Packet Seq. Control and store it into field packet_seq_ctrl
	p_tc_packet_header->packet_seq_ctrl = deserialize_uint16(&(*tc_bytes)[2 : usize .. 4 : usize]);

	//Deserialize Packet Length and store it into field packet_length
	p_tc_packet_header->packet_length = deserialize_uint16(&(*tc_bytes)[4 : usize .. 6 : usize]);

	// Read the MSB of the Data Field Header and store it into flag_ver_ack
	p_tc_df_header->flag_ver_ack = (*tc_bytes)[6 : usize];

	//Read the remaining fields of the Data Field Header into the struct
	p_tc_df_header->type = (*tc_bytes)[7 : usize];
	p_tc_df_header->subtype = (*tc_bytes)[8 : usize];
	p_tc_df_header->sourceID = deserialize_uint16(&(*tc_bytes)[9 : usize .. 11 : usize]);

	// Deserialize Packet Error Control and store it at p_tc_packet_err_ctrl

	var packet_error_ctrl : [u8 ; 2] = [0 : u8 ; 2];
	packet_error_ctrl[0 : usize] = (*tc_bytes)[((*p_tc_packet_header).packet_length + 5 : u16) as usize];
	packet_error_ctrl[1 : usize] = (*tc_bytes)[((*p_tc_packet_header).packet_length + 6 : u16) as usize];

	*p_tc_packet_err_ctrl = deserialize_uint16(&packet_error_ctrl);
	
	return;

}

