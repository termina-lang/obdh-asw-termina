const queue_max_noe: usize = 1024;

constexpr QueueFull : i32 = -1;

// QueueU8 struct
struct QueueU8 {
    elements: [u8; queue_max_noe];
    head_index: usize;
    num_elements: usize;
};


function is_full(queue : &QueueU8) -> bool {
    var queue_is_full: bool = (queue->num_elements == queue_max_noe);
    return queue_is_full;
}

function is_empty(queue : &QueueU8) -> bool {
    var queue_is_empty: bool = (queue->num_elements == 0: usize);
    return queue_is_empty;
}

function enqueue(queue: &mut QueueU8, new_elem: u8) -> Status<i32> {

    var queue_is_full: bool = is_full(&(*queue)); 
    var status : Status<i32> = Success;

    if (false == queue_is_full) {
        var next_tail_index: usize = (queue->head_index + queue->num_elements) % queue_max_noe;
        queue->elements[next_tail_index] = new_elem;
        queue->num_elements = queue->num_elements + 1: usize;
    } else {
        status = Failure(QueueFull);
    }
    return status;
}

function dequeue(queue: &mut QueueU8, old_elem: &mut Option<u8>) {

    var queue_is_empty: bool = is_empty(&(*queue));

    if (false == queue_is_empty) {
        var element: u8 = queue->elements[queue->head_index];
        *old_elem = Some(element);
        queue->head_index = (queue->head_index + 1) % queue_max_noe;
        queue->num_elements = queue->num_elements - 1: usize;
    } else {
        *old_elem = None;
    }
    return;
}

function get_num_enqueued_elems(queue : &QueueU8, nelems: &mut usize) {
    *nelems = queue->num_elements;
    return;
}



