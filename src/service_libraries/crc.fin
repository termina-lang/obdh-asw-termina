import service_libraries.tc_ccsds_pus_format;

function cal_crc_16 (data : & [u8; max_tc_size], nbytes : usize) -> u16  {
    
    var crc_value : u16 = 0xFFFF : u16;
    var k : usize = 0;

    for i : usize in 0 : usize .. max_tc_size while k < nbytes {

        crc_value = crc_value ^ ((*data)[i] as u16 << 8 : u16);

        for j : u16 in 0 : u16 .. 8 : u16 {

            if ((crc_value & 0x8000 : u16) != 0 : u16) {
                crc_value = (crc_value << 1 : u16) ^ 0x1021 : u16;
            } else {
                crc_value = crc_value << 1 : u16;
            }
        }

        k = k + 1;
    }

	return crc_value;
}


function rand_r (mutseed : &mut u32) -> u32 {
    
    var next : u32 = *mutseed;
    var result : u32 = 0 : u32;

    next = next * 1103515245 : u32;
    next = next + 12345 : u32;
    result = (next / 65536 : u32) % 2048 : u32;

    next = next * 1103515245 : u32;
    next = next + 12345 : u32;
    result = result << 10 : u32;
    result = result ^(next / 65536 : u32) % 1024 : u32;

    next = next * 1103515245 : u32;
    next = next + 12345 : u32;
    result = result << 10 : u32;
    result = result ^ (next / 65536 : u32) % 1024 : u32;

    *mutseed = next;

    return result;
}