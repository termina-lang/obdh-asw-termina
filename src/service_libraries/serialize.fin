
/**
 * @brief Deserializes a 16-bit unsigned integer from two bytes
 *
 * Converts a two-byte array into a 16-bit word, assuming big-endian order
 * (i.e., the most significant byte is first).
 *
 * @param[in] data_bytes Vector containing the MSB and LSB of the 16-bit word
 *
 * @return The deserialized 16-bit word
 */
function deserialize_uint16(data_bytes : &[u8 ; 2]) -> u16 {

    var aux : u16 = 0 : u16;

    aux = (*data_bytes)[0 : usize] as u16;
    aux = aux << 8 : u8 ;
    aux = aux | (*data_bytes)[1 : usize] as u16;

    return aux;
}



/**
 * @brief Deserializes a 32-bit unsigned integer from four bytes
 *
 * Converts a four-byte array into a 32-bit word, assuming big-endian order.
 *
 * @param[in] data_bytes Vector containing the 4 bytes of the 32-bit word
 *
 * @return The deserialized 32-bit word
 */
function deserialize_uint32(data_bytes : &[u8 ; 4]) -> u32 {

    var aux : u32 = 0 : u32;

    aux = (*data_bytes)[0 : usize] as u32;
    aux = aux << 8 : u8 ;
    aux = aux | (*data_bytes)[1 : usize] as u32;
    aux = aux << 8 : u8 ;
    aux = aux | (*data_bytes)[2 : usize] as u32;
    aux = aux << 8 : u8 ;
    aux = aux | (*data_bytes)[3 : usize] as u32;

    return aux;
}


/**
 * @brief Serializes a 16-bit unsigned integer into two bytes
 *
 * Stores the big-endian byte representation of a 16-bit word into the provided array.
 *
 * @param[in] aux 16-bit word to serialize
 * @param[out] data_bytes Vector to store the serialized 2-byte result
 */
function serialize_uint16(aux : u16, data_bytes : &mut[u8 ; 2]) {

    (*data_bytes)[0 : usize] = ((aux & 0xFF00 : u16) >> 8 : u8) as u8;
    (*data_bytes)[1 : usize] = (aux & 0x00FF : u16) as u8;

    return;
}


/**
 * @brief Serializes a 32-bit unsigned integer into four bytes
 *
 * Stores the big-endian byte representation of a 32-bit word into the provided array.
 *
 * @param[in] aux 32-bit word to serialize
 * @param[out] data_bytes Vector to store the serialized 4-byte result
 */
function serialize_uint32(aux : u32, data_bytes : &mut[u8 ; 4]) {

    (*data_bytes)[0 : usize] = ((aux & 0xFF000000 : u32) >> 24 : u8) as u8;
    (*data_bytes)[1 : usize] = ((aux & 0x00FF0000 : u32) >> 16 : u8) as u8;
    (*data_bytes)[2 : usize] = ((aux & 0x0000FF00 : u32) >> 8 : u8) as u8;
    (*data_bytes)[3 : usize] = (aux & 0x000000FF : u32) as u8;

    return;
}