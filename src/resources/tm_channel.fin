/**
 * @file tm_channel.fin
 * @brief Implementation of a telemetry (TM) channel using UART communication.
 */

import resources.uart;
import service_libraries.tm_ccsds_pus_format;
import service_libraries.pus_tm_handler;


/**
 * @interface TMChannelIface
 * @brief Interface for sending telemetry data.
 */
interface TMChannelIface {

    procedure send_tm(&mut self, tm_handler : box TMHandler, status : &mut Status<i32>);

};


/**
 * @class TMChannel
 * @brief Concrete implementation of a telemetry channel using UART.
 * 
 * This class uses a UART driver to send CCSDS-PUS TM packets and handles memory management
 * via an allocator.
 */
resource class TMChannel provides TMChannelIface {

    /**
     * @brief UART driver interface used to transmit telemetry data.
     */
    uart : access CharDevSend;

    /**
     * @brief Allocator pool for telemetry handlers.
     */
    a_tm_handler_pool : access Allocator<TMHandler>;


    /**
     * @brief Sends a telemetry packet via UART using a framing protocol.
     *
     * The frame consists of a 4-byte preamble (0xBEBA BEEF), a 2-byte payload length,
     * followed by the telemetry packet bytes. After transmission, the buffer is checked
     * to ensure it is empty before releasing the telemetry handler back to the pool.
     *
     * @param[in] tm_handler  Boxed telemetry handler containing the TM packet to send.
     * @param[out] status     Staus variable to indicate Success or Failure (error_code).
     */
     procedure send_tm(&mut self, tm_handler : box TMHandler, status : &mut Status<i32>) {

        var tm_descriptor : TMDescriptor = tm_handler.tm_descriptor;

         /** @brief 6-byte frame header with preamble and length field */
        var frame_header : [u8; 6] = { 0xBE, 0xBA, 0xBE, 0xEF, 0, 0 };


        // Set TM length in frame
        serialize_uint16(tm_descriptor.tm_num_bytes as u16, &mut frame_header[4 .. 6]);


        self->uart.send(6, &frame_header, status);

        // Send telemetry packet bytes
        for i : usize in 0 .. 256 while (i < tm_descriptor.tm_num_bytes) && (*status is Success) {

            let index : usize = i as usize;

            self->uart.send(1, &tm_descriptor.tm_bytes[index .. index + 1], status);

        }
        
        // Free the telemetry handler back to the memory pool
        self->a_tm_handler_pool.free(tm_handler);

        return;

    }


   
};