import service_libraries.timeval;

struct MissionOBT {

    seconds: u32;
    finetime: u16;
};

interface OBTManagerIface {

    procedure get_current_obt(&mut self, current_obt: &mut MissionOBT);
    procedure set_obt(&mut self, next_obt : MissionOBT);

};

resource class OBTManager provides OBTManagerIface {

    ref_obt : MissionOBT; /**< Reference onboard time at last update */
    ref_time_val_from_power_on : TimeVal; /**< System uptime reference from power on */

    system_port : access SystemAPI;

    /**
     * @brief Set the onboard time (OBT) reference.
     *
     * Updates the internal reference OBT and captures the current system uptime. This
     * tuple is used for future OBT calculations using the following formula:
     * current_obt = ref_obt + (current_system_uptime - ref_time_val_from_power_on)
     */
    procedure set_obt (&mut self, next_obt : MissionOBT) {

        self->ref_obt = next_obt;
        self->system_port.clock_get_uptime(&mut self->ref_time_val_from_power_on);

        return;

    }


    /**
     * @brief Compute and retrieve the current onboard time (OBT).
     *
     * Calculates the current OBT by adding the elapsed system uptime since
     * the last reference to the stored reference OBT.
     *
     * @param[out] current_obt Pointer to MissionOBT structure to store the computed current OBT.
     */
    procedure get_current_obt(&mut self, current_obt: &mut MissionOBT) {

        var fine_time_increment : u32 = 0;
        var time_val_from_power_on : TimeVal = {
            tv_sec = 0,
            tv_usec = 0
        };
        self->system_port.clock_get_uptime(&mut time_val_from_power_on);
        var interval : TimeVal = {
            tv_sec = 0,
            tv_usec = 0
        };

        interval = substract_TimeVal(time_val_from_power_on, self->ref_time_val_from_power_on);

        fine_time_increment = self->ref_obt.finetime as u32;
        fine_time_increment = fine_time_increment + (interval.tv_usec*1000) / 15259;

        current_obt->seconds = self->ref_obt.seconds + interval.tv_sec + (fine_time_increment >> 16 : u32);
        current_obt->finetime = (fine_time_increment & 0xFFFF) as u16;

        return;
    }


};