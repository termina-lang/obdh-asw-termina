import service_libraries.queue_u8;

/**
 * @file uart.fin
 * @brief UART driver implementation using memory-mapped register access.
 */

/**
 * @struct UARTRegs
 * @brief Memory-mapped UART register block.
 *
 * This structure represents the UART hardware registers.
 */
//#[packed]
struct UARTRegs {
    /** Data register (read/write). */
    data : u32;
    /** Status register (read-only). */
    status : u32;
    /** Control register (read/write). */
    control :  u32;
    /** Clock scaler register (read/write). */
    scaler : u32;
};

interface CharDevSend {
    procedure send(&mut self,
                   nbytes : const usize,
                   output_bytes : & [u8; nbytes], 
                   result : &mut Result<usize; i32>);
};

interface CharDevRecv {
    procedure receive(&mut self,
                      nbytes : const usize,
                      input_bytes : &mut [u8; nbytes], 
                      result : &mut Result<usize; i32>);
};

interface CharDevInit {
    procedure initialize(&mut self);
};

interface CharDevRelayIrq {
    procedure release_tx(&mut self);
    procedure enqueue_rx(&mut self);
};


resource class UARTDriver provides 
        CharDevSend, CharDevInit, CharDevRecv, CharDevRelayIrq {

    // UART registers
    registers: loc UARTRegs;

    //Flag to indicate that there are bytes enqueued that must be sent
    rem_bytes : bool;

    // TX queue
    uart_tx_queue : QueueU8;

    // RX queue
    uart_rx_queue : QueueU8;

    viewer tf_is_full(&self) -> bool {
        let riscv_uart_tf : u32 = 0x00000200 : u32;
        return ((self->registers.status & riscv_uart_tf) != 0 : u32);
    }

    viewer tf_is_empty(&self) -> bool {
        let riscv_uart_te : u32 = 0x00000004 : u32;
        return ((self->registers.status & riscv_uart_te) != 0 : u32);
    }

    viewer rf_is_empty(&self) -> bool {
        let riscv_uart_rf : u32 = 0x00000001 : u32;
        return ((self->registers.status & riscv_uart_rf) != 0 : u32);
    }


    method enable_TX(&priv self) {
        let riscv_uart_txe : u32 = 0x00000002 : u32;
        self->registers.control = self->registers.control | riscv_uart_txe;
        return;
    }

    method enable_RX(&priv self) {
        let riscv_uart_rxe : u32 = 0x00000001 : u32;
        self->registers.control = self->registers.control | riscv_uart_rxe;
        return;
    }

    method enable_RI(&priv self) {
        let riscv_uart_ri : u32 = 0x00000004 : u32;
        self->registers.control = self->registers.control | riscv_uart_ri;
        return;
    }

    method enable_TI(&priv self) {
        let riscv_uart_ti : u32 = 0x00000008 : u32;
        self->registers.control = self->registers.control | riscv_uart_ti;
        return;
    }

    method disable_TF(&priv self) {
        let riscv_uart_tf : u32 = 0xFFFFFCFF : u32;
        self->registers.control = self->registers.control & riscv_uart_tf;
        return;
    }

    method disable_RF(&priv self) {
        let riscv_uart_rf : u32 = 0xFFFFFBFF : u32;
        self->registers.control = self->registers.control & riscv_uart_rf;
        return;
    }

    procedure receive(&mut self, nbytes : const usize,
                      input_bytes : &mut [u8; nbytes], 
                      result : &mut Result<usize; i32>) {

        *result = Ok(0);

        var extracted_elements : usize = 0;

        for i : usize in 0 : usize .. nbytes while (extracted_elements < nbytes && is_empty(&self->uart_rx_queue) == false) {

            var extracted_elem : Option<u8> = None;

            dequeue(&mut(self->uart_rx_queue), &mut extracted_elem);

            match extracted_elem {
                case Some(elem) => {
                    input_bytes[extracted_elements] = elem;
                    extracted_elements = extracted_elements + 1;
                }
                case None => {
                    //queue is empty
                }
            }

        }

        *result = Ok(extracted_elements);

        return;

    }
    
    procedure enqueue_rx(&mut self) {

        var status : Status<i32> = Success;

        for i : usize in 0 .. queue_max_noe while 
                is_full(&self->uart_rx_queue) == false 
                && self->rf_is_empty() == false 
                && (status is Failure) == false {

            var byte : u8 = self->registers.data as u8;

            status = enqueue(&mut(self->uart_tx_queue), byte);

        }

    }


    procedure release_tx(&mut self) {

        if self->rem_bytes {

            var num_elements : usize = 0;

            get_num_enqueued_elems (&(self->uart_tx_queue), &mut num_elements);

            var sent_bytes : usize = 0;
            var extracted_elem : Option<u8> = None;

            for i : usize in 0 : usize .. queue_max_noe while 
                    (sent_bytes < num_elements && self->tf_is_full() == false) {

                dequeue(&mut(self->uart_tx_queue), &mut extracted_elem);

                match extracted_elem {
                    case Some(elem) => {
                        self->registers.data = elem as u32;
                        sent_bytes = sent_bytes + 1;
                    }
                    case None => {
                        //queue is empty
                    }
                }

            }

            if (sent_bytes < num_elements) {
                
                self->rem_bytes = true;

            } else {

                self->rem_bytes = false;
            }
            

        }

        return;
    }

    procedure send(&mut self, nbytes : const usize,
                   output_bytes : & [u8; nbytes], 
                   result : &mut Result<usize; i32>) {

        *result = Ok(0);

        if (self->rem_bytes) {

            var num_elements : usize = 0;
            get_num_enqueued_elems(&(self->uart_tx_queue), &mut num_elements);

            if queue_max_noe - num_elements >= nbytes {

                var status : Status<i32> = Success;

                for i : usize in 0 : usize .. nbytes while (status is Failure) == false {

                    status = enqueue(&mut(self->uart_tx_queue), output_bytes[i]);

                }

                if status is Success {
                    *result = Ok(nbytes);
                } else {
                    *result = Error(QueueFull);
                }

            } else {
                *result = Error(QueueFull);
            }

        } else {

            var sent_bytes : usize = 0;

            if self->tf_is_empty() {

                for i : usize in 0 .. nbytes while (self->tf_is_full() == false) {

                    self->registers.data = output_bytes[i] as u32;
                    sent_bytes = sent_bytes + 1;
                    
                }

            }

            if sent_bytes < nbytes {

                self->rem_bytes = true;

                var left_bytes : usize = nbytes - sent_bytes;
                var num_elements : usize = 0;

                get_num_enqueued_elems(&(self->uart_tx_queue), &mut num_elements);

                if queue_max_noe - num_elements >= left_bytes {

                    var status : Status<i32> = Success;

                    for i : usize in 0 .. nbytes while (i < left_bytes && (status is Failure) == false){

                        status = enqueue(&mut(self->uart_tx_queue), output_bytes[i + sent_bytes]);

                    }

                    if (status is Success) {
                        *result = Ok(nbytes);
                    } else {
                        *result = Error(QueueFull);
                    }

                } else {
                    
                    *result = Error(QueueFull);
                }

            } else {

                *result = Ok(nbytes);
                
            }

        }

        return;

    }


    procedure initialize(&mut self) {

        self->enable_RX();
        self->enable_TX();
        self->enable_RI();
        self->enable_TI();
        self->disable_TF();
        self->disable_RF();

        return;

    }

};


