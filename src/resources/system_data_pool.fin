/**
 * @brief Total number of parameters of type u32 in the system data pool.
 */
constexpr sdp_num_u32_params : usize = 12;

/**
 * @brief Total number of parameters of type u8 in the system data pool.
 */
constexpr sdp_num_u8_params : usize = 18;

/**
 * @brief Last valid parameter ID for u32-type parameters.
 */
constexpr sdp_last_u32_param_id : usize = sdp_num_u32_params - 1;

/**
 * @brief Last valid parameter ID overall (u32 + u8).
 */
constexpr sdp_last_u8_param_id : usize = (sdp_num_u32_params - 1) + sdp_num_u8_params - 1;

/**
 * @brief First parameter ID for u32-type parameters.
 */
constexpr sdp_first_u32_param_id : usize = 0;

/**
 * @brief First parameter ID for u8-type parameters.
 */
constexpr sdp_first_u8_param_id : usize = 11;

/**
 * @enum DataPoolItemType
 * @brief Type of items stored in the system data pool.
 */
enum DataPoolItemType {
    u8_t,         /**< 8-bit unsigned integer parameter */
    u32_t,        /**< 32-bit unsigned integer parameter */
    NoValidPID    /**< Invalid parameter ID */
};

/**
 * @brief Returns the type of a parameter from the system data pool given its PID.
 *
 * This function classifies the parameter as either a u8 or u32 based on its ID,
 * or returns NoValidPID if the ID is out of range.
 *
 * @param PID Parameter identifier (PID).
 * @return DataPoolItemType The type of the parameter: u8_t, u32_t, or NoValidPID.
 */
function sys_data_pool_get_item_type (PID : u16) -> DataPoolItemType {

    var sdp_type : DataPoolItemType = DataPoolItemType::NoValidPID;

    if PID as usize < sdp_last_u32_param_id {

        sdp_type = DataPoolItemType::u32_t;

    } else {

        sdp_type = DataPoolItemType::u8_t;
    }
  
    if (PID as usize >= sdp_last_u8_param_id){
        
        sdp_type = DataPoolItemType::NoValidPID;
    }

    return sdp_type;
}

/**
 * @brief Checks whether a PID is valid in the system data pool.
 *
 * A PID is considered valid if it is less than the last u8 parameter ID.
 *
 * @param PID Parameter identifier.
 * @return bool True if the PID is valid, false otherwise.
 */
function sys_data_pool_is_valid_PID (PID : u16) -> bool {

    var is_valid : bool = PID as usize < sdp_last_u8_param_id;
    return is_valid;

}


/**
 * @brief Determines if a PID can be updated via telecommands.
 *
 * This function returns true for PIDs greater than or equal to 5.
 *
 * @param PID Parameter identifier.
 * @return bool True if the PID can be updated via telecommand, false otherwise.
 */
function sys_data_pool_is_PID_update_via_TC_enabled (PID : u16) -> bool {

    var is_enable : bool = PID >= 5;
    return is_enable;

} 
