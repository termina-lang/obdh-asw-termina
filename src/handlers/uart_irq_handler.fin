import resources.uart;

constexpr uart_dr : u32 = 0x01;
constexpr uart_te : u32 = 0x04;


/**
 * @brief UART interrupt handler for Gaisler UART cores
 * 
 * @details
 * This handler manages interrupts from the Gaisler UART peripheral.
 * It monitors the UART status register to handle two main events:
 * - Transmit End (TE): the transmit buffer is released.
 * - Data Ready (DR): received data is enqueued, and if a full frame is detected,
 *   its size is forwarded to the upper layer through `rx_frame`.
 * 
 * The handler interacts with a `CharDevRelayIrq` interface and the UART hardware registers
 * through memory-mapped access.
 */
handler class UARTIrqHandler {

    irq_entry : sink u32 triggers irq_handler;

    uart : access CharDevRelayIrq;
    uart_registers : loc UARTRegs;

    // Connection to the bottom half of the UART driver
    rx_frame : out usize;


    /**
    * @brief UART interrupt handler for RISC-V-based platforms
    * 
    * @details
    * This handler processes UART hardware interrupts by checking the interrupt status
    * flags in the UART register. It handles two main events:
    * - Transmission end (TE): it releases the UART transmit line.
    * - Data received (DR): it enqueues the received byte(s) into the RX buffer and,
    *   if a complete frame is detected, it forwards the frame size to the upper layer.
    * 
    * The handler communicates with the bottom half of the UART handler through the `rx_frame` output.
    * 
    * @param _vector Interrupt vector ID (unused)
    * @return Status<i32> Returns Success if the interrupt was handled correctly
    */
    action irq_handler(&priv self, _vector : u32) -> Status<i32> {

        var status : Status<i32> = Success;
        let uart_status : u32 = self->uart_registers.status;
       
        if ((uart_status & uart_te) != 0 : u32) {

            self->uart.release_tx();

        }

        if ((uart_status & uart_dr) != 0 : u32) {

            var tc_completed : Option<usize> = None;
            self->uart.enqueue_rx(&mut tc_completed);

            match tc_completed {
                case Some(size) => {
                    self->rx_frame.send(size);
                }
                case None => {
                    // No complete frame received, continue receiving
                }
            }

        }

        return status;
    }
};
