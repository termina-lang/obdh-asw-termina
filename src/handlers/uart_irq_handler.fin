import resources.uart;

constexpr riscv_uart_dr : u32 = 0x01;
constexpr riscv_uart_te : u32 = 0x04;

handler class UARTIrqHandler {

    irq_entry : sink u32 triggers irq_handler;

    uart : access CharDevRelayIrq;
    uart_registers : loc UARTRegs;

    // Connection to the top half of the UART driver
    rx_frame : out usize;

    action irq_handler(&priv self, _vector : u32) -> Status<i32> {

        var status : Status<i32> = Success;
        let uart_status : u32 = self->uart_registers.status;
       
        if ((uart_status & riscv_uart_te) != 0 : u32) {

            self->uart.release_tx();

        }

        if ((uart_status & riscv_uart_dr) != 0 : u32) {

            var tc_completed : Option<usize> = None;
            self->uart.enqueue_rx(&mut tc_completed);

            match tc_completed {
                case Some(size) => {
                    self->rx_frame.send(size);
                }
                case None => {
                    // No complete frame received, continue receiving
                }
            }

        }

        return status;
    }
};
