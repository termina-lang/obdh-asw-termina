import resources.uart;
import resources.system_data_pool;
import resources.gpio_driver;

const Zero : u32 = 2048;
const Unit : u32 = 204;
const Dec : u32 = 20;

handler class Init {

    uart : access UARTDriver;
    gpio_driver : access GPIODrvIface;
    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;
    system_init_ev : sink TimeVal triggers init;


    //This function should access to permanent memory and extract the real system_data_pool values
    action init(&priv self, _boot_time : TimeVal) -> Status<i32> {

        var ret : Status<i32> = Success;

        // Initialize the UART driver
        self->uart.riscv_uart_enable_RX();
        self->uart.riscv_uart_enable_TX();
        self->uart.riscv_uart_enable_RI();

        //Initialize GPIO driver
        self->gpio_driver.init_gpio();

        for i : usize in 5 .. sdp_num_u32_params {
            self->system_data_pool_u32.store_index(i,i as u32);
        }
        self->system_data_pool_u32.store_index(0,Zero + 1*Unit + 1*Dec);
        self->system_data_pool_u32.store_index(1,Zero + 2*Unit + 4*Dec);
        self->system_data_pool_u32.store_index(2,Zero + 3*Unit + 2*Dec);
        self->system_data_pool_u32.store_index(3,Zero + 4*Unit + 9*Dec);
        self->system_data_pool_u32.store_index(4,Zero + 5*Unit);

        for i : usize in 0 .. sdp_num_u8_params {
            self->system_data_pool_u8.store_index(i,i as u8);
        }



        return ret;
    }
};