import resources.uart;
import resources.system_data_pool;
import resources.gpio_driver;

handler class Init {

    uart : access CharDevInit;
    gpio_driver : access GPIODrvIface;
    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>;
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;
    system_init_ev : sink TimeVal triggers init;


    //This function should access to permanent memory and extract the real system_data_pool values
    action init(&priv self, _boot_time : TimeVal) -> Status<i32> {

        var ret : Status<i32> = Success;

        self->uart.initialize();
        self->gpio_driver.init_gpio();

        for i : usize in 0 .. sdp_num_u32_params {
            self->system_data_pool_u32.store_index(i,i as u32);
        }
        for i : usize in 0 .. sdp_num_u8_params {
            self->system_data_pool_u8.store_index(i,i as u8);
        }


        return ret;
    }
};