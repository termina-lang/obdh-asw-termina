import resources.uart;
import resources.system_data_pool;
import resources.gpio_driver;

/**
 * @brief Constant value representing zero base offset
 */
const Zero : u32 = 2048;

/**
 * @brief Constant unit value used for system data pool initialization
 */
const Unit : u32 = 204;

/**
 * @brief Constant decimal multiplier used for system data pool initialization
 */
const Dec : u32 = 20;

/**
 * @brief Initialization handler class responsible for system startup tasks
 */
handler class Init {

    uart : access CharDevInit;                         /**< UART driver access */
    gpio_driver : access GPIODrvIface;                /**< GPIO driver access */
    system_data_pool_u32 : access AtomicArrayAccess<u32; sdp_num_u32_params>; /**< Access to 32-bit system data pool atomic array */
    system_data_pool_u8 : access AtomicArrayAccess<u8; sdp_num_u8_params>;   /**< Access to 8-bit system data pool atomic array */
    system_init_ev : sink TimeVal triggers init;      /**< Event sink that triggers initialization */

    /**
    * @brief Initializes hardware drivers and system data pool values at boot time
    * 
    * @details
    * This function should access permanent memory and extract the real system_data_pool values.
    * It performs initialization of UART and GPIO drivers,
    * and fills the system data pools with predefined values.
    * 
    * @param _boot_time Current system boot time (unused parameter)
    * @return Status<i32> Returns Success on completion
    */
    action init(&priv self, _boot_time : TimeVal) -> Status<i32> {

        var ret : Status<i32> = Success;

        // Initialize the UART driver
        self->uart.initialize();

        //Initialize GPIO driver
        self->gpio_driver.init_gpio();

        // Initialize system_data_pool_u32 elements from index 5 onwards with incremental values
        for i : usize in 5 .. sdp_num_u32_params {
            self->system_data_pool_u32.store_index(i,i as u32);
        }

        // Set specific values for the first five elements of system_data_pool_u32
        self->system_data_pool_u32.store_index(0,Zero + 1*Unit + 1*Dec);
        self->system_data_pool_u32.store_index(1,Zero + 2*Unit + 4*Dec);
        self->system_data_pool_u32.store_index(2,Zero + 3*Unit + 2*Dec);
        self->system_data_pool_u32.store_index(3,Zero + 4*Unit + 9*Dec);
        self->system_data_pool_u32.store_index(4,Zero + 5*Unit);

         // Initialize all system_data_pool_u8 elements with their index values
        for i : usize in 0 .. sdp_num_u8_params {
            self->system_data_pool_u8.store_index(i,i as u8);
        }


        return ret;
    }
};