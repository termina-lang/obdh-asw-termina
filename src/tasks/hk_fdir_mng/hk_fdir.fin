import service_libraries.pus_services.pus_service3.pus_service3;
import service_libraries.pus_services.pus_service5.pus_service5;
import service_libraries.pus_services.pus_service12.pus_service12;
import service_libraries.pus_services.pus_service19.pus_service19;
import service_libraries.errors;

const num_actions_per_second : usize = 2;


task class HouseKeepingFDIR {


    hk_fdir_timer_ev : sink TimeVal triggers do_hk_fdir;
    hkfdir_message_queue_input: in box TCHandlerT triggers exec_tc;
    
    action_tc_message_queue_output: out box TCHandlerT;
    a_tc_handler_pool : access Allocator<TCHandlerT>;

    pus_service_3 : access PUSS3Iface;
    pus_service_12 : access PUSS12Iface;
    pus_service_5 : access PUSS5Iface;
    pus_service_19 : access PUSS19Iface; 
    pus_service_4 : access PUSS4Iface;



    method do_fdir(&priv self) -> Status<i32> {

        var result : Status<i32> = Success;

        var is_monitor_enabled : bool = false;

        for i : usize in 0 .. max_num_pmon_ids {

            self->pus_service_12.is_PMON_enabled(i, &mut is_monitor_enabled);

            if(is_monitor_enabled){

                var evID : u16 = 0;
                var fault_info : FaultInfo = FaultInfo::Empty;
                var event_triggered : bool = false;

                self->pus_service_12.do_monitoring(i as u16, &mut evID, &mut fault_info, &mut event_triggered);

                if(event_triggered){

                    var is_Ev_ID_enabled : bool = false;
                    self->pus_service_5.is_Ev_ID_enabled_ext(evID, &mut is_Ev_ID_enabled);

                    if(is_Ev_ID_enabled){

                        var res: MyResult = MyResult::Ok;

                        self->pus_service_5.build_and_tx_tm_5_x(&mut res, evID, fault_info);
                        self->pus_service_19.manage_event_action(evID);
                    } 

                }

            }
            
        }

        

        return result;
    }

    action do_hk_fdir(&priv self, _current_time : TimeVal) -> Status<i32> {

        var result : Status<i32> = Success;

        self->pus_service_4.update_all_stats();
        self->pus_service_3.do_hk(&mut result);
        result = self->do_fdir();

        var pending_actions : [usize; 4] = [0;4];
        self->pus_service_19.get_pending_action_number(&mut pending_actions);

        var n : usize = 4;

        if (pending_actions[3] > 0){

            n = 3;

        } else if (pending_actions[2] > 0){

            n = 2;

        } else if (pending_actions[1] > 0){

            n = 1;

        } else if (pending_actions[0] > 0){

            n = 0;

        } else {
            //Do nothing
        }

        if (n < 4){

            var tc_handler : Option<box TCHandlerT> = None;
            self->a_tc_handler_pool.alloc(&mut tc_handler);
            
            match tc_handler {

                case Some(b_tc_handler) => {

                    self->pus_service_19.extract_action(n, &mut b_tc_handler);
                    self->action_tc_message_queue_output.send(b_tc_handler);

                }
                case None => {
                
                }
            }
        }


        return result;
    }

    action exec_tc(&priv self, tc_handler : box TCHandlerT)-> Status<i32> {

        var res : Status<i32> = Success;

        var tc_type : u8 = tc_handler.df_header.type;

        if (tc_type == 3){

            self->pus_service_3.exec_tc(&mut tc_handler, &mut res);

        } else if (tc_type == 5){

            self->pus_service_5.exec_tc(&mut tc_handler, &mut res);

        } else if (tc_type == 12){

            self->pus_service_12.exec_tc(&mut tc_handler, &mut res);

        } else if (tc_type == 19){

            self->pus_service_19.exec_tc(&mut tc_handler, &mut res);

        } 
        else if (tc_type == 4){

            self->pus_service_4.exec_tc(&mut tc_handler, &mut res);

        }else {

            res = Failure(ACCEPTANCE_ERROR); 
            //This is an error in acceptance, could be modeled as an event
        }
        

        self->a_tc_handler_pool.free(tc_handler);

        return res;
    }


};