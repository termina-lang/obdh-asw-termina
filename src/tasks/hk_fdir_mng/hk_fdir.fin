import service_libraries.pus_services.pus_service3;
import service_libraries.pus_services.pus_service5.pus_service5;
import service_libraries.pus_services.pus_service12.pus_service12;
import service_libraries.pus_services.pus_service19;

const num_actions_per_second : usize = 2;


task class HouseKeepingFDIR {


    hk_fdir_timer_ev : sink TimeVal triggers do_hk_fdir;
    action_tc_message_queue_output: out box TCDescriptorT;
    a_tc_descriptor_pool : access Allocator<TCDescriptorT>;

    pus_service_3 : access PUSS3Iface;
    pus_service_12 : access PUSS12Iface;
    pus_service_5 : access PUSS5Iface;
    pus_service_19 : access PUSS19Iface; 

    action do_hk_fdir(&priv self, _current_time : TimeVal) -> Result {

        var event_list : EventList = {
            events = [{ev_RID = 0,
                       ev_aux_data = [0; event_aux_data_max_size],
                       ev_aux_data_size = 0}; max_num_events],
            num_events = 0
        };

        var res : Result = Result::Ok;

        self->pus_service_3.do_hk(&mut res);
        self->pus_service_12.do_monitoring(&mut event_list, &mut res);
        self->pus_service_5.build_event_list_tms(&mut event_list, &mut res);
        self->pus_service_19.manage_event_actions(&mut event_list);
        self->manage_actions();
        
        return res;
    } 

    method manage_actions(&priv self){

        var pending_actions : [usize; 4] = [0;4];
        self->pus_service_19.get_pending_action_number(&mut pending_actions);

        var n : u8 = 0;

        for i: usize in 0 .. 3 while n < 2{

            if (pending_actions[3-i] >= 2){

                var tc_descriptor1 : Option<box TCDescriptorT> = None;
                self->a_tc_descriptor_pool.alloc(&mut tc_descriptor1);
            
                match tc_descriptor1 {

                    case Some(descriptor) => {

                        self->pus_service_19.extract_action(3-i, &mut descriptor);
                        self->action_tc_message_queue_output.send(descriptor);
                        n = n + 1;

                    }
                    case None => {
                    
                    }

                }

                var tc_descriptor2 : Option<box TCDescriptorT> = None;
                self->a_tc_descriptor_pool.alloc(&mut tc_descriptor2);
            
                match tc_descriptor2 {

                    case Some(descriptor) => {

                        self->pus_service_19.extract_action(3-i, &mut descriptor);
                        self->action_tc_message_queue_output.send(descriptor);
                        n = n + 1;

                    }
                    case None => {
                    
                    }

                }
            } else if (pending_actions[3-i] == 1){

                var tc_descriptor : Option<box TCDescriptorT> = None;
                self->a_tc_descriptor_pool.alloc(&mut tc_descriptor);
            
                match tc_descriptor {

                    case Some(descriptor) => {

                        self->pus_service_19.extract_action(3-i, &mut descriptor);
                        self->action_tc_message_queue_output.send(descriptor);
                        n = n + 1;

                    }
                    case None => {
                    
                    }

                }
            } else {
                //Do nothing
            }


            

        }

        return;

        
    }
};