import service_libraries.pus_services.pus_service3;
import service_libraries.pus_services.pus_service5.pus_service5;
import service_libraries.pus_services.pus_service12.pus_service12;
import service_libraries.pus_services.pus_service19;

const num_actions_per_second : usize = 2;


task class HouseKeepingFDIR {


    hk_fdir_timer_ev : sink TimeVal triggers do_hk_fdir;
    hkfdir_message_queue_input: in box TCDescriptorT triggers exec_tc;
    
    action_tc_message_queue_output: out box TCDescriptorT;
    a_tc_descriptor_pool : access Allocator<TCDescriptorT>;

    pus_service_3 : access PUSS3Iface;
    pus_service_12 : access PUSS12Iface;
    pus_service_5 : access PUSS5Iface;
    pus_service_19 : access PUSS19Iface; 


    action do_hk_fdir(&priv self, _current_time : TimeVal) -> Result {

        var event_list : EventList = {
            events = [{ev_RID = 0,
                       ev_aux_data = [0; event_aux_data_max_size],
                       ev_aux_data_size = 0}; max_num_events],
            num_events = 0
        };

        var res : Result = Result::Ok;

        self->pus_service_3.do_hk(&mut res);
        self->pus_service_12.do_monitoring(&mut event_list, &mut res);
        self->pus_service_5.build_event_list_tms(&mut event_list, &mut res);
        self->pus_service_19.manage_event_actions(&mut event_list);
        //self->manage_actions();

        var pending_actions : [usize; 4] = [0;4];
        self->pus_service_19.get_pending_action_number(&mut pending_actions);

        var n : usize = 4;

        if (pending_actions[3] > 0){

            n = 3;

        } else if (pending_actions[2] > 0){

            n = 2;

        } else if (pending_actions[1] > 0){

            n = 1;

        } else if (pending_actions[0] > 0){

            n = 0;

        } else {
            //Do nothing
        }

        if (n < 4){

            var tc_descriptor : Option<box TCDescriptorT> = None;
            self->a_tc_descriptor_pool.alloc(&mut tc_descriptor);
            
            match tc_descriptor {

                case Some(descriptor) => {

                    self->pus_service_19.extract_action(n, &mut descriptor);
                    self->action_tc_message_queue_output.send(descriptor);

                }
                case None => {
                
                }
            }


        } else {
            //no actions
        }
        
        
        return res;
    } 

/*
    method manage_actions(&priv self){

        var pending_actions : [usize; 4] = [0;4];
        self->pus_service_19.get_pending_action_number(&mut pending_actions);

        var n : u8 = 0;

        for i: usize in 0 .. 3 while n < 2{

            if (pending_actions[3-i] >= 2){

                var tc_descriptor1 : Option<box TCDescriptorT> = None;
                self->a_tc_descriptor_pool.alloc(&mut tc_descriptor1);
            
                match tc_descriptor1 {

                    case Some(descriptor) => {

                        self->pus_service_19.extract_action(3-i, &mut descriptor);
                        self->action_tc_message_queue_output.send(descriptor);
                        n = n + 1;

                    }
                    case None => {
                    
                    }

                }

                var tc_descriptor2 : Option<box TCDescriptorT> = None;
                self->a_tc_descriptor_pool.alloc(&mut tc_descriptor2);
            
                match tc_descriptor2 {

                    case Some(descriptor) => {

                        self->pus_service_19.extract_action(3-i, &mut descriptor);
                        self->action_tc_message_queue_output.send(descriptor);
                        n = n + 1;

                    }
                    case None => {
                    
                    }

                }
            } else if (pending_actions[3-i] == 1){

                var tc_descriptor : Option<box TCDescriptorT> = None;
                self->a_tc_descriptor_pool.alloc(&mut tc_descriptor);
            
                match tc_descriptor {

                    case Some(descriptor) => {

                        self->pus_service_19.extract_action(3-i, &mut descriptor);
                        self->action_tc_message_queue_output.send(descriptor);
                        n = n + 1;

                    }
                    case None => {
                    
                    }

                }
            } else {
                //Do nothing
            }


            

        }

        

        return;

        
    }
    */

    action exec_tc(&priv self, tc_descriptor : box TCDescriptorT)-> Result {

        var res : Result = Result::Ok;

        var tc_type : u8 = get_type(&(tc_descriptor.tc_bytes));
        var subtype : u8 = get_subtype(&(tc_descriptor.tc_bytes));

        if (tc_type == 3){


            if (subtype == 5){

                self->pus_service_3.exec3_5TC(&tc_descriptor, &mut res);
            } 
            else if (subtype == 6){

                self->pus_service_3.exec3_6TC(&tc_descriptor, &mut res);

            } else if (subtype == 31){

                self->pus_service_3.exec3_31TC(&tc_descriptor, &mut res);

            } else {

                //This is an error in acceptance, could be modeled as an event
                /* If the acceptance process is correct, this point should not be reached */
            }


        } else if (tc_type == 5){

            if (subtype == 5){

                self->pus_service_5.exec5_5TC(&tc_descriptor, &mut res);
            } 
            else if (subtype == 6){

                self->pus_service_5.exec5_6TC(&tc_descriptor, &mut res);

            } else {

                //This is an error in acceptance, could be modeled as an event
                /* If the acceptance process is correct, this point should not be reached */
            }

        } else if (tc_type == 12){

            if (subtype == 1){

                self->pus_service_12.exec12_1TC(&tc_descriptor, &mut res);
            } 
            else if (subtype == 2){

                self->pus_service_12.exec12_2TC(&tc_descriptor, &mut res);

            } else if (subtype == 5){

                self->pus_service_12.exec12_5TC(&tc_descriptor, &mut res);

            } else {

                //This is an error in acceptance, could be modeled as an event
                /* If the acceptance process is correct, this point should not be reached */
            }

        } else if (tc_type == 19){

            if (subtype == 1){

                self->pus_service_19.exec19_1TC(&tc_descriptor, &mut res);
            } 
            else if (subtype == 2){

                self->pus_service_19.exec19_2TC(&tc_descriptor, &mut res);

            } else if (subtype == 4){

                self->pus_service_19.exec19_4TC(&tc_descriptor, &mut res);
            
            } else if (subtype == 5){

                self->pus_service_19.exec19_5TC(&tc_descriptor, &mut res);

            } else {

                //This is an error in acceptance, could be modeled as an event
                /* If the acceptance process is correct, this point should not be reached */
            }

        } else {

            //This is an error in acceptance, could be modeled as an event
        }
        

        self->a_tc_descriptor_pool.free(tc_descriptor);

        return res;
    }


};