import service_libraries.tc_ccsds_pus_format;
import service_libraries.tm_ccsds_pus_format;
import service_libraries.pus_services.pus_service1;
import service_libraries.pus_services.pus_service2;
import service_libraries.pus_services.pus_service9;
import service_libraries.pus_services.pus_service17;
import service_libraries.pus_services.pus_service128;


/**
 * @interface MngTCExecIface
 * @brief Interface for managing the execution and processing of telecommands.
 * 
 * This interface provides procedures to handle priority execution, 
 * telecommand acceptance, and telecommand rejection.
 */
interface MngTCExecIface {
  procedure PUS_prio_exec_tc (&mut self, tc_handler : &mut TCHandler, ret: &mut Status<i32>, reebot_flag: &mut bool);
  procedure mng_tc_acceptation (&mut self, tc_handler: &TCHandler, ret: &mut Status<i32>);
  procedure mng_tc_rejection (&mut self, tc_handler: &TCHandler, tc_status : &TCStatus, ret: &mut Status<i32>);
};


/**
 * @class ManagerTCExecutor
 * @brief Resource class that implements the telecommand management interface.
 * 
 * Manages the execution of priority telecommands and generates telemetry packets for
 * acceptance and rejection. Supports error reporting in case of unhandled telecommands.
 */
resource class ManagerTCExecutor provides MngTCExecIface {

    /// Pointer to the interface of PUS Service 17.
    pus_service_17 : access PUSS17Iface;

    /// Pointer to the interface of PUS Service 2.
    pus_service_2 : access PUSS2Iface;

    /// Pointer to the interface of PUS Service 9.
    pus_service_9 : access PUSS9Iface;

    /// Pointer to the interface of PUS Service 128.
    pus_service_128 : access PUSS128Iface; 
    
    pus_service_1 : access PUSService1Iface;


    /**
     * @brief Executes the telecommand with priority routing.
     * 
     * Routes the telecommand to the appropriate PUS service based on its type.
     * If the type is unknown, an error acceptance report is generated.
     * 
     * @param[in,out] tc_handler Pointer to the telecommand handler.
     * @param[out] ret Status result of the execution.
     * @param[out] reebot_flag Flag to indicate if a reboot is required.
     */
    procedure PUS_prio_exec_tc (&mut self, tc_handler : &mut TCHandler, status: &mut Status<i32>, reebot_flag: &mut bool) {

        var tc_type : u8 = tc_handler->df_header.type;

        if (tc_type == 17){

            self->pus_service_17.exec_tc(tc_handler, status);

        } else if (tc_type == 2){

            self->pus_service_2.exec_tc(tc_handler, status);

        } else if (tc_type == 9){

            self->pus_service_9.exec_tc(tc_handler, status);
    
        } else if (tc_type == 128){

            self->pus_service_128.exec_tc(tc_handler, status, reebot_flag);
        
        } else {

            self->pus_service_1.send_tm_1_4_error_in_acceptance(
                    tc_handler->packet_header.packet_id,
                    tc_handler->packet_header.packet_seq_ctrl,
                    status);
                    
        }
        
        return;
    }


    /**
     * @brief Sends an acceptance telemetry message.
     * 
     * If telemetry handler allocation is successful and acknowledgement is enabled,
     * a TM[1,1] acceptance packet is built and sent through the TM channel.
     * 
     * @param[in] tc_handler Pointer to the telecommand handler.
     * @param[out] ret Status result of the operation.
    */
    procedure mng_tc_acceptation (&mut self, tc_handler: &TCHandler, status: &mut Status<i32>) {

        self->pus_service_1.notify_tm_1_1(
                tc_handler->packet_header.packet_id, 
                tc_handler->packet_header.packet_seq_ctrl, 
                tc_handler->df_header.flag_ver_ack,
                status);

        return;
    }


    /**
     * @brief Sends a rejection telemetry message.
     * 
     * If telemetry handler allocation is successful, a TM[1,2] rejection packet is built
     * and sent through the TM channel. The acceptance status is evaluated before building the packet.
     * 
     * @param[in] tc_handler Pointer to the telecommand handler.
     * @param[out] ret Status result of the operation.
    */
    procedure mng_tc_rejection (&mut self, tc_handler: &TCHandler, tc_status : &TCStatus, status: &mut Status<i32>) {

        self->pus_service_1.send_tm_1_2(tc_status, tc_handler, status);

        return;
    }

};