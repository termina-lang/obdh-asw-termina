import service_libraries.tc_ccsds_pus_format;
import service_libraries.tm_ccsds_pus_format;
import service_libraries.pus_services.pus_service1.pus_service1;
import service_libraries.pus_services.pus_service2;
import service_libraries.pus_services.pus_service9.pus_service9;
import service_libraries.pus_services.pus_service17;
import service_libraries.pus_services.pus_service128;
import resources.tm_counter;
import resources.tm_channel;


interface MngTCExecIface {
  procedure PUS_prio_exec_tc (&mut self, tc_handler : &mut TCHandlerT, ret: &mut Result);
  procedure mng_tc_acceptation (&mut self, tc_handler: &TCHandlerT, ret: &mut Result);
  procedure mng_tc_rejection (&mut self, tc_handler: &TCHandlerT, ret: &mut Result);
};

resource class ManagerTCExecutor provides MngTCExecIface {

    tm_channel: access TMChannelIface;
    tm_counter: access TMCounterIface;
    a_tm_handler_pool : access Allocator<TMHandlerT>;

    pus_service_17 : access PUSS17Iface;
    pus_service_2 : access PUSS2Iface;
    pus_service_9 : access PUSS9Iface;
    //pus_service_128 : access PUSS128Iface;  

    procedure PUS_prio_exec_tc (&mut self, tc_handler : &mut TCHandlerT, ret: &mut Status) {

        var tc_type : u8 = tc_handler->df_header.type;

        if (tc_type == 17){

            self->pus_service_17.exec_tc(tc_handler, ret);

        } else if (tc_type == 2){

            self->pus_service_2.exec_tc(tc_handler, ret);

        } else if (tc_type == 9){

            self->pus_service_9.exec_tc(tc_handler, ret);
    
        /*} else if (tc_type == 128){

            self->pus_service_128.exec_tc(tc_handler, ret);
        */
        } else {

            *ret = Status::Failure(ERROR_IN_ACCEPTANCE); //UNREACHABLE_BRANCH OR ERROR_IN_ACCEPTANCE?
        }
        
        return;
    }

    procedure mng_tc_acceptation (&mut self, tc_handler: &TCHandlerT, ret: &mut Status) {

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);
                //generar TM(1,1)
                build_tm_1_1(&mut b_tm_handler, tm_count, tc_handler->packet_header.packet_id, tc_handler->packet_error_ctrl, ret);
                self->tm_channel.send_tm(b_tm_handler, ret);
                        
            }
            case None => {
                *ret = Result::Error;
            }
        }

        return;
    }


    procedure mng_tc_rejection (&mut self, tc_handler: &TCHandlerT, ret: &mut Status) {

        var tm_handler : Option<box TMHandlerT> = None;
        self->a_tm_handler_pool.alloc(&mut tm_handler);
        var tc_status : TCStatus = try_tc_acceptation(&(tc_handler->tc_descriptor));

        match tm_handler {

            case Some(b_tm_handler) => {

                var tm_count : u16 = 0 : u16;
                self->tm_counter.get_next_tm_count(&mut tm_count);
                //generar TM(1,2)
                build_tm_1_2(&tc_status, &mut b_tm_handler, tm_count, tc_handler, ret);
                self->tm_channel.send_tm(b_tm_handler, ret);
            
            }
            case None => {
                *ret = Result::Error;
            }
        }
        return;
    }



};