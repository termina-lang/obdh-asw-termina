import tasks.icu_manager.mng_tc_executor;


/**
 * @class ICUManager
 * @brief Manages the execution flow of Telecommands (TCs) in the ICU.
 *
 * This task class handles the reception and classification of TCs. It determines whether the TC
 * should be executed as a housekeeping/FDIR, background, or priority command, and forwards it accordingly.
 * It also processes action-type TCs and handles TC rejection and reboot logic when necessary.
 */
task class ICUManager {

    /// @var tc_message_queue_input
    /// @brief Input message queue for receiving regular telecommands.
    tc_message_queue_input: in box TCHandler triggers process_tc;

    /// @var action_tc_message_queue_input
    /// @brief Input message queue for receiving action telecommands.
    action_tc_message_queue_input: in box TCHandler triggers process_action_tc;

    /// @var a_tc_handler_pool
    /// @brief Allocator interface for managing TC handler memory.
    a_tc_handler_pool : access Allocator<TCHandler>;

    /// @var hkfdir_message_queue_output
    /// @brief Output queue for housekeeping/FDIR-related TCs.
    hkfdir_message_queue_output: out box TCHandler;

    /// @var bkg_message_queue_output
    /// @brief Output queue for background telecommands.
    bkg_message_queue_output: out box TCHandler;

    /// @var tc_executor
    /// @brief Interface for TC execution and rejection management logic.
    tc_executor: access MngTCExecIface;



    /**
     * @brief Receives standard telecommands from the message queue and processes them.
     * 
     * This action determines whether a TC is acceptable and classifies it based on its execution category:
     * housekeeping/FDIR, background, or priority. In the case of priority execution, it directly invokes
     * the corresponding execution path. If rejection or undefined status is returned, it performs
     * the corresponding management logic.
     * 
     * @param[in] self Reference to the ICUManager instance.
     * @param[in] tc_handler Boxed TCHandler instance containing the telecommand to process.
     * @return Status<i32> Success or failure code of the operation.
     */
    action process_tc(&priv self, tc_handler: box TCHandler) -> Status<i32> {

        var ret : Status<i32> = Success;
        var reebot_flag : bool = false;

        var current_tc_status : TCStatus = try_tc_acceptation(&(tc_handler.tc_descriptor));

        match current_tc_status.acceptation_status {

            case Accepted => {

                self->tc_executor.mng_tc_acceptation(&(tc_handler), &mut ret);

                match current_tc_status.execution_status {

                    case  ExecCtrlHK_FDIRTC => {
                    
                        self->hkfdir_message_queue_output.send(tc_handler);
                    }
                    case ExecCtrlBKGTC => {
                        
                        self->bkg_message_queue_output.send(tc_handler);
                        
                    }
                    case ExecCtrlPrioTC => {

                        self->tc_executor.PUS_prio_exec_tc(&mut tc_handler, &mut ret, &mut reebot_flag);

                        self->a_tc_handler_pool.free(tc_handler);

                        if(reebot_flag) {
                            reebot_flag = false;
                            reboot;
                        }
                        
                    }
                    case Undefined => {
                        
                        self->a_tc_handler_pool.free(tc_handler);
                    }

                }    
            }
            case Rejected => { 

                self->tc_executor.mng_tc_rejection(&(tc_handler), &mut ret);
                self->a_tc_handler_pool.free(tc_handler);
            }
            case Undefined => {
                
                self->a_tc_handler_pool.free(tc_handler);
            }
        }

        
        return ret;  

                  
    }


    /**
     * @brief Processes action telecommands from the message queue.
     * 
     * This action handles a subset of TCs defined as "action TCs", using the same
     * classification logic as standard TCs (HK/FDIR, background, or priority).
     * Priority TCs are executed immediately and may trigger a system reboot if needed.
     * 
     * @param[in] self Reference to the ICUManager instance.
     * @param[in] tc_handler Boxed TCHandler instance representing the action TC.
     * @return Status<i32> Success or failure code of the operation.
     */
    action process_action_tc(&priv self, tc_handler: box TCHandler) -> Status<i32> {

        var ret : Status<i32> = Success;
        var reebot_flag : bool = false;

        var execution_status : TCExecutionCtrl = handle_tc((&(tc_handler.tc_descriptor)));

        match execution_status {

            case  ExecCtrlHK_FDIRTC => {
            
                self->hkfdir_message_queue_output.send(tc_handler);
            }
            case ExecCtrlBKGTC => {
                
                self->bkg_message_queue_output.send(tc_handler);
             
            }
            case ExecCtrlPrioTC => {

                self->tc_executor.PUS_prio_exec_tc(&mut tc_handler, &mut ret, &mut reebot_flag);
                self->a_tc_handler_pool.free(tc_handler); 

                if(reebot_flag) {
                    reebot_flag = false;
                    reboot;
                }
            }
            case Undefined => {
                
                self->a_tc_handler_pool.free(tc_handler);
            }

        }
        
        
        return ret;  

             
    }


};