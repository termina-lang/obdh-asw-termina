import{modules.serialize, modules.ccsds_pus_format,resources.tm_channel,modules.epd_pus_tmtc, modules.crc}


task class TCEPDManager {

    a_tm_descriptor_pool : access Allocator<TMDescriptorT>;
    tc_descriptor_pool: access Allocator<TCDescriptorT>;
    hkfdir_message_queue_output: out dyn TCDescriptorT;
    bkg_message_queue_output: out dyn TCDescriptorT;
    tm_channel: access TMChannel;
    pus_service_1 : access PUSService1;

    tc_message_queue_input: in dyn TCDescriptorT triggers process_tc;



    action process_tc(&priv self, tc_descriptor: dyn TCDescriptorT) -> Result {

        var ret : Result = Result::Ok;

        var tc_status : TCStatus;

        self->pus_service_1.try_tc_acceptation(&tc_descriptor, &mut tc_status);

        match tc_status.acceptation_status {

            case TCAcceptationOK => {
                
                //generar TM(1,1)
                var tm_descriptor : TMDescriptorT;
                var tm_count : u16 = 0 : u16;
                self->tm_channel.get_next_tm_count(&mut tm_count);
                self->pus_service_1.build_tm_1_1(&mut descriptor, &tc_descriptor, tm_count, &mut ret);


                match tc_status.tc_execution_status {

                    case ExecCtrlReboot => {
                        //Ejecutar tc como prioritario
                    }
                    case  ExecCtrlHK_FDIRTC => {
                    
                        self->hk_message_queue_output.send(tc_descriptor);
                    }
                    case ExecCtrlBKGTC => {
                        //Enviar tc a tarea bkg
                    }
                    case ExecCtrlPrioTC => {
                        //Ejecutar tc como prioritario
                    }

                }
            }
            idk => {  //Esto no está implementado en el lenguaje, pero sería muy útil y eficiente
               
                //generar TM(1,2)
                var tm_descriptor : TMDescriptorT;
                var tm_count : u16 = 0 : u16;
                self->tm_channel.get_next_tm_count(&mut tm_count);
                self->pus_service_1.build_tm_1_2(&mut descriptor, tm_count, &tc_descriptor, &mut ret);
                

            }
        }
    
        return ret;            
    }

        
       


};