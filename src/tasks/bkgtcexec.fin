import service_libraries.pus_services.pus_service1;
import service_libraries.pus_services.pus_service20;
import service_libraries.pus_services.pus_service6;
import service_libraries.serialize;
import resources.system_data_pool;
import service_libraries.tc_ccsds_pus_format;
import service_libraries.tm_ccsds_pus_format;
import resources.tm_counter;


/**
 * @brief Task class responsible for executing background telecommands (TCs).
 * 
 * Handles incoming telecommands from a message queue, dispatching them to the appropriate
 * PUS service handler based on the telecommand type. Manages resource allocation and freeing
 * of TC handler objects.
 */
task class PUSBKGTCExecutor {

    /**
     * @brief Input message queue for background telecommands.
     * 
     * Telecommands received in this queue trigger the execution action.
     */
    bkg_message_queue_input: in box TCHandler triggers exec_tc;

    /// Allocator for TCHandler objects.
    a_tc_handler_pool : access Allocator<TCHandler>;

    /// Pointer to the interface of PUS Service 20.
    pus_service_20 : access PUSS20Iface;

    /// Pointer to the interface of PUS Service 20.
    pus_service_6 : access PUSS6Iface;

    pus_service_1 : access PUSService1Iface;

    /**
     * @brief Executes an incoming telecommand.
     * 
     * Inspects the telecommand type and delegates execution to the corresponding
     * PUS service. If the type is not supported, it triggers the generation of a
     * TM[1,4] error message to report the acceptance failure.
     * 
     * @param tc_handler Boxed telecommand handler containing the TC to execute.
     * @return Status<i32> Result of the execution: Success or Failure with an error code.
    */
    action exec_tc(&priv self, tc_handler : box TCHandler) -> Status<i32> {

        var res : Status<i32> = Success;

        var tc_type : u8 = get_type(&(tc_handler.tc_descriptor.tc_bytes));

        if (tc_type == 20) {

            self->pus_service_20.exec_tc(&mut tc_handler, &mut res);

        } else if (tc_type == 6) {

            self->pus_service_6.exec_tc(&mut tc_handler, &mut res);

        } else {

            self->pus_service_1.send_tm_1_4_error_in_acceptance(
                    tc_handler.packet_header.packet_id,
                    tc_handler.packet_header.packet_seq_ctrl,
                    &mut res);
                    
        }

        self->a_tc_handler_pool.free(tc_handler);

        return res;
    }

};