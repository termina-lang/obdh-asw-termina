import service_libraries.pus_services.pus_service1.pus_service1;
import service_libraries.pus_services.pus_service20.pus_service20;
import service_libraries.serialize;
import resources.system_data_pool;
import service_libraries.tc_ccsds_pus_format;
import service_libraries.tm_ccsds_pus_format;
import resources.tm_counter;


/**
 * @brief Task class responsible for executing background telecommands (TCs).
 * 
 * Handles incoming telecommands from a message queue, dispatching them to the appropriate
 * PUS service handler based on the telecommand type. Manages resource allocation and freeing
 * of TC handler objects.
 */
task class PUSBKGTCExecutor {

    /**
     * @brief Input message queue for background telecommands.
     * 
     * Telecommands received in this queue trigger the execution action.
     */
    bkg_message_queue_input: in box TCHandlerT triggers exec_tc;

    /// Allocator for TCHandler objects.
    a_tc_handler_pool : access Allocator<TCHandlerT>;

    /// Pointer to the interface of PUS Service 20.
    pus_service_20 : access PUSS20Iface;

    /// Pointer to the interface of PUS Service 9 (used for time retrieval).
    pus_service_9 : access PUSS9Iface;

    /// Interface for telemetry (TM) channel to send telemetry packets.
    tm_channel: access TMChannelIface;

    /// Interface to manage telemetry count.
    tm_counter: access TMCounterIface;

    /// Allocator for TMHandler objects.
    a_tm_handler_pool : access Allocator<TMHandlerT>;

  

    /**
     * @brief Executes an incoming telecommand.
     * 
     * Inspects the telecommand type and delegates execution to the corresponding
     * PUS service. If the type is not supported, it triggers the generation of a
     * TM[1,4] error message to report the acceptance failure.
     * 
     * @param tc_handler Boxed telecommand handler containing the TC to execute.
     * @return Status<i32> Result of the execution: Success or Failure with an error code.
    */
    action exec_tc(&priv self, tc_handler : box TCHandlerT) -> Status<i32> {

        var res : Status<i32> = Success;

        var tc_type : u8 = get_type(&(tc_handler.tc_descriptor.tc_bytes));

        if (tc_type == 20) {

            self->pus_service_20.exec_tc(&mut tc_handler, &mut res);

        } else {

            var current_obt : MissionObt = {seconds = 0, finetime = 0};
            var status : Status<i32> = Success;
            var tm_handler : Option<box TMHandlerT> = None;
            self->a_tm_handler_pool.alloc(&mut tm_handler);

            match tm_handler {

                case Some(b_tm_handler) => {

                    var tm_count : u16 = 0 : u16;
                    self->tm_counter.get_next_tm_count(&mut tm_count);

                    self->pus_service_9.get_current_obt(&mut current_obt);
                    status = build_tm_1_4_error_in_acceptance(&mut b_tm_handler, tm_count, tc_handler.packet_header.packet_id, tc_handler.packet_header.packet_seq_ctrl,
                                    current_obt);
                    
                    if (status is Success){

                        self->tm_channel.send_tm(b_tm_handler, &mut status);
                    } 
                    else {
                        self->a_tm_handler_pool.free(b_tm_handler);
                            
                    }
                    
                }
                case None => {
                    status = Failure(TM_POOL_ALLOC_FAILURE);
                    
                }
            }
        }


        self->a_tc_handler_pool.free(tc_handler);

        return res;
    }

};