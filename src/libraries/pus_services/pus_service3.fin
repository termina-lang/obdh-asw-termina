/*
PUS SERVICE 3 : HOUSEKEEPING
*/

import libraries.tc_ccsds_pus_format;
import libraries.tm_ccsds_pus_format;
import libraries.pus_services.pus_service1;
import libraries.serialize;

const SDP_num_params : usize = 64;
const max_num_of_SIDs : usize = 8;
const max_params_per_SID : usize = 16;

struct HKConfiguration {
    enabled : bool;
    SID : u8;
    interval : u16;
    interval_control : u16;
    num_params : u8;
    params_def : [u8; max_params_per_SID];
};


function get_SIDindex (hk_config_table : & [HKConfiguration; max_num_of_SIDs], SID : u8, index : &mut usize)->bool{

    var found : bool = false;

    for i : usize in 0 .. max_num_of_SIDs while found == false {

        if (SID == hk_config_table[i].SID){

            *index = i;
            found = true;
        }
    }
    return found;

}

function enable_config (tc_descriptor : &TCDescriptorT, tm_descriptor : &mut TMDescriptorT, tm_seq_counter: u16, 
                        hk_config_table : &mut [HKConfiguration; max_num_of_SIDs], new_enable_config : bool){

    var index : usize = 0;
    var SID : u8 = tc_descriptor->tc_bytes[10];

    if (get_SIDindex(&(*hk_config_table), SID, &mut index)){

        hk_config_table[index].enabled = new_enable_config;
        hk_config_table[index].interval_control = 0;
        build_tm_1_7(tm_descriptor, tm_seq_counter, tc_descriptor);

    } else {

        build_tm_1_8_tc_3_X_SIDnotvalid(tm_descriptor, tm_seq_counter, SID as u16, tc_descriptor);
        
    }    

    return;
}


function exec3_5TC(tc_descriptor : &TCDescriptorT, tm_descriptor : &mut TMDescriptorT, tm_seq_counter: u16, 
                hk_config_table : &mut [HKConfiguration; max_num_of_SIDs]){

    enable_config(tc_descriptor, tm_descriptor, tm_seq_counter, hk_config_table, true);

    return;
}

function exec3_6TC(tc_descriptor : &TCDescriptorT, tm_descriptor : &mut TMDescriptorT, tm_seq_counter: u16, 
                hk_config_table : &mut [HKConfiguration; max_num_of_SIDs]){

    enable_config(tc_descriptor, tm_descriptor, tm_seq_counter, hk_config_table, false);

    return;
}

function exec3_31TC(tc_descriptor : &TCDescriptorT, tm_descriptor : &mut TMDescriptorT, tm_seq_counter: u16, 
                hk_config_table : &mut [HKConfiguration; max_num_of_SIDs]){

    var SID : u8 = tc_descriptor->tc_bytes[10];
    var index : usize = 0;

    if(get_SIDindex(&(*hk_config_table), SID, &mut index)){

        hk_config_table[index].interval = deserialize_uint16(&(tc_descriptor->tc_bytes[11 : usize .. 13 : usize]));
        hk_config_table[index].interval_control = 0;
        build_tm_1_7(tm_descriptor, tm_seq_counter, tc_descriptor);

    } else {

        build_tm_1_8_tc_3_X_SIDnotvalid(tm_descriptor, tm_seq_counter, SID as u16, tc_descriptor);
    }

    return;
}


function PUS_service_3_execTC (tc_descriptor : &TCDescriptorT, tm_descriptor : &mut TMDescriptorT, tm_seq_counter: u16,
                                hk_config_table : &mut [HKConfiguration; max_num_of_SIDs]){

    var subtype : u8 = get_subtype(&(tc_descriptor->tc_bytes));
    
    if (subtype == 5){

        exec3_5TC(tc_descriptor, tm_descriptor, tm_seq_counter, hk_config_table);
    } 
    else if (subtype == 6){

        exec3_6TC(tc_descriptor, tm_descriptor, tm_seq_counter, hk_config_table);

    } else if (subtype == 31){

        exec3_31TC(tc_descriptor, tm_descriptor, tm_seq_counter, hk_config_table);

    } else {

        //This is an error in acceptance, could be modeled as an event
    }

    return;
}

