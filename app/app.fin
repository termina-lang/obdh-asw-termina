
import service_libraries.pus_services.pus_service1.pus_service1;
import service_libraries.pus_services.pus_service2.pus_service2;
import service_libraries.pus_services.pus_service3.pus_service3;
import service_libraries.pus_services.pus_service5.pus_service5;
import service_libraries.pus_services.pus_service12.pus_service12;
import service_libraries.pus_services.pus_service17.pus_service17;
import service_libraries.pus_services.pus_service19.pus_service19;
import service_libraries.pus_services.pus_service20.pus_service20;
import service_libraries.pus_services.pus_service4.pus_service4;
import service_libraries.pus_services.pus_service9.pus_service9;
import resources.uart;
import resources.gpio_driver;
import tasks.hk_fdir_mng.hk_fdir;
import tasks.bkgtcexec;
import tasks.icu_manager.icu_manager;
import handlers.init;
import handlers.uart_handler;
import resources.tm_counter;


import tasks.icu_manager.icu_manager;
import tasks.hk_fdir_mng.hk_fdir;

emitter hk_fdir_timer : PeriodicTimer = {
    period = {tv_sec = 1 : u32, tv_usec = 0 : u32} : TimeVal
} : PeriodicTimer;



channel tc_message_queue : MsgQueue<box TCHandlerT;10>;
channel hkfdir_message_queue : MsgQueue<box TCHandlerT;10>;
channel bkg_message_queue : MsgQueue<box TCHandlerT;10>;
channel action_tc_message_queue : MsgQueue<box TCHandlerT;5>;

resource tm_pool : Pool<TMHandlerT; 20>;
resource tc_pool : Pool<TCHandlerT; 20>;

resource u32_system_data_pool : AtomicArray<u32; sdp_num_u32_params> = {
    values = [0; sdp_num_u32_params]
} : AtomicArray<u32; sdp_num_u32_params>;

resource u8_system_data_pool : AtomicArray<u8; sdp_num_u8_params> = {
    values = [0; sdp_num_u8_params]
} : AtomicArray<u8; sdp_num_u8_params>;


resource uart_driver : UARTDriver = {
    uart_regs @ 0x80000100 
} : UARTDriver;


resource gpio_drv : GPIODriver = {
    registers @ 0x80000900
} : GPIODriver;


resource telemetry_channel : TMChannel = {
    uart <-> uart_driver,
    a_tm_handler_pool <-> tm_pool
} : TMChannel;


resource telemetry_counter : TMCounter = {
    tm_count = 0
} : TMCounter;


resource pus_service_9 : PUSService9 = {
    ref_obt = {seconds = 0, finetime = 0},
    ref_time_val_from_power_on = {tv_sec = 0, tv_usec = 0},
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps9_init_tc_req_status_update,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    system_port <-> system_entry
} : PUSService9;

resource pus_service_5 : PUSService5 = {
    Ev_ID_enable_config = {0x00000007, 0x00000000, 0x00000000, 0x00000007},
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps5_init_tc_req_status_update,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9
} : PUSService5;


resource pus_service_3 : PUSService3 = {
    hk_config_table =  {{enabled = true, SID = 0, interval = 2, interval_control = 0, num_params =5, params_def={0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0}},
                        {enabled = false, SID = 10, interval = 30, interval_control = 0, num_params = 3, params_def = {5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                        {enabled = false, SID = 11, interval = 60, interval_control = 0, num_params = 3, params_def = {8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                        {enabled = false, SID = 0, interval = 0, interval_control = 0, num_params = 0, params_def = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                        {enabled = false, SID = 0, interval = 0, interval_control = 0, num_params = 0, params_def = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                        {enabled = false, SID = 0, interval = 0, interval_control = 0, num_params = 0, params_def = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                        {enabled = false, SID = 0, interval = 0, interval_control = 0, num_params = 0, params_def = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                        {enabled = false, SID = 0, interval = 0, interval_control = 0, num_params = 0, params_def = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}},
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps3_init_tc_req_status_update,
    system_data_pool_u32 <-> u32_system_data_pool,
    system_data_pool_u8 <-> u8_system_data_pool,
    tm_channel <-> telemetry_channel,   
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9,
    pus_service_5 <-> pus_service_5,
    random_seed = 42
} : PUSService3;







resource pus_service_12: PUSService12 = {
    do_monitoring_req_status = DoMonitoringReqStatus::Init,
    do_monitoring_req_status_update = ps12_init_do_monitoring_req_status_update,
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps12_init_tc_req_status_update,
    param_mon_config_table = [{ PID = 0, type = MonitorCheckType::Free, enabled = false, definition = MonitorDefinition::Unselected, repetition= 0, repetition_control= 0, interval = 0, interval_control = 0,
    transition_obt = {seconds = 0, finetime = 0}, temp_state = CheckState::Unselected, current_state = CheckState::Unselected}; max_num_pmon_ids],
    monitoring_transition_counter = 0,
    param_mon_transitions_table = [{PMONID = 0, PID = 0, type = MonitorCheckType::Free, mask_value = 0, limit_value = 0, new_value = 0,
    prev_status = CheckState::Unselected, new_status = CheckState::Unselected, trans_obt = {seconds = 0, finetime = 0}}; max_num_transitions],
    system_data_pool_u32 <-> u32_system_data_pool,
    system_data_pool_u8 <-> u8_system_data_pool,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9
} : PUSService12;


resource pus_service_19 : PUSService19 = {
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps19_init_tc_req_status_update,
    event_action_config = [{enabled = false, event_ID = 0}; max_event_action_definitions],
    event_action_packets = [tc_handler_init(); max_event_action_definitions],
    pending_action_queue_1I  = [tc_handler_init(); event_action_queue_dimension],
    pending_action_queue_2LS = [tc_handler_init(); event_action_queue_dimension],
    pending_action_queue_3MS = [tc_handler_init(); event_action_queue_dimension],
    pending_action_queue_4HS = [tc_handler_init(); event_action_queue_dimension],
    pending_action_number = [0; 4],
    pending_action_head = [0; 4],
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9
}: PUSService19;


resource pus_service_20 : PUSService20 = {
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps20_init_tc_req_status_update,
    system_data_pool_u32 <-> u32_system_data_pool,
    system_data_pool_u8 <-> u8_system_data_pool,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9
}: PUSService20;


resource pus_service_17 : PUSService17 = {
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps17_init_tc_req_status_update,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9
}: PUSService17;

resource pus_service_128 : PUSService128 = {
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps128_init_tc_req_status_update,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9
}: PUSService128;

resource pus_service_2 : PUSService2 = {
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps2_init_tc_req_status_update,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    gpio_driver <-> gpio_drv,
    pus_service_9 <-> pus_service_9
} : PUSService2;

resource pus_service_4 : PUSService4 = {
    exec_tc_req_status = PSExecTCReqStatus::Init,
    exec_tc_req_status_update = ps4_init_tc_req_status_update,
    param_stats = [{min = 0, min_obt = {seconds = 0, finetime = 0}, max = 0, max_obt = {seconds = 0, finetime = 0}, mean_value = 0, samples = 0}; max_num_of_stats],
    stats_config_table = {defined = [false; max_num_of_stats],  PID = [0; max_num_of_stats], start_time = [{seconds = 0, finetime = 0}; max_num_of_stats]},
    system_data_pool_u32 <-> u32_system_data_pool,
    system_data_pool_u8 <-> u8_system_data_pool,
    tm_channel <-> telemetry_channel,
    a_tm_handler_pool <-> tm_pool,
    tm_counter <-> telemetry_counter,
    pus_service_9 <-> pus_service_9
} : PUSService4;



resource mng_tc_executor : ManagerTCExecutor = {
    tm_channel <-> telemetry_channel,
    tm_counter <-> telemetry_counter,
    a_tm_handler_pool <-> tm_pool,
    pus_service_17 <-> pus_service_17,
    pus_service_2 <-> pus_service_2,
    pus_service_9 <-> pus_service_9,
    pus_service_128 <-> pus_service_128
} : ManagerTCExecutor;


handler init : Init = {
    uart <-> uart_driver,
    gpio_driver <-> gpio_drv,
    system_data_pool_u32 <-> u32_system_data_pool,
    system_data_pool_u8 <-> u8_system_data_pool,
    system_init_ev <- system_init
} : Init;


handler uart_handler : UARTHandler = {
    tc_message_queue_output -> tc_message_queue,
    uart <-> uart_driver,
    a_tc_handler_pool <-> tc_pool,
    irq_entry <- irq_3,
    telecommand =
        {
            tc_bytes = [0 : u8; 256],
            tc_num_bytes = 0 : usize
        },
    handler_state = UARTHandlerState::RXFrameHeader(0)
} : UARTHandler;


#[priority(5: u32)]
task icu_manager : ICUManager = {
    tc_message_queue_input <- tc_message_queue,
    action_tc_message_queue_input <- action_tc_message_queue,
    a_tc_handler_pool <-> tc_pool,
    hkfdir_message_queue_output -> hkfdir_message_queue,
    bkg_message_queue_output -> bkg_message_queue,
    tc_executor <-> mng_tc_executor
} : ICUManager;


#[priority(6: u32)]
task hk_fdir : HouseKeepingFDIR = {
    hk_fdir_timer_ev <- hk_fdir_timer,
    hkfdir_message_queue_input <- hkfdir_message_queue,
    action_tc_message_queue_output -> action_tc_message_queue,
    a_tc_handler_pool <-> tc_pool,
    pus_service_3 <-> pus_service_3,
    pus_service_12 <-> pus_service_12,
    pus_service_5 <-> pus_service_5,
    pus_service_19 <-> pus_service_19,
    pus_service_4 <-> pus_service_4,
    pus_service_9 <-> pus_service_9,
    tm_channel <-> telemetry_channel,
    tm_counter <-> telemetry_counter,
    a_tm_handler_pool <-> tm_pool
} : HouseKeepingFDIR;


#[priority(8: u32)]
task pus_bkg_tc_executor : PUSBKGTCExecutor = {
    bkg_message_queue_input <- bkg_message_queue,
    a_tc_handler_pool  <-> tc_pool,
    pus_service_20 <-> pus_service_20,
    pus_service_9 <-> pus_service_9,
    tm_channel <-> telemetry_channel,
    tm_counter <-> telemetry_counter,
    a_tm_handler_pool <-> tm_pool
} : PUSBKGTCExecutor;















